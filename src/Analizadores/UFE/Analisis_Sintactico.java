
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores.UFE;

import java_cup.runtime.Symbol;
import Estructuras.*;
import Nodos.NodoSintactico;
import Modelos.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analisis_Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public Analisis_Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analisis_Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analisis_Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\216\000\002\002\004\000\002\002\003\000\002\014" +
    "\004\000\002\014\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\003\005\000" +
    "\002\003\006\000\002\004\005\000\002\004\003\000\002" +
    "\005\005\000\002\005\007\000\002\005\010\000\002\005" +
    "\006\000\002\005\003\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\004\000\002\010\005\000\002\010\004\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\003\000" +
    "\002\013\005\000\002\013\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\006\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\006\010\000\002\006\011\000\002\006\011\000\002" +
    "\006\012\000\002\007\004\000\002\007\005\000\002\007" +
    "\006\000\002\016\007\000\002\017\010\000\002\017\011" +
    "\000\002\020\010\000\002\020\011\000\002\021\011\000" +
    "\002\022\007\000\002\022\006\000\002\023\004\000\002" +
    "\023\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\033\006\000\002\033\010\000" +
    "\002\032\012\000\002\032\011\000\002\031\013\000\002" +
    "\031\012\000\002\044\004\000\002\044\003\000\002\045" +
    "\012\000\002\046\011\000\002\050\004\000\002\050\003" +
    "\000\002\047\011\000\002\030\012\000\002\030\014\000" +
    "\002\027\011\000\002\027\012\000\002\027\010\000\002" +
    "\027\011\000\002\026\011\000\002\026\012\000\002\026" +
    "\010\000\002\026\011\000\002\040\003\000\002\040\005" +
    "\000\002\040\003\000\002\025\013\000\002\025\012\000" +
    "\002\025\012\000\002\025\011\000\002\034\004\000\002" +
    "\034\003\000\002\035\005\000\002\035\005\000\002\035" +
    "\005\000\002\035\005\000\002\035\005\000\002\035\005" +
    "\000\002\035\005\000\002\035\005\000\002\041\004\000" +
    "\002\041\003\000\002\042\003\000\002\042\005\000\002" +
    "\037\003\000\002\037\003\000\002\037\003\000\002\051" +
    "\004\000\002\051\003\000\002\043\003\000\002\043\005" +
    "\000\002\043\005\000\002\036\005\000\002\036\005\000" +
    "\002\036\005\000\002\036\005\000\002\036\005\000\002" +
    "\036\004\000\002\036\005\000\002\036\005\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\010\000\002\052\004\000" +
    "\002\052\003\000\002\053\003\000\002\053\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0166\000\040\006\020\013\007\024\030\034\027\035" +
    "\022\075\032\077\006\100\011\101\013\104\035\105\005" +
    "\106\021\107\026\110\004\111\016\001\002\000\106\002" +
    "\uffdb\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010\uffdb\012\uffdb" +
    "\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021" +
    "\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\027\uffdb\031\uffdb" +
    "\032\uffdb\033\uffdb\034\uffdb\035\uffdb\075\uffdb\077\uffdb\100" +
    "\uffdb\101\uffdb\104\uffdb\105\uffdb\106\uffdb\107\uffdb\110\uffdb" +
    "\111\uffdb\001\002\000\106\002\uffda\004\uffda\005\uffda\006" +
    "\uffda\007\uffda\010\uffda\012\uffda\013\uffda\014\uffda\015\uffda" +
    "\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024" +
    "\uffda\025\uffda\027\uffda\031\uffda\032\uffda\033\uffda\034\uffda" +
    "\035\uffda\075\uffda\077\uffda\100\uffda\101\uffda\104\uffda\105" +
    "\uffda\106\uffda\107\uffda\110\uffda\111\uffda\001\002\000\004" +
    "\024\u0162\001\002\000\024\006\020\013\007\024\030\104" +
    "\041\105\005\106\021\107\026\110\004\111\016\001\002" +
    "\000\044\002\ufffd\006\ufffd\013\ufffd\024\ufffd\027\ufffd\034" +
    "\ufffd\035\ufffd\075\ufffd\077\ufffd\100\ufffd\101\ufffd\104\ufffd" +
    "\105\ufffd\106\ufffd\107\ufffd\110\ufffd\111\ufffd\001\002\000" +
    "\004\024\u015d\001\002\000\042\002\000\006\020\013\007" +
    "\024\030\034\027\035\022\075\032\077\006\100\011\101" +
    "\013\104\035\105\005\106\021\107\026\110\004\111\016" +
    "\001\002\000\004\024\u0156\001\002\000\044\002\ufffb\006" +
    "\ufffb\013\ufffb\024\ufffb\027\ufffb\034\ufffb\035\ufffb\075\ufffb" +
    "\077\ufffb\100\ufffb\101\ufffb\104\ufffb\105\ufffb\106\ufffb\107" +
    "\ufffb\110\ufffb\111\ufffb\001\002\000\044\002\uffd4\006\uffd4" +
    "\013\uffd4\024\uffd4\027\uffd4\034\uffd4\035\uffd4\075\uffd4\077" +
    "\uffd4\100\uffd4\101\uffd4\104\uffd4\105\uffd4\106\uffd4\107\uffd4" +
    "\110\uffd4\111\uffd4\001\002\000\106\002\uffd8\004\uffd8\005" +
    "\uffd8\006\uffd8\007\uffd8\010\uffd8\012\uffd8\013\uffd8\014\uffd8" +
    "\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023" +
    "\uffd8\024\uffd8\025\uffd8\027\uffd8\031\uffd8\032\uffd8\033\uffd8" +
    "\034\uffd8\035\uffd8\075\uffd8\077\uffd8\100\uffd8\101\uffd8\104" +
    "\uffd8\105\uffd8\106\uffd8\107\uffd8\110\uffd8\111\uffd8\001\002" +
    "\000\044\002\ufffa\006\ufffa\013\ufffa\024\ufffa\027\ufffa\034" +
    "\ufffa\035\ufffa\075\ufffa\077\ufffa\100\ufffa\101\ufffa\104\ufffa" +
    "\105\ufffa\106\ufffa\107\ufffa\110\ufffa\111\ufffa\001\002\000" +
    "\024\006\020\013\007\024\030\104\041\105\005\106\021" +
    "\107\026\110\004\111\016\001\002\000\106\002\uffd9\004" +
    "\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\012\uffd9\013\uffd9" +
    "\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022" +
    "\uffd9\023\uffd9\024\uffd9\025\uffd9\027\uffd9\031\uffd9\032\uffd9" +
    "\033\uffd9\034\uffd9\035\uffd9\075\uffd9\077\uffd9\100\uffd9\101" +
    "\uffd9\104\uffd9\105\uffd9\106\uffd9\107\uffd9\110\uffd9\111\uffd9" +
    "\001\002\000\004\104\150\001\002\000\076\002\ufffc\004" +
    "\050\005\056\006\046\007\047\010\043\012\055\013\ufffc" +
    "\014\057\015\044\016\051\017\060\020\045\021\053\022" +
    "\052\023\054\024\ufffc\027\ufffc\034\ufffc\035\ufffc\075\ufffc" +
    "\077\ufffc\100\ufffc\101\ufffc\104\ufffc\105\ufffc\106\ufffc\107" +
    "\ufffc\110\ufffc\111\ufffc\001\002\000\044\002\uffd5\006\uffd5" +
    "\013\uffd5\024\uffd5\027\uffd5\034\uffd5\035\uffd5\075\uffd5\077" +
    "\uffd5\100\uffd5\101\uffd5\104\uffd5\105\uffd5\106\uffd5\107\uffd5" +
    "\110\uffd5\111\uffd5\001\002\000\044\002\uffd2\006\uffd2\013" +
    "\uffd2\024\uffd2\027\uffd2\034\uffd2\035\uffd2\075\uffd2\077\uffd2" +
    "\100\uffd2\101\uffd2\104\uffd2\105\uffd2\106\uffd2\107\uffd2\110" +
    "\uffd2\111\uffd2\001\002\000\106\002\uffdc\004\uffdc\005\uffdc" +
    "\006\uffdc\007\uffdc\010\uffdc\012\uffdc\013\uffdc\014\uffdc\015" +
    "\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc" +
    "\024\uffdc\025\uffdc\027\uffdc\031\uffdc\032\uffdc\033\uffdc\034" +
    "\uffdc\035\uffdc\075\uffdc\077\uffdc\100\uffdc\101\uffdc\104\uffdc" +
    "\105\uffdc\106\uffdc\107\uffdc\110\uffdc\111\uffdc\001\002\000" +
    "\004\104\126\001\002\000\024\006\020\013\007\024\030" +
    "\104\041\105\005\106\021\107\026\110\004\111\016\001" +
    "\002\000\044\002\uffd3\006\uffd3\013\uffd3\024\uffd3\027\uffd3" +
    "\034\uffd3\035\uffd3\075\uffd3\077\uffd3\100\uffd3\101\uffd3\104" +
    "\uffd3\105\uffd3\106\uffd3\107\uffd3\110\uffd3\111\uffd3\001\002" +
    "\000\004\024\103\001\002\000\044\002\ufffe\006\ufffe\013" +
    "\ufffe\024\ufffe\027\ufffe\034\ufffe\035\ufffe\075\ufffe\077\ufffe" +
    "\100\ufffe\101\ufffe\104\ufffe\105\ufffe\106\ufffe\107\ufffe\110" +
    "\ufffe\111\ufffe\001\002\000\004\002\102\001\002\000\102" +
    "\002\uffd7\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011" +
    "\037\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7" +
    "\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\027\uffd7\030" +
    "\040\034\uffd7\035\uffd7\075\uffd7\077\uffd7\100\uffd7\101\uffd7" +
    "\104\uffd7\105\uffd7\106\uffd7\107\uffd7\110\uffd7\111\uffd7\001" +
    "\002\000\106\002\uffdf\004\uffdf\005\uffdf\006\uffdf\007\uffdf" +
    "\010\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017" +
    "\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf" +
    "\027\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\075" +
    "\uffdf\077\uffdf\100\uffdf\101\uffdf\104\uffdf\105\uffdf\106\uffdf" +
    "\107\uffdf\110\uffdf\111\uffdf\001\002\000\024\006\020\013" +
    "\007\024\030\104\041\105\005\106\021\107\026\110\004" +
    "\111\016\001\002\000\024\006\020\013\007\024\030\104" +
    "\041\105\005\106\021\107\026\110\004\111\016\001\002" +
    "\000\110\002\uffd7\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010" +
    "\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7" +
    "\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\027" +
    "\uffd7\030\040\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7" +
    "\075\uffd7\077\uffd7\100\uffd7\101\uffd7\104\uffd7\105\uffd7\106" +
    "\uffd7\107\uffd7\110\uffd7\111\uffd7\001\002\000\040\004\050" +
    "\005\056\006\046\007\047\010\043\012\055\014\057\015" +
    "\044\016\051\017\060\020\045\021\053\022\052\023\054" +
    "\031\061\001\002\000\024\006\020\013\007\024\030\104" +
    "\041\105\005\106\021\107\026\110\004\111\016\001\002" +
    "\000\024\006\020\013\007\024\030\104\041\105\005\106" +
    "\021\107\026\110\004\111\016\001\002\000\024\006\020" +
    "\013\007\024\030\104\041\105\005\106\021\107\026\110" +
    "\004\111\016\001\002\000\024\006\020\013\007\024\030" +
    "\104\041\105\005\106\021\107\026\110\004\111\016\001" +
    "\002\000\024\006\020\013\007\024\030\104\041\105\005" +
    "\106\021\107\026\110\004\111\016\001\002\000\024\006" +
    "\020\013\007\024\030\104\041\105\005\106\021\107\026" +
    "\110\004\111\016\001\002\000\024\006\020\013\007\024" +
    "\030\104\041\105\005\106\021\107\026\110\004\111\016" +
    "\001\002\000\024\006\020\013\007\024\030\104\041\105" +
    "\005\106\021\107\026\110\004\111\016\001\002\000\024" +
    "\006\020\013\007\024\030\104\041\105\005\106\021\107" +
    "\026\110\004\111\016\001\002\000\024\006\020\013\007" +
    "\024\030\104\041\105\005\106\021\107\026\110\004\111" +
    "\016\001\002\000\024\006\020\013\007\024\030\104\041" +
    "\105\005\106\021\107\026\110\004\111\016\001\002\000" +
    "\024\006\020\013\007\024\030\104\041\105\005\106\021" +
    "\107\026\110\004\111\016\001\002\000\024\006\020\013" +
    "\007\024\030\104\041\105\005\106\021\107\026\110\004" +
    "\111\016\001\002\000\024\006\020\013\007\024\030\104" +
    "\041\105\005\106\021\107\026\110\004\111\016\001\002" +
    "\000\106\002\uffd6\004\uffd6\005\uffd6\006\uffd6\007\uffd6\010" +
    "\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6" +
    "\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\027" +
    "\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\075\uffd6" +
    "\077\uffd6\100\uffd6\101\uffd6\104\uffd6\105\uffd6\106\uffd6\107" +
    "\uffd6\110\uffd6\111\uffd6\001\002\000\106\002\uffe4\004\050" +
    "\005\056\006\046\007\047\010\043\012\uffe4\013\uffe4\014" +
    "\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4" +
    "\023\uffe4\024\uffe4\025\uffe4\027\uffe4\031\uffe4\032\uffe4\033" +
    "\uffe4\034\uffe4\035\uffe4\075\uffe4\077\uffe4\100\uffe4\101\uffe4" +
    "\104\uffe4\105\uffe4\106\uffe4\107\uffe4\110\uffe4\111\uffe4\001" +
    "\002\000\106\002\uffe8\004\050\005\056\006\046\007\047" +
    "\010\043\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017" +
    "\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8" +
    "\027\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\075" +
    "\uffe8\077\uffe8\100\uffe8\101\uffe8\104\uffe8\105\uffe8\106\uffe8" +
    "\107\uffe8\110\uffe8\111\uffe8\001\002\000\106\002\uffee\004" +
    "\uffee\005\uffee\006\uffee\007\uffee\010\043\012\uffee\013\uffee" +
    "\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022" +
    "\uffee\023\uffee\024\uffee\025\uffee\027\uffee\031\uffee\032\uffee" +
    "\033\uffee\034\uffee\035\uffee\075\uffee\077\uffee\100\uffee\101" +
    "\uffee\104\uffee\105\uffee\106\uffee\107\uffee\110\uffee\111\uffee" +
    "\001\002\000\106\002\uffe7\004\050\005\056\006\046\007" +
    "\047\010\043\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7" +
    "\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025" +
    "\uffe7\027\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7" +
    "\075\uffe7\077\uffe7\100\uffe7\101\uffe7\104\uffe7\105\uffe7\106" +
    "\uffe7\107\uffe7\110\uffe7\111\uffe7\001\002\000\106\002\uffe0" +
    "\004\050\005\056\006\046\007\047\010\043\012\055\013" +
    "\uffe0\014\057\015\044\016\051\017\060\020\045\021\uffe0" +
    "\022\uffe0\023\uffe0\024\uffe0\025\uffe0\027\uffe0\031\uffe0\032" +
    "\uffe0\033\uffe0\034\uffe0\035\uffe0\075\uffe0\077\uffe0\100\uffe0" +
    "\101\uffe0\104\uffe0\105\uffe0\106\uffe0\107\uffe0\110\uffe0\111" +
    "\uffe0\001\002\000\106\002\uffe2\004\050\005\056\006\046" +
    "\007\047\010\043\012\055\013\uffe2\014\057\015\044\016" +
    "\051\017\060\020\045\021\uffe2\022\uffe2\023\054\024\uffe2" +
    "\025\uffe2\027\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035" +
    "\uffe2\075\uffe2\077\uffe2\100\uffe2\101\uffe2\104\uffe2\105\uffe2" +
    "\106\uffe2\107\uffe2\110\uffe2\111\uffe2\001\002\000\106\002" +
    "\uffe1\004\050\005\056\006\046\007\047\010\043\012\055" +
    "\013\uffe1\014\057\015\044\016\051\017\060\020\045\021" +
    "\053\022\uffe1\023\054\024\uffe1\025\uffe1\027\uffe1\031\uffe1" +
    "\032\uffe1\033\uffe1\034\uffe1\035\uffe1\075\uffe1\077\uffe1\100" +
    "\uffe1\101\uffe1\104\uffe1\105\uffe1\106\uffe1\107\uffe1\110\uffe1" +
    "\111\uffe1\001\002\000\106\002\uffe5\004\050\005\056\006" +
    "\046\007\047\010\043\012\uffe5\013\uffe5\014\uffe5\015\uffe5" +
    "\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024" +
    "\uffe5\025\uffe5\027\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5" +
    "\035\uffe5\075\uffe5\077\uffe5\100\uffe5\101\uffe5\104\uffe5\105" +
    "\uffe5\106\uffe5\107\uffe5\110\uffe5\111\uffe5\001\002\000\106" +
    "\002\uffec\004\uffec\005\uffec\006\uffec\007\uffec\010\043\012" +
    "\uffec\013\uffec\014\uffec\015\uffec\016\uffec\017\uffec\020\uffec" +
    "\021\uffec\022\uffec\023\uffec\024\uffec\025\uffec\027\uffec\031" +
    "\uffec\032\uffec\033\uffec\034\uffec\035\uffec\075\uffec\077\uffec" +
    "\100\uffec\101\uffec\104\uffec\105\uffec\106\uffec\107\uffec\110" +
    "\uffec\111\uffec\001\002\000\106\002\ufff0\004\050\005\056" +
    "\006\ufff0\007\ufff0\010\043\012\ufff0\013\ufff0\014\ufff0\015" +
    "\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0" +
    "\024\ufff0\025\ufff0\027\ufff0\031\ufff0\032\ufff0\033\ufff0\034" +
    "\ufff0\035\ufff0\075\ufff0\077\ufff0\100\ufff0\101\ufff0\104\ufff0" +
    "\105\ufff0\106\ufff0\107\ufff0\110\ufff0\111\ufff0\001\002\000" +
    "\106\002\uffef\004\050\005\056\006\uffef\007\uffef\010\043" +
    "\012\uffef\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020" +
    "\uffef\021\uffef\022\uffef\023\uffef\024\uffef\025\uffef\027\uffef" +
    "\031\uffef\032\uffef\033\uffef\034\uffef\035\uffef\075\uffef\077" +
    "\uffef\100\uffef\101\uffef\104\uffef\105\uffef\106\uffef\107\uffef" +
    "\110\uffef\111\uffef\001\002\000\106\002\uffe3\004\050\005" +
    "\056\006\046\007\047\010\043\012\uffe3\013\uffe3\014\uffe3" +
    "\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023" +
    "\uffe3\024\uffe3\025\uffe3\027\uffe3\031\uffe3\032\uffe3\033\uffe3" +
    "\034\uffe3\035\uffe3\075\uffe3\077\uffe3\100\uffe3\101\uffe3\104" +
    "\uffe3\105\uffe3\106\uffe3\107\uffe3\110\uffe3\111\uffe3\001\002" +
    "\000\106\002\uffe6\004\050\005\056\006\046\007\047\010" +
    "\043\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6" +
    "\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\027" +
    "\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\075\uffe6" +
    "\077\uffe6\100\uffe6\101\uffe6\104\uffe6\105\uffe6\106\uffe6\107" +
    "\uffe6\110\uffe6\111\uffe6\001\002\000\106\002\uffed\004\uffed" +
    "\005\uffed\006\uffed\007\uffed\010\uffed\012\uffed\013\uffed\014" +
    "\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022\uffed" +
    "\023\uffed\024\uffed\025\uffed\027\uffed\031\uffed\032\uffed\033" +
    "\uffed\034\uffed\035\uffed\075\uffed\077\uffed\100\uffed\101\uffed" +
    "\104\uffed\105\uffed\106\uffed\107\uffed\110\uffed\111\uffed\001" +
    "\002\000\040\004\050\005\056\006\046\007\047\010\043" +
    "\012\055\014\057\015\044\016\051\017\060\020\045\021" +
    "\053\022\052\023\054\032\101\001\002\000\044\002\ufff8" +
    "\006\ufff8\013\ufff8\024\ufff8\027\ufff8\034\ufff8\035\ufff8\075" +
    "\ufff8\077\ufff8\100\ufff8\101\ufff8\104\ufff8\105\ufff8\106\ufff8" +
    "\107\ufff8\110\ufff8\111\ufff8\001\002\000\004\002\001\001" +
    "\002\000\024\006\020\013\007\024\030\104\041\105\005" +
    "\106\021\107\026\110\004\111\016\001\002\000\040\004" +
    "\050\005\056\006\046\007\047\010\043\012\055\014\057" +
    "\015\044\016\051\017\060\020\045\021\053\022\052\023" +
    "\054\025\105\001\002\000\004\026\106\001\002\000\042" +
    "\006\020\013\007\024\030\027\110\034\027\035\022\075" +
    "\032\077\006\100\011\101\013\104\035\105\005\106\021" +
    "\107\026\110\004\111\016\001\002\000\042\006\020\013" +
    "\007\024\030\027\121\034\027\035\022\075\032\077\006" +
    "\100\011\101\013\104\035\105\005\106\021\107\026\110" +
    "\004\111\016\001\002\000\046\002\uffd1\006\uffd1\013\uffd1" +
    "\024\uffd1\027\uffd1\034\uffd1\035\uffd1\075\uffd1\076\111\077" +
    "\uffd1\100\uffd1\101\uffd1\104\uffd1\105\uffd1\106\uffd1\107\uffd1" +
    "\110\uffd1\111\uffd1\001\002\000\006\026\113\075\032\001" +
    "\002\000\044\002\uffd0\006\uffd0\013\uffd0\024\uffd0\027\uffd0" +
    "\034\uffd0\035\uffd0\075\uffd0\077\uffd0\100\uffd0\101\uffd0\104" +
    "\uffd0\105\uffd0\106\uffd0\107\uffd0\110\uffd0\111\uffd0\001\002" +
    "\000\042\006\020\013\007\024\030\027\116\034\027\035" +
    "\022\075\032\077\006\100\011\101\013\104\035\105\005" +
    "\106\021\107\026\110\004\111\016\001\002\000\044\002" +
    "\uffcd\006\uffcd\013\uffcd\024\uffcd\027\uffcd\034\uffcd\035\uffcd" +
    "\075\uffcd\077\uffcd\100\uffcd\101\uffcd\104\uffcd\105\uffcd\106" +
    "\uffcd\107\uffcd\110\uffcd\111\uffcd\001\002\000\042\006\020" +
    "\013\007\024\030\027\117\034\027\035\022\075\032\077" +
    "\006\100\011\101\013\104\035\105\005\106\021\107\026" +
    "\110\004\111\016\001\002\000\044\002\uffcc\006\uffcc\013" +
    "\uffcc\024\uffcc\027\uffcc\034\uffcc\035\uffcc\075\uffcc\077\uffcc" +
    "\100\uffcc\101\uffcc\104\uffcc\105\uffcc\106\uffcc\107\uffcc\110" +
    "\uffcc\111\uffcc\001\002\000\044\002\uffcb\006\uffcb\013\uffcb" +
    "\024\uffcb\027\uffcb\034\uffcb\035\uffcb\075\uffcb\077\uffcb\100" +
    "\uffcb\101\uffcb\104\uffcb\105\uffcb\106\uffcb\107\uffcb\110\uffcb" +
    "\111\uffcb\001\002\000\044\002\uffff\006\uffff\013\uffff\024" +
    "\uffff\027\uffff\034\uffff\035\uffff\075\uffff\077\uffff\100\uffff" +
    "\101\uffff\104\uffff\105\uffff\106\uffff\107\uffff\110\uffff\111" +
    "\uffff\001\002\000\046\002\uffcf\006\uffcf\013\uffcf\024\uffcf" +
    "\027\uffcf\034\uffcf\035\uffcf\075\uffcf\076\111\077\uffcf\100" +
    "\uffcf\101\uffcf\104\uffcf\105\uffcf\106\uffcf\107\uffcf\110\uffcf" +
    "\111\uffcf\001\002\000\044\002\uffce\006\uffce\013\uffce\024" +
    "\uffce\027\uffce\034\uffce\035\uffce\075\uffce\077\uffce\100\uffce" +
    "\101\uffce\104\uffce\105\uffce\106\uffce\107\uffce\110\uffce\111" +
    "\uffce\001\002\000\040\004\050\005\056\006\046\007\047" +
    "\010\043\012\055\014\057\015\044\016\051\017\060\020" +
    "\045\021\053\022\052\023\054\025\124\001\002\000\106" +
    "\002\uffea\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea\012" +
    "\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea" +
    "\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea\027\uffea\031" +
    "\uffea\032\uffea\033\uffea\034\uffea\035\uffea\075\uffea\077\uffea" +
    "\100\uffea\101\uffea\104\uffea\105\uffea\106\uffea\107\uffea\110" +
    "\uffea\111\uffea\001\002\000\006\032\146\033\145\001\002" +
    "\000\012\011\130\030\131\032\ufff1\033\ufff1\001\002\000" +
    "\006\032\ufff6\033\ufff6\001\002\000\026\006\020\013\007" +
    "\024\030\026\136\104\041\105\005\106\021\107\026\110" +
    "\004\111\016\001\002\000\024\006\020\013\007\024\030" +
    "\104\041\105\005\106\021\107\026\110\004\111\016\001" +
    "\002\000\040\004\050\005\056\006\046\007\047\010\043" +
    "\012\055\014\057\015\044\016\051\017\060\020\045\021" +
    "\053\022\052\023\054\031\133\001\002\000\010\011\134" +
    "\032\ufff2\033\ufff2\001\002\000\024\006\020\013\007\024" +
    "\030\104\041\105\005\106\021\107\026\110\004\111\016" +
    "\001\002\000\042\004\050\005\056\006\046\007\047\010" +
    "\043\012\055\014\057\015\044\016\051\017\060\020\045" +
    "\021\053\022\052\023\054\032\ufff3\033\ufff3\001\002\000" +
    "\024\006\020\013\007\024\030\104\041\105\005\106\021" +
    "\107\026\110\004\111\016\001\002\000\042\004\050\005" +
    "\056\006\046\007\047\010\043\012\055\014\057\015\044" +
    "\016\051\017\060\020\045\021\053\022\052\023\054\032" +
    "\ufff5\033\ufff5\001\002\000\006\027\142\033\143\001\002" +
    "\000\042\004\050\005\056\006\046\007\047\010\043\012" +
    "\055\014\057\015\044\016\051\017\060\020\045\021\053" +
    "\022\052\023\054\027\uffdd\033\uffdd\001\002\000\006\032" +
    "\ufff4\033\ufff4\001\002\000\024\006\020\013\007\024\030" +
    "\104\041\105\005\106\021\107\026\110\004\111\016\001" +
    "\002\000\042\004\050\005\056\006\046\007\047\010\043" +
    "\012\055\014\057\015\044\016\051\017\060\020\045\021" +
    "\053\022\052\023\054\027\uffde\033\uffde\001\002\000\004" +
    "\104\126\001\002\000\044\002\ufff9\006\ufff9\013\ufff9\024" +
    "\ufff9\027\ufff9\034\ufff9\035\ufff9\075\ufff9\077\ufff9\100\ufff9" +
    "\101\ufff9\104\ufff9\105\ufff9\106\ufff9\107\ufff9\110\ufff9\111" +
    "\ufff9\001\002\000\006\032\ufff7\033\ufff7\001\002\000\004" +
    "\024\151\001\002\000\004\025\152\001\002\000\004\026" +
    "\153\001\002\000\004\047\155\001\002\000\004\027\u0154" +
    "\001\002\000\004\024\156\001\002\000\006\015\157\025" +
    "\160\001\002\000\020\050\176\051\201\052\177\053\200" +
    "\054\202\067\204\071\203\001\002\000\004\032\175\001" +
    "\002\000\006\015\uffbd\025\uffbd\001\002\000\006\015\uffbb" +
    "\025\uffbb\001\002\000\006\015\uffbc\025\uffbc\001\002\000" +
    "\006\015\uffc1\025\uffc1\001\002\000\006\015\uffc0\025\uffc0" +
    "\001\002\000\006\015\uffbf\025\uffbf\001\002\000\006\015" +
    "\uffbe\025\uffbe\001\002\000\006\015\157\025\172\001\002" +
    "\000\006\015\uffba\025\uffba\001\002\000\004\032\174\001" +
    "\002\000\006\015\uffc2\025\uffc2\001\002\000\004\027\uffc4" +
    "\001\002\000\004\027\uffc3\001\002\000\024\016\u0140\036" +
    "\210\037\206\040\205\041\222\042\211\043\214\044\213" +
    "\045\220\001\002\000\024\016\u012f\036\210\037\206\040" +
    "\205\041\222\042\211\043\214\044\213\045\220\001\002" +
    "\000\024\036\210\037\206\040\205\041\222\042\211\043" +
    "\214\044\213\045\220\103\u011c\001\002\000\024\016\u010a" +
    "\036\210\037\206\040\205\041\222\042\211\043\214\044" +
    "\213\045\220\001\002\000\024\016\335\036\210\037\206" +
    "\040\205\041\222\042\211\043\214\044\213\045\220\001" +
    "\002\000\024\036\210\037\206\040\205\041\222\042\211" +
    "\043\214\044\213\045\220\072\322\001\002\000\030\016" +
    "\215\036\210\037\206\040\205\041\222\042\211\043\214" +
    "\044\213\045\220\066\216\070\221\001\002\000\004\011" +
    "\315\001\002\000\004\011\313\001\002\000\030\016\uff89" +
    "\036\uff89\037\uff89\040\uff89\041\uff89\042\uff89\043\uff89\044" +
    "\uff89\045\uff89\066\uff89\070\uff89\001\002\000\004\011\311" +
    "\001\002\000\004\011\307\001\002\000\030\016\uff88\036" +
    "\uff88\037\uff88\040\uff88\041\uff88\042\uff88\043\uff88\044\uff88" +
    "\045\uff88\066\uff88\070\uff88\001\002\000\004\011\305\001" +
    "\002\000\004\011\300\001\002\000\022\006\225\024\226" +
    "\026\224\105\230\106\231\107\232\110\233\111\234\001" +
    "\002\000\004\011\272\001\002\000\030\016\265\036\210" +
    "\037\206\040\205\041\222\042\211\043\214\044\213\045" +
    "\220\066\216\070\221\001\002\000\004\011\262\001\002" +
    "\000\004\011\260\001\002\000\004\011\223\001\002\000" +
    "\022\006\225\024\226\026\224\105\230\106\231\107\232" +
    "\110\233\111\234\001\002\000\004\104\252\001\002\000" +
    "\022\006\225\024\226\026\224\105\230\106\231\107\232" +
    "\110\233\111\234\001\002\000\022\006\225\024\226\026" +
    "\224\105\230\106\231\107\232\110\233\111\234\001\002" +
    "\000\046\004\237\005\241\006\236\007\235\010\240\016" +
    "\uff96\036\uff96\037\uff96\040\uff96\041\uff96\042\uff96\043\uff96" +
    "\044\uff96\045\uff96\066\uff96\070\uff96\072\uff96\103\uff96\001" +
    "\002\000\052\004\uff7b\005\uff7b\006\uff7b\007\uff7b\010\uff7b" +
    "\015\uff7b\016\uff7b\025\uff7b\036\uff7b\037\uff7b\040\uff7b\041" +
    "\uff7b\042\uff7b\043\uff7b\044\uff7b\045\uff7b\066\uff7b\070\uff7b" +
    "\072\uff7b\103\uff7b\001\002\000\052\004\uff7a\005\uff7a\006" +
    "\uff7a\007\uff7a\010\uff7a\015\uff7a\016\uff7a\025\uff7a\036\uff7a" +
    "\037\uff7a\040\uff7a\041\uff7a\042\uff7a\043\uff7a\044\uff7a\045" +
    "\uff7a\066\uff7a\070\uff7a\072\uff7a\103\uff7a\001\002\000\052" +
    "\004\uff7d\005\uff7d\006\uff7d\007\uff7d\010\uff7d\015\uff7d\016" +
    "\uff7d\025\uff7d\036\uff7d\037\uff7d\040\uff7d\041\uff7d\042\uff7d" +
    "\043\uff7d\044\uff7d\045\uff7d\066\uff7d\070\uff7d\072\uff7d\103" +
    "\uff7d\001\002\000\052\004\uff7c\005\uff7c\006\uff7c\007\uff7c" +
    "\010\uff7c\015\uff7c\016\uff7c\025\uff7c\036\uff7c\037\uff7c\040" +
    "\uff7c\041\uff7c\042\uff7c\043\uff7c\044\uff7c\045\uff7c\066\uff7c" +
    "\070\uff7c\072\uff7c\103\uff7c\001\002\000\052\004\uff79\005" +
    "\uff79\006\uff79\007\uff79\010\uff79\015\uff79\016\uff79\025\uff79" +
    "\036\uff79\037\uff79\040\uff79\041\uff79\042\uff79\043\uff79\044" +
    "\uff79\045\uff79\066\uff79\070\uff79\072\uff79\103\uff79\001\002" +
    "\000\022\006\225\024\226\026\224\105\230\106\231\107" +
    "\232\110\233\111\234\001\002\000\022\006\225\024\226" +
    "\026\224\105\230\106\231\107\232\110\233\111\234\001" +
    "\002\000\022\006\225\024\226\026\224\105\230\106\231" +
    "\107\232\110\233\111\234\001\002\000\022\006\225\024" +
    "\226\026\224\105\230\106\231\107\232\110\233\111\234" +
    "\001\002\000\022\006\225\024\226\026\224\105\230\106" +
    "\231\107\232\110\233\111\234\001\002\000\052\004\uff83" +
    "\005\uff83\006\uff83\007\uff83\010\240\015\uff83\016\uff83\025" +
    "\uff83\036\uff83\037\uff83\040\uff83\041\uff83\042\uff83\043\uff83" +
    "\044\uff83\045\uff83\066\uff83\070\uff83\072\uff83\103\uff83\001" +
    "\002\000\052\004\uff82\005\uff82\006\uff82\007\uff82\010\uff82" +
    "\015\uff82\016\uff82\025\uff82\036\uff82\037\uff82\040\uff82\041" +
    "\uff82\042\uff82\043\uff82\044\uff82\045\uff82\066\uff82\070\uff82" +
    "\072\uff82\103\uff82\001\002\000\052\004\uff81\005\uff81\006" +
    "\uff81\007\uff81\010\240\015\uff81\016\uff81\025\uff81\036\uff81" +
    "\037\uff81\040\uff81\041\uff81\042\uff81\043\uff81\044\uff81\045" +
    "\uff81\066\uff81\070\uff81\072\uff81\103\uff81\001\002\000\052" +
    "\004\237\005\241\006\uff84\007\uff84\010\240\015\uff84\016" +
    "\uff84\025\uff84\036\uff84\037\uff84\040\uff84\041\uff84\042\uff84" +
    "\043\uff84\044\uff84\045\uff84\066\uff84\070\uff84\072\uff84\103" +
    "\uff84\001\002\000\052\004\237\005\241\006\uff85\007\uff85" +
    "\010\240\015\uff85\016\uff85\025\uff85\036\uff85\037\uff85\040" +
    "\uff85\041\uff85\042\uff85\043\uff85\044\uff85\045\uff85\066\uff85" +
    "\070\uff85\072\uff85\103\uff85\001\002\000\016\004\237\005" +
    "\241\006\236\007\235\010\240\025\250\001\002\000\052" +
    "\004\uff7f\005\uff7f\006\uff7f\007\uff7f\010\uff7f\015\uff7f\016" +
    "\uff7f\025\uff7f\036\uff7f\037\uff7f\040\uff7f\041\uff7f\042\uff7f" +
    "\043\uff7f\044\uff7f\045\uff7f\066\uff7f\070\uff7f\072\uff7f\103" +
    "\uff7f\001\002\000\052\004\237\005\241\006\uff80\007\uff80" +
    "\010\240\015\uff80\016\uff80\025\uff80\036\uff80\037\uff80\040" +
    "\uff80\041\uff80\042\uff80\043\uff80\044\uff80\045\uff80\066\uff80" +
    "\070\uff80\072\uff80\103\uff80\001\002\000\006\027\253\030" +
    "\254\001\002\000\052\004\uff7e\005\uff7e\006\uff7e\007\uff7e" +
    "\010\uff7e\015\uff7e\016\uff7e\025\uff7e\036\uff7e\037\uff7e\040" +
    "\uff7e\041\uff7e\042\uff7e\043\uff7e\044\uff7e\045\uff7e\066\uff7e" +
    "\070\uff7e\072\uff7e\103\uff7e\001\002\000\024\006\020\013" +
    "\007\024\030\104\041\105\005\106\021\107\026\110\004" +
    "\111\016\001\002\000\040\004\050\005\056\006\046\007" +
    "\047\010\043\012\055\014\057\015\044\016\051\017\060" +
    "\020\045\021\053\022\052\023\054\031\256\001\002\000" +
    "\004\027\257\001\002\000\052\004\uff78\005\uff78\006\uff78" +
    "\007\uff78\010\uff78\015\uff78\016\uff78\025\uff78\036\uff78\037" +
    "\uff78\040\uff78\041\uff78\042\uff78\043\uff78\044\uff78\045\uff78" +
    "\066\uff78\070\uff78\072\uff78\103\uff78\001\002\000\022\006" +
    "\225\024\226\026\224\105\230\106\231\107\232\110\233" +
    "\111\234\001\002\000\042\004\237\005\241\006\236\007" +
    "\235\010\240\016\uff86\036\uff86\037\uff86\040\uff86\041\uff86" +
    "\042\uff86\043\uff86\044\uff86\045\uff86\066\uff86\070\uff86\001" +
    "\002\000\004\105\263\001\002\000\034\016\uff92\036\uff92" +
    "\037\uff92\040\uff92\041\uff92\042\uff92\043\uff92\044\uff92\045" +
    "\uff92\066\uff92\070\uff92\072\uff92\103\uff92\001\002\000\030" +
    "\016\uff8a\036\uff8a\037\uff8a\040\uff8a\041\uff8a\042\uff8a\043" +
    "\uff8a\044\uff8a\045\uff8a\066\uff8a\070\uff8a\001\002\000\022" +
    "\006\225\024\226\026\224\105\230\106\231\107\232\110" +
    "\233\111\234\001\002\000\016\004\237\005\241\006\236" +
    "\007\235\010\240\015\267\001\002\000\004\062\270\001" +
    "\002\000\004\016\271\001\002\000\006\015\uffb7\025\uffb7" +
    "\001\002\000\022\006\225\024\226\026\224\105\230\106" +
    "\231\107\232\110\233\111\234\001\002\000\042\004\237" +
    "\005\241\006\236\007\235\010\240\016\uff87\036\uff87\037" +
    "\uff87\040\uff87\041\uff87\042\uff87\043\uff87\044\uff87\045\uff87" +
    "\066\uff87\070\uff87\001\002\000\016\004\237\005\241\006" +
    "\236\007\235\010\240\015\275\001\002\000\004\062\276" +
    "\001\002\000\004\016\277\001\002\000\006\015\uffb6\025" +
    "\uffb6\001\002\000\010\102\303\104\304\105\301\001\002" +
    "\000\034\016\uff8d\036\uff8d\037\uff8d\040\uff8d\041\uff8d\042" +
    "\uff8d\043\uff8d\044\uff8d\045\uff8d\066\uff8d\070\uff8d\072\uff8d" +
    "\103\uff8d\001\002\000\034\016\uff94\036\uff94\037\uff94\040" +
    "\uff94\041\uff94\042\uff94\043\uff94\044\uff94\045\uff94\066\uff94" +
    "\070\uff94\072\uff94\103\uff94\001\002\000\034\016\uff8c\036" +
    "\uff8c\037\uff8c\040\uff8c\041\uff8c\042\uff8c\043\uff8c\044\uff8c" +
    "\045\uff8c\066\uff8c\070\uff8c\072\uff8c\103\uff8c\001\002\000" +
    "\034\016\uff8b\036\uff8b\037\uff8b\040\uff8b\041\uff8b\042\uff8b" +
    "\043\uff8b\044\uff8b\045\uff8b\066\uff8b\070\uff8b\072\uff8b\103" +
    "\uff8b\001\002\000\022\006\225\024\226\026\224\105\230" +
    "\106\231\107\232\110\233\111\234\001\002\000\046\004" +
    "\237\005\241\006\236\007\235\010\240\016\uff93\036\uff93" +
    "\037\uff93\040\uff93\041\uff93\042\uff93\043\uff93\044\uff93\045" +
    "\uff93\066\uff93\070\uff93\072\uff93\103\uff93\001\002\000\022" +
    "\006\225\024\226\026\224\105\230\106\231\107\232\110" +
    "\233\111\234\001\002\000\046\004\237\005\241\006\236" +
    "\007\235\010\240\016\uff95\036\uff95\037\uff95\040\uff95\041" +
    "\uff95\042\uff95\043\uff95\044\uff95\045\uff95\066\uff95\070\uff95" +
    "\072\uff95\103\uff95\001\002\000\004\104\312\001\002\000" +
    "\034\016\uff99\036\uff99\037\uff99\040\uff99\041\uff99\042\uff99" +
    "\043\uff99\044\uff99\045\uff99\066\uff99\070\uff99\072\uff99\103" +
    "\uff99\001\002\000\022\006\225\024\226\026\224\105\230" +
    "\106\231\107\232\110\233\111\234\001\002\000\046\004" +
    "\237\005\241\006\236\007\235\010\240\016\uff97\036\uff97" +
    "\037\uff97\040\uff97\041\uff97\042\uff97\043\uff97\044\uff97\045" +
    "\uff97\066\uff97\070\uff97\072\uff97\103\uff97\001\002\000\022" +
    "\006\225\024\226\026\224\105\230\106\231\107\232\110" +
    "\233\111\234\001\002\000\046\004\237\005\241\006\236" +
    "\007\235\010\240\016\uff98\036\uff98\037\uff98\040\uff98\041" +
    "\uff98\042\uff98\043\uff98\044\uff98\045\uff98\066\uff98\070\uff98" +
    "\072\uff98\103\uff98\001\002\000\026\016\326\036\210\037" +
    "\206\040\205\041\222\042\211\043\214\044\213\045\220" +
    "\072\330\001\002\000\026\016\uff75\036\uff75\037\uff75\040" +
    "\uff75\041\uff75\042\uff75\043\uff75\044\uff75\045\uff75\072\uff75" +
    "\001\002\000\026\016\uff76\036\uff76\037\uff76\040\uff76\041" +
    "\uff76\042\uff76\043\uff76\044\uff76\045\uff76\072\uff76\001\002" +
    "\000\004\011\323\001\002\000\022\006\225\024\226\026" +
    "\224\105\230\106\231\107\232\110\233\111\234\001\002" +
    "\000\040\004\237\005\241\006\236\007\235\010\240\016" +
    "\325\036\uff74\037\uff74\040\uff74\041\uff74\042\uff74\043\uff74" +
    "\044\uff74\045\uff74\072\uff74\001\002\000\006\015\uffb8\025" +
    "\uffb8\001\002\000\006\015\uffb9\025\uffb9\001\002\000\026" +
    "\016\uff77\036\uff77\037\uff77\040\uff77\041\uff77\042\uff77\043" +
    "\uff77\044\uff77\045\uff77\072\uff77\001\002\000\004\011\331" +
    "\001\002\000\022\006\225\024\226\026\224\105\230\106" +
    "\231\107\232\110\233\111\234\001\002\000\040\004\237" +
    "\005\241\006\236\007\235\010\240\016\uff74\036\uff74\037" +
    "\uff74\040\uff74\041\uff74\042\uff74\043\uff74\044\uff74\045\uff74" +
    "\072\uff74\001\002\000\024\016\u0103\036\210\037\206\040" +
    "\205\041\222\042\211\043\214\044\213\045\220\001\002" +
    "\000\024\016\uff9a\036\uff9a\037\uff9a\040\uff9a\041\uff9a\042" +
    "\uff9a\043\uff9a\044\uff9a\045\uff9a\001\002\000\004\015\337" +
    "\001\002\000\004\015\376\001\002\000\004\063\351\001" +
    "\002\000\004\015\342\001\002\000\004\015\uffb3\001\002" +
    "\000\004\065\343\001\002\000\004\016\344\001\002\000" +
    "\022\006\225\024\226\026\224\105\230\106\231\107\232" +
    "\110\233\111\234\001\002\000\016\004\237\005\241\006" +
    "\236\007\235\010\240\015\346\001\002\000\004\061\347" +
    "\001\002\000\004\016\350\001\002\000\004\015\uffb0\001" +
    "\002\000\004\016\352\001\002\000\004\015\355\001\002" +
    "\000\004\015\uffae\001\002\000\004\015\372\001\002\000" +
    "\004\064\356\001\002\000\004\016\357\001\002\000\010" +
    "\026\362\105\361\112\360\001\002\000\004\015\uffa2\001" +
    "\002\000\004\015\uffa0\001\002\000\004\104\367\001\002" +
    "\000\004\015\364\001\002\000\004\056\365\001\002\000" +
    "\004\016\366\001\002\000\004\015\uffad\001\002\000\004" +
    "\027\370\001\002\000\004\015\uffa1\001\002\000\004\015" +
    "\uffaf\001\002\000\006\005\373\064\356\001\002\000\004" +
    "\063\374\001\002\000\004\016\375\001\002\000\004\015" +
    "\uffb1\001\002\000\004\005\377\001\002\000\004\054\u0100" +
    "\001\002\000\004\016\u0101\001\002\000\006\015\uffb4\025" +
    "\uffb4\001\002\000\024\016\uff9b\036\uff9b\037\uff9b\040\uff9b" +
    "\041\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b\001\002\000" +
    "\004\015\337\001\002\000\004\015\u0105\001\002\000\004" +
    "\005\u0106\001\002\000\004\054\u0107\001\002\000\004\016" +
    "\u0108\001\002\000\006\015\uffb5\025\uffb5\001\002\000\024" +
    "\016\u0112\036\210\037\206\040\205\041\222\042\211\043" +
    "\214\044\213\045\220\001\002\000\012\015\u010b\026\362" +
    "\105\361\112\360\001\002\000\004\055\u0110\001\002\000" +
    "\004\015\u010d\001\002\000\004\055\u010e\001\002\000\004" +
    "\016\u010f\001\002\000\006\015\uffa3\025\uffa3\001\002\000" +
    "\004\016\u0111\001\002\000\006\015\uffa4\025\uffa4\001\002" +
    "\000\012\015\u0113\026\362\105\361\112\360\001\002\000" +
    "\004\055\u0118\001\002\000\004\015\u0115\001\002\000\004" +
    "\055\u0116\001\002\000\004\016\u0117\001\002\000\006\015" +
    "\uffa5\025\uffa5\001\002\000\004\016\u0119\001\002\000\006" +
    "\015\uffa6\025\uffa6\001\002\000\026\016\u0125\036\210\037" +
    "\206\040\205\041\222\042\211\043\214\044\213\045\220" +
    "\103\u0126\001\002\000\026\016\uff8f\036\uff8f\037\uff8f\040" +
    "\uff8f\041\uff8f\042\uff8f\043\uff8f\044\uff8f\045\uff8f\103\uff8f" +
    "\001\002\000\004\011\u011e\001\002\000\026\016\uff90\036" +
    "\uff90\037\uff90\040\uff90\041\uff90\042\uff90\043\uff90\044\uff90" +
    "\045\uff90\103\uff90\001\002\000\022\006\225\024\226\026" +
    "\224\105\230\106\231\107\232\110\233\111\234\001\002" +
    "\000\040\004\237\005\241\006\236\007\235\010\240\016" +
    "\u0120\036\uff8e\037\uff8e\040\uff8e\041\uff8e\042\uff8e\043\uff8e" +
    "\044\uff8e\045\uff8e\103\uff8e\001\002\000\010\026\362\105" +
    "\361\112\360\001\002\000\004\015\u0122\001\002\000\004" +
    "\060\u0123\001\002\000\004\016\u0124\001\002\000\006\015" +
    "\uffab\025\uffab\001\002\000\010\026\362\105\361\112\360" +
    "\001\002\000\004\011\u0128\001\002\000\026\016\uff91\036" +
    "\uff91\037\uff91\040\uff91\041\uff91\042\uff91\043\uff91\044\uff91" +
    "\045\uff91\103\uff91\001\002\000\022\006\225\024\226\026" +
    "\224\105\230\106\231\107\232\110\233\111\234\001\002" +
    "\000\040\004\237\005\241\006\236\007\235\010\240\016" +
    "\uff8e\036\uff8e\037\uff8e\040\uff8e\041\uff8e\042\uff8e\043\uff8e" +
    "\044\uff8e\045\uff8e\103\uff8e\001\002\000\004\015\u012b\001" +
    "\002\000\004\060\u012c\001\002\000\004\016\u012d\001\002" +
    "\000\006\015\uffac\025\uffac\001\002\000\024\016\u0137\036" +
    "\210\037\206\040\205\041\222\042\211\043\214\044\213" +
    "\045\220\001\002\000\012\015\u0130\026\362\105\361\112" +
    "\360\001\002\000\004\057\u0135\001\002\000\004\015\u0132" +
    "\001\002\000\004\057\u0133\001\002\000\004\016\u0134\001" +
    "\002\000\006\015\uffa7\025\uffa7\001\002\000\004\016\u0136" +
    "\001\002\000\006\015\uffa8\025\uffa8\001\002\000\012\015" +
    "\u0138\026\362\105\361\112\360\001\002\000\004\057\u013d" +
    "\001\002\000\004\015\u013a\001\002\000\004\057\u013b\001" +
    "\002\000\004\016\u013c\001\002\000\006\015\uffa9\025\uffa9" +
    "\001\002\000\004\016\u013e\001\002\000\006\015\uffaa\025" +
    "\uffaa\001\002\000\024\016\u014a\036\210\037\206\040\205" +
    "\041\222\042\211\043\214\044\213\045\220\001\002\000" +
    "\004\015\u0141\001\002\000\022\005\u0147\050\176\051\201" +
    "\052\177\053\200\054\202\067\204\071\203\001\002\000" +
    "\004\015\u0143\001\002\000\022\005\u0144\050\176\051\201" +
    "\052\177\053\200\054\202\067\204\071\203\001\002\000" +
    "\004\050\u0145\001\002\000\004\016\u0146\001\002\000\006" +
    "\015\uff9e\025\uff9e\001\002\000\004\050\u0148\001\002\000" +
    "\004\016\u0149\001\002\000\006\015\uff9c\025\uff9c\001\002" +
    "\000\004\015\u014b\001\002\000\022\005\u0151\050\176\051" +
    "\201\052\177\053\200\054\202\067\204\071\203\001\002" +
    "\000\004\015\u014d\001\002\000\022\005\u014e\050\176\051" +
    "\201\052\177\053\200\054\202\067\204\071\203\001\002" +
    "\000\004\050\u014f\001\002\000\004\016\u0150\001\002\000" +
    "\006\015\uff9f\025\uff9f\001\002\000\004\050\u0152\001\002" +
    "\000\004\016\u0153\001\002\000\006\015\uff9d\025\uff9d\001" +
    "\002\000\044\002\uffc5\006\uffc5\013\uffc5\024\uffc5\027\uffc5" +
    "\034\uffc5\035\uffc5\075\uffc5\077\uffc5\100\uffc5\101\uffc5\104" +
    "\uffc5\105\uffc5\106\uffc5\107\uffc5\110\uffc5\111\uffc5\001\002" +
    "\000\106\002\uffeb\004\050\005\056\006\uffeb\007\uffeb\010" +
    "\043\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb" +
    "\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\027" +
    "\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\075\uffeb" +
    "\077\uffeb\100\uffeb\101\uffeb\104\uffeb\105\uffeb\106\uffeb\107" +
    "\uffeb\110\uffeb\111\uffeb\001\002\000\024\006\020\013\007" +
    "\024\030\104\041\105\005\106\021\107\026\110\004\111" +
    "\016\001\002\000\040\004\050\005\056\006\046\007\047" +
    "\010\043\012\055\014\057\015\044\016\051\017\060\020" +
    "\045\021\053\022\052\023\054\025\u0158\001\002\000\004" +
    "\026\u0159\001\002\000\042\006\020\013\007\024\030\027" +
    "\u015b\034\027\035\022\075\032\077\006\100\011\101\013" +
    "\104\035\105\005\106\021\107\026\110\004\111\016\001" +
    "\002\000\042\006\020\013\007\024\030\027\u015c\034\027" +
    "\035\022\075\032\077\006\100\011\101\013\104\035\105" +
    "\005\106\021\107\026\110\004\111\016\001\002\000\044" +
    "\002\uffc9\006\uffc9\013\uffc9\024\uffc9\027\uffc9\034\uffc9\035" +
    "\uffc9\075\uffc9\077\uffc9\100\uffc9\101\uffc9\104\uffc9\105\uffc9" +
    "\106\uffc9\107\uffc9\110\uffc9\111\uffc9\001\002\000\044\002" +
    "\uffc8\006\uffc8\013\uffc8\024\uffc8\027\uffc8\034\uffc8\035\uffc8" +
    "\075\uffc8\077\uffc8\100\uffc8\101\uffc8\104\uffc8\105\uffc8\106" +
    "\uffc8\107\uffc8\110\uffc8\111\uffc8\001\002\000\024\006\020" +
    "\013\007\024\030\104\041\105\005\106\021\107\026\110" +
    "\004\111\016\001\002\000\040\004\050\005\056\006\046" +
    "\007\047\010\043\012\055\014\057\015\044\016\051\017" +
    "\060\020\045\021\053\022\052\023\054\025\u015f\001\002" +
    "\000\004\032\u0160\001\002\000\044\002\uffca\006\uffca\013" +
    "\uffca\024\uffca\027\uffca\034\uffca\035\uffca\075\uffca\077\uffca" +
    "\100\uffca\101\uffca\104\uffca\105\uffca\106\uffca\107\uffca\110" +
    "\uffca\111\uffca\001\002\000\106\002\uffe9\004\050\005\056" +
    "\006\046\007\047\010\043\012\uffe9\013\uffe9\014\uffe9\015" +
    "\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9" +
    "\024\uffe9\025\uffe9\027\uffe9\031\uffe9\032\uffe9\033\uffe9\034" +
    "\uffe9\035\uffe9\075\uffe9\077\uffe9\100\uffe9\101\uffe9\104\uffe9" +
    "\105\uffe9\106\uffe9\107\uffe9\110\uffe9\111\uffe9\001\002\000" +
    "\024\006\020\013\007\024\030\104\041\105\005\106\021" +
    "\107\026\110\004\111\016\001\002\000\040\004\050\005" +
    "\056\006\046\007\047\010\043\012\055\014\057\015\044" +
    "\016\051\017\060\020\045\021\053\022\052\023\054\025" +
    "\u0164\001\002\000\004\026\u0165\001\002\000\042\006\020" +
    "\013\007\024\030\027\u0167\034\027\035\022\075\032\077" +
    "\006\100\011\101\013\104\035\105\005\106\021\107\026" +
    "\110\004\111\016\001\002\000\042\006\020\013\007\024" +
    "\030\027\u0168\034\027\035\022\075\032\077\006\100\011" +
    "\101\013\104\035\105\005\106\021\107\026\110\004\111" +
    "\016\001\002\000\044\002\uffc7\006\uffc7\013\uffc7\024\uffc7" +
    "\027\uffc7\034\uffc7\035\uffc7\075\uffc7\077\uffc7\100\uffc7\101" +
    "\uffc7\104\uffc7\105\uffc7\106\uffc7\107\uffc7\110\uffc7\111\uffc7" +
    "\001\002\000\044\002\uffc6\006\uffc6\013\uffc6\024\uffc6\027" +
    "\uffc6\034\uffc6\035\uffc6\075\uffc6\077\uffc6\100\uffc6\101\uffc6" +
    "\104\uffc6\105\uffc6\106\uffc6\107\uffc6\110\uffc6\111\uffc6\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0166\000\032\002\033\003\007\006\023\010\022\011" +
    "\013\012\035\014\011\015\032\016\014\017\030\020\024" +
    "\021\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\u0160\012\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\003\007\006\023\010" +
    "\022\011\013\012\035\015\117\016\014\017\030\020\024" +
    "\021\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\u0154\012\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\124\005\126\001\001\000" +
    "\006\010\122\012\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\077\012\035\001\001" +
    "\000\006\010\041\012\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\076\012\035\001\001\000\006" +
    "\010\075\012\035\001\001\000\006\010\074\012\035\001" +
    "\001\000\006\010\073\012\035\001\001\000\006\010\072" +
    "\012\035\001\001\000\006\010\071\012\035\001\001\000" +
    "\006\010\070\012\035\001\001\000\006\010\067\012\035" +
    "\001\001\000\006\010\066\012\035\001\001\000\006\010" +
    "\065\012\035\001\001\000\006\010\064\012\035\001\001" +
    "\000\006\010\063\012\035\001\001\000\006\010\062\012" +
    "\035\001\001\000\006\010\061\012\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\103\012\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\003\007\006" +
    "\023\010\022\011\013\012\035\014\106\015\032\016\014" +
    "\017\030\020\024\021\016\001\001\000\026\003\007\006" +
    "\023\010\022\011\013\012\035\015\117\016\014\017\030" +
    "\020\024\021\016\001\001\000\004\007\111\001\001\000" +
    "\004\006\113\001\001\000\002\001\001\000\030\003\007" +
    "\006\023\010\022\011\013\012\035\014\114\015\032\016" +
    "\014\017\030\020\024\021\016\001\001\000\002\001\001" +
    "\000\026\003\007\006\023\010\022\011\013\012\035\015" +
    "\117\016\014\017\030\020\024\021\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\121\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\136\012\035\001\001\000\006\010\131" +
    "\012\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\134\012\035\001\001\000\002\001\001\000\010" +
    "\010\140\012\035\013\137\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\143\012\035\001\001\000\002\001\001\000\004\005" +
    "\146\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\153\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\023\167\024\163\025\164\026\165\027\166\030\160\031" +
    "\162\032\161\033\170\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\024\172\025\164\026\165\027" +
    "\166\030\160\031\162\032\161\033\170\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\034\u013e\035\333\001\001" +
    "\000\006\034\u012d\035\333\001\001\000\010\035\u011a\041" +
    "\u0119\042\u011c\001\001\000\006\034\u0108\035\333\001\001" +
    "\000\006\034\332\035\333\001\001\000\010\035\317\052" +
    "\316\053\320\001\001\000\010\035\211\043\206\051\216" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\036\273\001" +
    "\001\000\002\001\001\000\006\035\211\043\263\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\036\226\001\001\000\002\001\001\000\004\036\250" +
    "\001\001\000\004\036\246\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\036\245\001\001\000" +
    "\004\036\244\001\001\000\004\036\243\001\001\000\004" +
    "\036\242\001\001\000\004\036\241\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\254\012\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\036\260\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\036\265\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\036" +
    "\272\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\037" +
    "\301\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\036\305\001\001\000" +
    "\002\001\001\000\004\036\307\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\036\313\001" +
    "\001\000\002\001\001\000\004\036\315\001\001\000\002" +
    "\001\001\000\006\035\317\053\326\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\323" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\331" +
    "\001\001\000\002\001\001\000\004\035\u0101\001\001\000" +
    "\002\001\001\000\006\044\335\045\337\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\046\340\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\036\344\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\047\352\050\353\001\001\000\002\001\001\000\004\047" +
    "\370\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\040\362\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\044\u0103\045\337\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\u0101\001\001\000\004\040" +
    "\u010b\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\040\u0113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\035\u011a\042\u0126\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\036\u011e\001\001" +
    "\000\002\001\001\000\004\040\u0120\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\u0129\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\036\u0128\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\035\u0101\001\001\000\004\040\u0130\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\040\u0138\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\u0101\001\001\000\024\023\u0141\024\163\025\164\026\165" +
    "\027\166\030\160\031\162\032\161\033\170\001\001\000" +
    "\002\001\001\000\022\024\172\025\164\026\165\027\166" +
    "\030\160\031\162\032\161\033\170\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\023\u014b\024\163\025\164\026\165\027\166\030\160" +
    "\031\162\032\161\033\170\001\001\000\002\001\001\000" +
    "\022\024\172\025\164\026\165\027\166\030\160\031\162" +
    "\032\161\033\170\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\u0156\012\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\007\006\023\010" +
    "\022\011\013\012\035\014\u0159\015\032\016\014\017\030" +
    "\020\024\021\016\001\001\000\026\003\007\006\023\010" +
    "\022\011\013\012\035\015\117\016\014\017\030\020\024" +
    "\021\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\u015d\012\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\u0162\012\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\003\007\006\023\010\022\011\013\012\035\014" +
    "\u0165\015\032\016\014\017\030\020\024\021\016\001\001" +
    "\000\026\003\007\006\023\010\022\011\013\012\035\015" +
    "\117\016\014\017\030\020\024\021\016\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analisis_Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analisis_Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analisis_Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Arbol variables = new Arbol();
    public Cola TodosLosErrores = new Cola();
    public NodoSintactico padre;
    public int contador = 1;
    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s){
        System.out.print("ERROR SINTACTICO ");
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        System.out.print(lexema + " fila: " + fila + " columna: " + columna + "\n");
        Errores error = new Errores(lexema,fila,columna,"Token " + lexema + " No esperado", "Sintactico");
        TodosLosErrores.insertar(error);
    }

    //Metodo al que se llama en el momento en el que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s){

    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analisis_Sintactico$actions {


    

  private final Analisis_Sintactico parser;

  /** Constructor */
  CUP$Analisis_Sintactico$actions(Analisis_Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analisis_Sintactico$do_action_part00000000(
    int                        CUP$Analisis_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analisis_Sintactico$parser,
    java.util.Stack            CUP$Analisis_Sintactico$stack,
    int                        CUP$Analisis_Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analisis_Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Analisis_Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analisis_Sintactico$parser.done_parsing();
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              Object RESULT =null;
		int inicioleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int inicioright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico inicio = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("INICIO", inicioleft, inicioright);
    tmp.setNumNodo(contador++);
    tmp.addHijo(inicio);
    padre = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES OPCIONES 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("OPCIONES", bleft, bright);
    tmp.setNumNodo(contador++);
    tmp.addHijo(a);
    tmp.addHijo(b);
    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= OPCIONES 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("OPCION", aleft, aright);
    tmp.setNumNodo(contador++);
    tmp.addHijo(a);
    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // OPCIONES ::= DECLARACION 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPCIONES",11, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // OPCIONES ::= E 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("E", aleft, aright);
    tmp.setNumNodo(contador++);
    tmp.addHijo(a);
    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPCIONES",11, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // OPCIONES ::= FUNCIONES 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("FUNCION", aleft, aright);
    tmp.setNumNodo(contador++);
    tmp.addHijo(a);
    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPCIONES",11, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // OPCIONES ::= COMPONENTE 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPCIONES",11, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARACION ::= var ASIGNACION puntoComa 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARACION ::= identificador igual E puntoComa 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
    NodoSintactico identificador = new NodoSintactico("ID", aleft, aright);
    identificador.setValor(a);
    identificador.setNumNodo(contador++);

    NodoSintactico tmp = new NodoSintactico("REASIGNACION", aleft, aright);
    tmp.addHijo(identificador);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);
    
    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ASIGNACION ::= ASIGNACION coma IDENT 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("ASIGNACIONES", bleft, bright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ASIGNACION ::= IDENT 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // IDENT ::= identificador igual E 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico identificador = new NodoSintactico("ID", aleft, aright);
    identificador.setValor(a);
    identificador.setNumNodo(contador++);

    NodoSintactico tmp = new NodoSintactico("SDA", bleft, bright);
    tmp.addHijo(identificador);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("IDENT",3, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IDENT ::= identificador igual llaveA LISTAEXP llaveC 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
    NodoSintactico identificador = new NodoSintactico("ID", aleft, aright);
    identificador.setValor(a);
    identificador.setNumNodo(contador++);

    NodoSintactico tmp = new NodoSintactico("ADA", aleft, aright);
    tmp.addHijo(identificador);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("IDENT",3, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IDENT ::= identificador corcheteA E corcheteC igual E 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico c = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico identificador = new NodoSintactico("ID", aleft, aright);
    identificador.setValor(a);
    identificador.setNumNodo(contador++);

    NodoSintactico tmp = new NodoSintactico("ADA", aleft, aright);
    tmp.addHijo(identificador);
    tmp.addHijo(b);
    tmp.addHijo(c);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("IDENT",3, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IDENT ::= identificador corcheteA E corcheteC 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
    NodoSintactico identificador = new NodoSintactico("ID", aleft, aright);
    identificador.setValor(a);
    identificador.setNumNodo(contador++);

    NodoSintactico tmp = new NodoSintactico("AD", aleft, aright);
    tmp.addHijo(identificador);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("IDENT",3, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IDENT ::= identificador 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico identificador = new NodoSintactico("ID", aleft, aright);
    identificador.setValor(a);
    identificador.setNumNodo(contador++);

    NodoSintactico tmp = new NodoSintactico("SD", aleft, aright);
    tmp.addHijo(identificador);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("IDENT",3, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // E ::= E suma E 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("+", cleft, cright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // E ::= E resta E 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("-", cleft, cright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // E ::= E division E 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("/", cleft, cright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // E ::= E potencia E 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("pow", cleft, cright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // E ::= E multiplicacion E 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("*", cleft, cright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // E ::= resta E 
            {
              NodoSintactico RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("NEGATIVO", cleft, cright);
    tmp.addHijo(a);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // E ::= parentesisA E parentesisC 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // E ::= not E 
            {
              NodoSintactico RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("!", cleft, cright);
    tmp.addHijo(a);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // E ::= E diferente E 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("!=", cleft, cright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // E ::= E igualigual E 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("==", cleft, cright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // E ::= E menorQue E 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("<", cleft, cright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // E ::= E mayorQue E 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico(">", cleft, cright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // E ::= E menorIgual E 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("<=", cleft, cright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // E ::= E mayorIgual E 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico(">=", cleft, cright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // E ::= E logicoAND E 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("&&", cleft, cright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // E ::= E logicoOR E 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("||", cleft, cright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // E ::= E logicoXOR E 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("^", cleft, cright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // E ::= DATO 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LISTAEXP ::= LISTAEXP coma E 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    a.addHijo(b);
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAEXP",9, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LISTAEXP ::= E 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico entero = new NodoSintactico("DATARR", aleft, aright);
    entero.setNumNodo(contador++);
    entero.addHijo(a);
    RESULT = entero;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAEXP",9, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DATO ::= entero 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico entero = new NodoSintactico("ENTERO", aleft, aright);
    int numero = Integer.parseInt(a);
    entero.setValor(numero);
    entero.setNumNodo(contador++);

    RESULT = entero;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DATO",8, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DATO ::= doble 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico doble = new NodoSintactico("DOBLE", aleft, aright);
    double numero = Double.valueOf(a);
    doble.setValor(numero);
    doble.setNumNodo(contador++);

    RESULT = doble;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DATO",8, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DATO ::= cadena 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico cadena = new NodoSintactico("CADENA", aleft, aright);
    a = a.replace("\"","");
    cadena.setValor(a);
    cadena.setNumNodo(contador++);

    RESULT = cadena;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DATO",8, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DATO ::= caracter 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico caracter = new NodoSintactico("CARACTER", aleft, aright);
    char carac = a.charAt(1);
    caracter.setValor(carac);
    caracter.setNumNodo(contador++);

    RESULT = caracter;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DATO",8, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DATO ::= booleano 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico booleano = new NodoSintactico("BOOLEANO", aleft, aright);
    boolean valor = true;
    a = a.toLowerCase();
    if(a.equals("false")){
        valor = false;
    }
    booleano.setValor(valor);
    booleano.setNumNodo(contador++);

    RESULT = booleano;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DATO",8, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DATO ::= identificador 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico identificador = new NodoSintactico("ID", aleft, aright);
    identificador.setValor(a);
    identificador.setNumNodo(contador++);

    RESULT = identificador;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DATO",8, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DATO ::= identificador corcheteA E corcheteC 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
    NodoSintactico identificador = new NodoSintactico("ID", aleft, aright);
    identificador.setValor(a);
    identificador.addHijo(b);
    identificador.setNumNodo(contador++);

    RESULT = identificador;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DATO",8, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FUNCIONES ::= SI 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",7, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FUNCIONES ::= IMPRIMIR 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",7, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FUNCIONES ::= MIENTRAS 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",7, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FUNCIONES ::= REPETIR 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",7, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SI ::= si parentesisA E parentesisC llaveA llaveC 
            {
              NodoSintactico RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		
    NodoSintactico tmp = new NodoSintactico("SI", bleft, bright);
    tmp.addHijo(a);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SI",4, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SI ::= si parentesisA E parentesisC llaveA llaveC SINO 
            {
              NodoSintactico RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("SI-SINO", cleft, cright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SI",4, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SI ::= si parentesisA E parentesisC llaveA INSTRUCCIONES llaveC 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
    NodoSintactico tmp = new NodoSintactico("SI", aleft, aright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SI",4, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SI ::= si parentesisA E parentesisC llaveA INSTRUCCIONES llaveC SINO 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico c = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("SI-SINO", aleft, aright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.addHijo(c);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SI",4, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SINO ::= sino SI 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("SINO-SI", aleft, aright);
    tmp.addHijo(a);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SINO",5, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SINO ::= sino llaveA llaveC 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		
    NodoSintactico tmp = new NodoSintactico("SINO", aleft, aright);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SINO",5, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SINO ::= sino llaveA INSTRUCCIONES llaveC 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
    NodoSintactico tmp = new NodoSintactico("SINO", aleft, aright);
    tmp.addHijo(a);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SINO",5, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // IMPRIMIR ::= imprimir parentesisA E parentesisC puntoComa 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		
    NodoSintactico tmp = new NodoSintactico("IMPRIMIR", aleft, aright);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // MIENTRAS ::= mientras parentesisA E parentesisC llaveA llaveC 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		
    NodoSintactico tmp = new NodoSintactico("MIENTRAS", aleft, aright);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("MIENTRAS",13, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // MIENTRAS ::= mientras parentesisA E parentesisC llaveA INSTRUCCIONES llaveC 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico c = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
    NodoSintactico tmp = new NodoSintactico("MIENTRAS", aleft, aright);
    tmp.addHijo(b);
    tmp.addHijo(c);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("MIENTRAS",13, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // REPETIR ::= repetir parentesisA E parentesisC llaveA llaveC 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		
    NodoSintactico tmp = new NodoSintactico("REPETIR", aleft, aright);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("REPETIR",14, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // REPETIR ::= repetir parentesisA E parentesisC llaveA INSTRUCCIONES llaveC 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico c = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
    NodoSintactico tmp = new NodoSintactico("REPETIR", aleft, aright);
    tmp.addHijo(b);
    tmp.addHijo(c);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("REPETIR",14, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // COMPONENTE ::= component identificador parentesisA parentesisC llaveA RETORNO llaveC 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
    NodoSintactico nombre = new NodoSintactico("NOMBRE_COMPONENTE", aleft, aright);
    nombre.setValor(a);
    nombre.setNumNodo(contador++);

    NodoSintactico tmp = new NodoSintactico("COMPONENTE", aleft, aright);
    tmp.setNumNodo(contador++);
    tmp.addHijo(nombre);
    tmp.addHijo(b);
    
    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("COMPONENTE",15, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // RETORNO ::= retorno parentesisA COMPONENTES parentesisC puntoComa 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		
    NodoSintactico tmp = new NodoSintactico("RETORNO", aleft, aright);
    tmp.setNumNodo(contador++);
    tmp.addHijo(b);
    
    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("RETORNO",16, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // RETORNO ::= retorno parentesisA parentesisC puntoComa 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		
    NodoSintactico tmp = new NodoSintactico("RETORNO", aleft, aright);
    tmp.setNumNodo(contador++);
    
    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("RETORNO",16, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // COMPONENTES ::= COMPONENTES OPCOMPONENTES 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    a.addHijo(b);
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("COMPONENTES",17, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // COMPONENTES ::= OPCOMPONENTES 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("ELEMENTOS", aleft, aright);
    tmp.setNumNodo(contador++);
    tmp.addHijo(a);
    
    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("COMPONENTES",17, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPCOMPONENTES ::= PANEL 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPCOMPONENTES",18, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPCOMPONENTES ::= TEXT 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPCOMPONENTES",18, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPCOMPONENTES ::= TEXTFIELD 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPCOMPONENTES",18, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPCOMPONENTES ::= BUTTON 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPCOMPONENTES",18, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPCOMPONENTES ::= LIST 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPCOMPONENTES",18, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPCOMPONENTES ::= SPINNER 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPCOMPONENTES",18, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPCOMPONENTES ::= IMAGE 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPCOMPONENTES",18, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // IMAGE ::= menorQue image ATRIBUTOS_IM mayorQue 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
    NodoSintactico imagen = new NodoSintactico("IMAGEN", aleft, aright);
    imagen.setNumNodo(contador++);

    imagen.addHijo(b);

    RESULT = imagen;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("IMAGE",25, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // IMAGE ::= menorQue image fuente igual ARITM mayorQue 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico c = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
    NodoSintactico imagen = new NodoSintactico("IMAGEN", aleft, aright);
    imagen.setNumNodo(contador++);

    NodoSintactico fuente = new NodoSintactico("AT_FUENTE", bleft, bright);
    fuente.setNumNodo(contador++);

    NodoSintactico aritm = new NodoSintactico("ARITM", bleft, bright);
    aritm.addHijo(c);
    aritm.setNumNodo(contador++);

    fuente.addHijo(aritm);

    imagen.addHijo(fuente);

    RESULT = imagen;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("IMAGE",25, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SPINNER ::= menorQue spinner ATRIBUTOS_SP mayorQue ARITM menorQue fspinner mayorQue 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		NodoSintactico c = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		
    NodoSintactico spinner = new NodoSintactico("SPINNER", aleft, aright);
    spinner.setNumNodo(contador++);

    NodoSintactico aritm = new NodoSintactico("ARITM", cleft, cright);
    aritm.setNumNodo(contador++);
    aritm.addHijo(c);

    spinner.addHijo(b);
    spinner.addHijo(c);

    RESULT = spinner;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SPINNER",24, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SPINNER ::= menorQue spinner mayorQue ARITM menorQue fspinner mayorQue 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		
    NodoSintactico spinner = new NodoSintactico("SPINNER", aleft, aright);
    spinner.setNumNodo(contador++);

    NodoSintactico aritm = new NodoSintactico("ARITM", bleft, bright);
    aritm.setNumNodo(contador++);
    aritm.addHijo(b);

    spinner.addHijo(b);

    RESULT = spinner;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SPINNER",24, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // LIST ::= menorQue list ATRIBUTOS mayorQue OPCIONESLISTA menorQue division list mayorQue 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoSintactico c = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		
    NodoSintactico items = new NodoSintactico("LISTA", aleft, aright);
    items.addHijo(b);
    items.addHijo(c);
    items.setNumNodo(contador++);

    RESULT = items;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LIST",23, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LIST ::= menorQue list mayorQue OPCIONESLISTA menorQue division list mayorQue 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		
    NodoSintactico items = new NodoSintactico("LISTA", aleft, aright);
    items.addHijo(b);
    items.setNumNodo(contador++);

    RESULT = items;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LIST",23, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPCIONESLISTA ::= ELEMENTS DEFAULT 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico items = new NodoSintactico("OPCIONESLISTA", aleft, aright);
    items.addHijo(a);
    items.addHijo(b);
    items.setNumNodo(contador++);

    RESULT = items;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPCIONESLISTA",34, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPCIONESLISTA ::= ELEMENTS 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico items = new NodoSintactico("OPCIONESLISTA", aleft, aright);
    items.addHijo(a);
    items.setNumNodo(contador++);

    RESULT = items;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPCIONESLISTA",34, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ELEMENTS ::= menorQue element mayorQue ITEMS menorQue division element mayorQue 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		
    NodoSintactico items = new NodoSintactico("ELEMENTOS", aleft, aright);
    items.addHijo(b);
    items.setNumNodo(contador++);

    RESULT = items;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ELEMENTS",35, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DEFAULT ::= menorQue defecto mayorQue ARITM menorQue fdefecto mayorQue 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		
    NodoSintactico numero = new NodoSintactico("ARITM", bleft, bright);
    numero.addHijo(b);
    numero.setNumNodo(contador++);

    NodoSintactico defecto = new NodoSintactico("DEFECTO", aleft, aright);
    defecto.addHijo(numero);
    defecto.setNumNodo(contador++);

    RESULT = defecto;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DEFAULT",36, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ITEMS ::= ITEMS ITEM 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    a.addHijo(b);
    
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ITEMS",38, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ITEMS ::= ITEM 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico nuevo = new NodoSintactico("ITEMS", aleft, aright);
    nuevo.setNumNodo(contador++);
    nuevo.addHijo(a);

    RESULT = nuevo;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ITEMS",38, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ITEM ::= menorQue items mayorQue IDTEXT menorQue fitem mayorQue 
            {
              NodoSintactico RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		NodoSintactico c = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		
    RESULT = c;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ITEM",37, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // BUTTON ::= menorQue button ATRIBUTOSB mayorQue IDTEXT menorQue fbutton mayorQue 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		NodoSintactico c = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		
    NodoSintactico button = new NodoSintactico("BUTTON", aleft, aright);
    button.addHijo(b);
    button.addHijo(c);
    button.setNumNodo(contador++);
    
    RESULT = button;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("BUTTON",22, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // BUTTON ::= menorQue button onClick igual ARITM mayorQue IDTEXT menorQue fbutton mayorQue 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		NodoSintactico c = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		
    NodoSintactico aritm = new NodoSintactico("ARITM", aleft, aright);
    aritm.addHijo(b);
    aritm.setNumNodo(contador++);
    
    NodoSintactico atributos = new NodoSintactico("ATRIBUTOS", aleft, aright);
    atributos.addHijo(aritm);
    atributos.setNumNodo(contador++);

    NodoSintactico button = new NodoSintactico("BUTTON", aleft, aright);
    button.addHijo(atributos);
    button.addHijo(c);
    button.setNumNodo(contador++);
    
    RESULT = button;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("BUTTON",22, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // TEXTFIELD ::= menorQue textField ATRIBUTOS mayorQue menorQue ftextField mayorQue 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		
    NodoSintactico nuevo = new NodoSintactico("TEXTFIELD", aleft, aright);
    nuevo.addHijo(b);
    nuevo.setNumNodo(contador++);

    RESULT = nuevo;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("TEXTFIELD",21, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // TEXTFIELD ::= menorQue textField ATRIBUTOS mayorQue IDTEXT menorQue ftextField mayorQue 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		NodoSintactico c = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		
    NodoSintactico nuevo = new NodoSintactico("TEXTFIELD", aleft, aright);
    nuevo.addHijo(b);
    nuevo.addHijo(c);
    nuevo.setNumNodo(contador++);

    RESULT = nuevo;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("TEXTFIELD",21, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TEXTFIELD ::= menorQue textField mayorQue menorQue ftextField mayorQue 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		
    NodoSintactico nuevo = new NodoSintactico("TEXTFIELD", aleft, aright);
    nuevo.setNumNodo(contador++);

    RESULT = nuevo;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("TEXTFIELD",21, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // TEXTFIELD ::= menorQue textField mayorQue IDTEXT menorQue ftextField mayorQue 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		
    NodoSintactico nuevo = new NodoSintactico("TEXTFIELD", aleft, aright);
    nuevo.addHijo(b);
    nuevo.setNumNodo(contador++);

    RESULT = nuevo;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("TEXTFIELD",21, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // TEXT ::= menorQue textt ATRIBUTOS mayorQue menorQue ftext mayorQue 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		
    NodoSintactico nuevo = new NodoSintactico("TEXT", aleft, aright);
    nuevo.addHijo(b);
    nuevo.setNumNodo(contador++);

    RESULT = nuevo;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("TEXT",20, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // TEXT ::= menorQue textt ATRIBUTOS mayorQue IDTEXT menorQue ftext mayorQue 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		NodoSintactico c = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		
    NodoSintactico nuevo = new NodoSintactico("TEXT", aleft, aright);
    nuevo.addHijo(b);
    nuevo.addHijo(c);
    nuevo.setNumNodo(contador++);

    RESULT = nuevo;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("TEXT",20, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // TEXT ::= menorQue textt mayorQue menorQue ftext mayorQue 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		
    NodoSintactico nuevo = new NodoSintactico("TEXT", aleft, aright);
    nuevo.setNumNodo(contador++);

    RESULT = nuevo;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("TEXT",20, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // TEXT ::= menorQue textt mayorQue IDTEXT menorQue ftext mayorQue 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		
    NodoSintactico nuevo = new NodoSintactico("TEXT", aleft, aright);
    nuevo.addHijo(b);
    nuevo.setNumNodo(contador++);

    RESULT = nuevo;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("TEXT",20, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // IDTEXT ::= texto 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico texto = new NodoSintactico("TEXTO", aleft, aright);
    a = a.replace("\"","");
    a = a.replace("\t","");
    if(a.startsWith("\n")){
        a = a.replaceFirst("\n", "");
    }
    if(a.endsWith("\n")){
        a = a.replaceFirst("(?s)(.*)" + "\n", "$1" + "");
    }
    texto.setValor(a);
    texto.setNumNodo(contador++);
    
    RESULT = texto;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("IDTEXT",30, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // IDTEXT ::= llaveA identificador llaveC 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
    NodoSintactico identificador = new NodoSintactico("ID", aleft, aright);
    identificador.setValor(a);
    identificador.setNumNodo(contador++);

    RESULT = identificador;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("IDTEXT",30, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // IDTEXT ::= cadena 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico texto = new NodoSintactico("TEXTO", aleft, aright);
    a = a.replace("\"","");
    a = a.replace("\t","");
    if(a.startsWith("\n")){
        a = a.replaceFirst("\n", "");
    }
    if(a.endsWith("\n")){
        a = a.replaceFirst("(?s)(.*)" + "\n", "$1" + "");
    }
    texto.setValor(a);
    texto.setNumNodo(contador++);
    
    RESULT = texto;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("IDTEXT",30, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // PANEL ::= menorQue panel ATRIBUTOS mayorQue COMPONENTES menorQue division panel mayorQue 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		
    NodoSintactico nuevo = new NodoSintactico("PANEL", aleft, aright);
    nuevo.setNumNodo(contador++);
    nuevo.addHijo(a);
    nuevo.addHijo(b);

    RESULT = nuevo;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("PANEL",19, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // PANEL ::= menorQue panel mayorQue COMPONENTES menorQue division panel mayorQue 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		
    NodoSintactico nuevo = new NodoSintactico("PANEL", aleft, aright);
    nuevo.setNumNodo(contador++);
    nuevo.addHijo(a);

    RESULT = nuevo;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("PANEL",19, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // PANEL ::= menorQue panel ATRIBUTOS mayorQue menorQue division panel mayorQue 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		
    NodoSintactico nuevo = new NodoSintactico("PANEL", aleft, aright);
    nuevo.setNumNodo(contador++);
    nuevo.addHijo(a);

    RESULT = nuevo;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("PANEL",19, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // PANEL ::= menorQue panel mayorQue menorQue division panel mayorQue 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		
    NodoSintactico nuevo = new NodoSintactico("PANEL", aleft, aright);
    nuevo.setNumNodo(contador++);

    RESULT = nuevo;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("PANEL",19, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ATRIBUTOS ::= ATRIBUTOS ATRIBUTO 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    a.addHijo(b);
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",26, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ATRIBUTOS ::= ATRIBUTO 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico nuevo = new NodoSintactico("ATRIBUTOS", aleft, aright);
    nuevo.setNumNodo(contador++);
    nuevo.addHijo(a);

    RESULT = nuevo;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",26, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ATRIBUTO ::= id igual identificador 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico identificador = new NodoSintactico("ID", aleft, aright);
    identificador.setValor(b);
    identificador.setNumNodo(contador++);

    NodoSintactico nuevo = new NodoSintactico("AT_ID", aleft, aright);
    nuevo.setNumNodo(contador++);
    nuevo.addHijo(identificador);

    RESULT = nuevo;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",27, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ATRIBUTO ::= posicionY igual ARITM 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico aritm = new NodoSintactico("ARITM", aleft, aright);
    aritm.addHijo(b);
    aritm.setNumNodo(contador++);

    NodoSintactico nuevo = new NodoSintactico("AT_Y", aleft, aright);
    nuevo.setNumNodo(contador++);
    nuevo.addHijo(aritm);

    RESULT = nuevo;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",27, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ATRIBUTO ::= posicionX igual ARITM 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico aritm = new NodoSintactico("ARITM", aleft, aright);
    aritm.addHijo(b);
    aritm.setNumNodo(contador++);

    NodoSintactico nuevo = new NodoSintactico("AT_X", aleft, aright);
    nuevo.setNumNodo(contador++);
    nuevo.addHijo(aritm);

    RESULT = nuevo;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",27, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ATRIBUTO ::= height igual ARITM 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico aritm = new NodoSintactico("ARITM", aleft, aright);
    aritm.addHijo(b);
    aritm.setNumNodo(contador++);

    NodoSintactico nuevo = new NodoSintactico("AT_HEIGHT", aleft, aright);
    nuevo.setNumNodo(contador++);
    nuevo.addHijo(aritm);

    RESULT = nuevo;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",27, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ATRIBUTO ::= width igual ARITM 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico aritm = new NodoSintactico("ARITM", aleft, aright);
    aritm.addHijo(b);
    aritm.setNumNodo(contador++);

    NodoSintactico nuevo = new NodoSintactico("AT_WIDTH", aleft, aright);
    nuevo.setNumNodo(contador++);
    nuevo.addHijo(aritm);

    RESULT = nuevo;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",27, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ATRIBUTO ::= color igual COLOR 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico nuevo = new NodoSintactico("AT_COLOR", aleft, aright);
    nuevo.setNumNodo(contador++);
    nuevo.addHijo(a);

    RESULT = nuevo;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",27, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ATRIBUTO ::= border igual ARITM 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico aritm = new NodoSintactico("ARITM", aleft, aright);
    aritm.addHijo(b);
    aritm.setNumNodo(contador++);

    NodoSintactico nuevo = new NodoSintactico("AT_BORDER", aleft, aright);
    nuevo.setNumNodo(contador++);
    nuevo.addHijo(aritm);

    RESULT = nuevo;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",27, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ATRIBUTO ::= className igual cadena 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    b = b.replace("\"", "");
    NodoSintactico nombre = new NodoSintactico("NOMBRE_CLASE", aleft, aright);
    nombre.setValor(b);
    nombre.setNumNodo(contador++);

    NodoSintactico nuevo = new NodoSintactico("AT_CLASSNAME", aleft, aright);
    nuevo.setNumNodo(contador++);
    nuevo.addHijo(nombre);

    RESULT = nuevo;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",27, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ATRIBUTOSB ::= ATRIBUTOSB ATRIBUTOB 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    a.addHijo(b);
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOSB",31, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ATRIBUTOSB ::= ATRIBUTOB 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico nuevo = new NodoSintactico("ATRIBUTOS", aleft, aright);
    nuevo.setNumNodo(contador++);
    nuevo.addHijo(a);

    RESULT = nuevo;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOSB",31, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ATRIBUTOB ::= ATRIBUTO 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOB",32, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ATRIBUTOB ::= onClick igual ARITM 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico aritm = new NodoSintactico("ARITM", aleft, aright);
    aritm.addHijo(b);
    aritm.setNumNodo(contador++);

    NodoSintactico nuevo = new NodoSintactico("AT_ONCLICK", aleft, aright);
    nuevo.setNumNodo(contador++);
    nuevo.addHijo(aritm);

    RESULT = nuevo;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOB",32, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // COLOR ::= cadena 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    a = a.replace("\"","");
    NodoSintactico color = new NodoSintactico("COLOR", aleft, aright);
    color.setValor(a);
    color.setNumNodo(contador++);

    RESULT = color;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR",29, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // COLOR ::= hexadecimal 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico color = new NodoSintactico("COLOR", aleft, aright);
    color.setValor(a);
    color.setNumNodo(contador++);

    RESULT = color;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR",29, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // COLOR ::= identificador 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico identificador = new NodoSintactico("ID", aleft, aright);
    identificador.setValor(a);
    identificador.setNumNodo(contador++);

    RESULT = identificador;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR",29, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ATRIBUTOS_SP ::= ATRIBUTOS_SP ATRIBUTO_SP 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    a.addHijo(b);
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS_SP",39, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ATRIBUTOS_SP ::= ATRIBUTO_SP 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico nuevo = new NodoSintactico("ATRIBUTOS", aleft, aright);
    nuevo.setNumNodo(contador++);
    nuevo.addHijo(a);

    RESULT = nuevo;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS_SP",39, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ATRIBUTO_SP ::= ATRIBUTO 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTO_SP",33, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ATRIBUTO_SP ::= min igual ARITM 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico min = new NodoSintactico("AT_MIN", aleft, aright);
    min.setNumNodo(contador++);
    
    NodoSintactico aritm = new NodoSintactico("ARITM", bleft, bright);
    aritm.addHijo(b);
    aritm.setNumNodo(contador++);

    min.addHijo(aritm);

    RESULT = min;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTO_SP",33, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ATRIBUTO_SP ::= max igual ARITM 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico max = new NodoSintactico("AT_MAX", aleft, aright);
    max.setNumNodo(contador++);
    
    NodoSintactico aritm = new NodoSintactico("ARITM", bleft, bright);
    aritm.addHijo(b);
    aritm.setNumNodo(contador++);

    max.addHijo(aritm);

    RESULT = max;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTO_SP",33, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ARITM ::= ARITM suma ARITM 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("+", cleft, cright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ARITM",28, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ARITM ::= ARITM resta ARITM 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("-", cleft, cright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ARITM",28, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ARITM ::= ARITM division ARITM 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("/", cleft, cright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ARITM",28, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ARITM ::= ARITM potencia ARITM 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("pow", cleft, cright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ARITM",28, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ARITM ::= ARITM multiplicacion ARITM 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("*", cleft, cright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ARITM",28, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ARITM ::= resta ARITM 
            {
              NodoSintactico RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("NEGATIVO", cleft, cright);
    tmp.addHijo(a);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ARITM",28, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ARITM ::= parentesisA ARITM parentesisC 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ARITM",28, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ARITM ::= llaveA identificador llaveC 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
    NodoSintactico identificador = new NodoSintactico("ID", aleft, aright);
    identificador.setValor(a);
    identificador.setNumNodo(contador++);

    RESULT = identificador;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ARITM",28, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ARITM ::= entero 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico entero = new NodoSintactico("ENTERO", aleft, aright);
    int numero = Integer.parseInt(a);
    entero.setValor(numero);
    entero.setNumNodo(contador++);

    RESULT = entero;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ARITM",28, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ARITM ::= doble 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico doble = new NodoSintactico("DOBLE", aleft, aright);
    double numero = Double.valueOf(a);
    doble.setValor(numero);
    doble.setNumNodo(contador++);

    RESULT = doble;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ARITM",28, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ARITM ::= cadena 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico cadena = new NodoSintactico("CADENA", aleft, aright);
    a = a.replace("\"","");
    cadena.setValor(a);
    cadena.setNumNodo(contador++);

    RESULT = cadena;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ARITM",28, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // ARITM ::= caracter 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico caracter = new NodoSintactico("CARACTER", aleft, aright);
    char carac = a.charAt(1);
    caracter.setValor(carac);
    caracter.setNumNodo(contador++);

    RESULT = caracter;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ARITM",28, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // ARITM ::= booleano 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico booleano = new NodoSintactico("BOOLEANO", aleft, aright);
    boolean valor = true;
    a = a.toLowerCase();
    if(a.equals("false")){
        valor = false;
    }
    booleano.setValor(valor);
    booleano.setNumNodo(contador++);

    RESULT = booleano;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ARITM",28, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ARITM ::= llaveA identificador corcheteA E corcheteC llaveC 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		
    NodoSintactico identificador = new NodoSintactico("ID", aleft, aright);
    identificador.setValor(a);
    identificador.addHijo(b);
    identificador.setNumNodo(contador++);

    RESULT = identificador;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ARITM",28, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ATRIBUTOS_IM ::= ATRIBUTOS_IM ATRIBUTO_IM 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    a.addHijo(b);
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS_IM",40, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ATRIBUTOS_IM ::= ATRIBUTO_IM 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico nuevo = new NodoSintactico("ATRIBUTOS", aleft, aright);
    nuevo.setNumNodo(contador++);
    nuevo.addHijo(a);

    RESULT = nuevo;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS_IM",40, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ATRIBUTO_IM ::= ATRIBUTO 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTO_IM",41, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ATRIBUTO_IM ::= fuente igual ARITM 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico fuente = new NodoSintactico("AT_FUENTE", aleft, aright);
    fuente.setNumNodo(contador++);

    NodoSintactico aritm = new NodoSintactico("ARITM", bleft, bright);
    aritm.addHijo(b);
    aritm.setNumNodo(contador++);

    fuente.addHijo(aritm);

    RESULT = fuente;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTO_IM",41, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analisis_Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analisis_Sintactico$do_action(
    int                        CUP$Analisis_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analisis_Sintactico$parser,
    java.util.Stack            CUP$Analisis_Sintactico$stack,
    int                        CUP$Analisis_Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Analisis_Sintactico$do_action_part00000000(
                               CUP$Analisis_Sintactico$act_num,
                               CUP$Analisis_Sintactico$parser,
                               CUP$Analisis_Sintactico$stack,
                               CUP$Analisis_Sintactico$top);
    }
}

}
