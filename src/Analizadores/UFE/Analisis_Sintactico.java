
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores.UFE;

import java_cup.runtime.Symbol;
import Estructuras.*;
import Nodos.NodoSintactico;
import Modelos.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analisis_Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public Analisis_Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analisis_Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analisis_Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\073\000\002\002\004\000\002\002\003\000\002\014" +
    "\004\000\002\014\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\003\005\000\002\003\006\000" +
    "\002\004\005\000\002\004\003\000\002\005\005\000\002" +
    "\005\007\000\002\005\010\000\002\005\006\000\002\005" +
    "\003\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\004\000" +
    "\002\010\005\000\002\010\004\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\003\000\002\013\005\000" +
    "\002\013\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\006\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\006\010\000" +
    "\002\006\011\000\002\006\011\000\002\006\012\000\002" +
    "\007\004\000\002\007\005\000\002\007\006\000\002\016" +
    "\007\000\002\017\010\000\002\017\011\000\002\020\010" +
    "\000\002\020\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\167\000\036\006\020\013\007\024\025\035\026\070" +
    "\030\072\006\073\010\074\013\075\033\076\005\077\017" +
    "\100\024\101\004\102\016\001\002\000\104\002\uffdc\004" +
    "\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc\012\uffdc\013\uffdc" +
    "\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022" +
    "\uffdc\023\uffdc\024\uffdc\025\uffdc\027\uffdc\031\uffdc\033\uffdc" +
    "\034\uffdc\035\uffdc\070\uffdc\072\uffdc\073\uffdc\074\uffdc\075" +
    "\uffdc\076\uffdc\077\uffdc\100\uffdc\101\uffdc\102\uffdc\001\002" +
    "\000\104\002\uffdb\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010" +
    "\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb" +
    "\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\027" +
    "\uffdb\031\uffdb\033\uffdb\034\uffdb\035\uffdb\070\uffdb\072\uffdb" +
    "\073\uffdb\074\uffdb\075\uffdb\076\uffdb\077\uffdb\100\uffdb\101" +
    "\uffdb\102\uffdb\001\002\000\004\024\163\001\002\000\024" +
    "\006\020\013\007\024\025\075\037\076\005\077\017\100" +
    "\024\101\004\102\016\001\002\000\004\024\156\001\002" +
    "\000\042\002\ufffd\006\ufffd\013\ufffd\024\ufffd\027\ufffd\035" +
    "\ufffd\070\ufffd\072\ufffd\073\ufffd\074\ufffd\075\ufffd\076\ufffd" +
    "\077\ufffd\100\ufffd\101\ufffd\102\ufffd\001\002\000\040\002" +
    "\000\006\020\013\007\024\025\035\026\070\030\072\006" +
    "\073\010\074\013\075\033\076\005\077\017\100\024\101" +
    "\004\102\016\001\002\000\004\024\147\001\002\000\042" +
    "\002\ufffb\006\ufffb\013\ufffb\024\ufffb\027\ufffb\035\ufffb\070" +
    "\ufffb\072\ufffb\073\ufffb\074\ufffb\075\ufffb\076\ufffb\077\ufffb" +
    "\100\ufffb\101\ufffb\102\ufffb\001\002\000\042\002\uffd5\006" +
    "\uffd5\013\uffd5\024\uffd5\027\uffd5\035\uffd5\070\uffd5\072\uffd5" +
    "\073\uffd5\074\uffd5\075\uffd5\076\uffd5\077\uffd5\100\uffd5\101" +
    "\uffd5\102\uffd5\001\002\000\104\002\uffd9\004\uffd9\005\uffd9" +
    "\006\uffd9\007\uffd9\010\uffd9\012\uffd9\013\uffd9\014\uffd9\015" +
    "\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9" +
    "\024\uffd9\025\uffd9\027\uffd9\031\uffd9\033\uffd9\034\uffd9\035" +
    "\uffd9\070\uffd9\072\uffd9\073\uffd9\074\uffd9\075\uffd9\076\uffd9" +
    "\077\uffd9\100\uffd9\101\uffd9\102\uffd9\001\002\000\104\002" +
    "\uffda\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda\012\uffda" +
    "\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021" +
    "\uffda\022\uffda\023\uffda\024\uffda\025\uffda\027\uffda\031\uffda" +
    "\033\uffda\034\uffda\035\uffda\070\uffda\072\uffda\073\uffda\074" +
    "\uffda\075\uffda\076\uffda\077\uffda\100\uffda\101\uffda\102\uffda" +
    "\001\002\000\024\006\020\013\007\024\025\075\037\076" +
    "\005\077\017\100\024\101\004\102\016\001\002\000\074" +
    "\002\ufffc\004\046\005\054\006\044\007\045\010\042\012" +
    "\053\013\ufffc\014\055\015\041\016\047\017\056\020\043" +
    "\021\050\022\051\023\052\024\ufffc\027\ufffc\035\ufffc\070" +
    "\ufffc\072\ufffc\073\ufffc\074\ufffc\075\ufffc\076\ufffc\077\ufffc" +
    "\100\ufffc\101\ufffc\102\ufffc\001\002\000\042\002\uffd6\006" +
    "\uffd6\013\uffd6\024\uffd6\027\uffd6\035\uffd6\070\uffd6\072\uffd6" +
    "\073\uffd6\074\uffd6\075\uffd6\076\uffd6\077\uffd6\100\uffd6\101" +
    "\uffd6\102\uffd6\001\002\000\042\002\uffd3\006\uffd3\013\uffd3" +
    "\024\uffd3\027\uffd3\035\uffd3\070\uffd3\072\uffd3\073\uffd3\074" +
    "\uffd3\075\uffd3\076\uffd3\077\uffd3\100\uffd3\101\uffd3\102\uffd3" +
    "\001\002\000\104\002\uffdd\004\uffdd\005\uffdd\006\uffdd\007" +
    "\uffdd\010\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd" +
    "\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025" +
    "\uffdd\027\uffdd\031\uffdd\033\uffdd\034\uffdd\035\uffdd\070\uffdd" +
    "\072\uffdd\073\uffdd\074\uffdd\075\uffdd\076\uffdd\077\uffdd\100" +
    "\uffdd\101\uffdd\102\uffdd\001\002\000\024\006\020\013\007" +
    "\024\025\075\037\076\005\077\017\100\024\101\004\102" +
    "\016\001\002\000\004\075\122\001\002\000\042\002\uffd4" +
    "\006\uffd4\013\uffd4\024\uffd4\027\uffd4\035\uffd4\070\uffd4\072" +
    "\uffd4\073\uffd4\074\uffd4\075\uffd4\076\uffd4\077\uffd4\100\uffd4" +
    "\101\uffd4\102\uffd4\001\002\000\004\024\101\001\002\000" +
    "\042\002\ufffe\006\ufffe\013\ufffe\024\ufffe\027\ufffe\035\ufffe" +
    "\070\ufffe\072\ufffe\073\ufffe\074\ufffe\075\ufffe\076\ufffe\077" +
    "\ufffe\100\ufffe\101\ufffe\102\ufffe\001\002\000\004\002\100" +
    "\001\002\000\100\002\uffd8\004\uffd8\005\uffd8\006\uffd8\007" +
    "\uffd8\010\uffd8\011\035\012\uffd8\013\uffd8\014\uffd8\015\uffd8" +
    "\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024" +
    "\uffd8\027\uffd8\030\036\035\uffd8\070\uffd8\072\uffd8\073\uffd8" +
    "\074\uffd8\075\uffd8\076\uffd8\077\uffd8\100\uffd8\101\uffd8\102" +
    "\uffd8\001\002\000\104\002\uffe0\004\uffe0\005\uffe0\006\uffe0" +
    "\007\uffe0\010\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016" +
    "\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0" +
    "\025\uffe0\027\uffe0\031\uffe0\033\uffe0\034\uffe0\035\uffe0\070" +
    "\uffe0\072\uffe0\073\uffe0\074\uffe0\075\uffe0\076\uffe0\077\uffe0" +
    "\100\uffe0\101\uffe0\102\uffe0\001\002\000\024\006\020\013" +
    "\007\024\025\075\037\076\005\077\017\100\024\101\004" +
    "\102\016\001\002\000\024\006\020\013\007\024\025\075" +
    "\037\076\005\077\017\100\024\101\004\102\016\001\002" +
    "\000\106\002\uffd8\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010" +
    "\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8" +
    "\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\027" +
    "\uffd8\030\036\031\uffd8\033\uffd8\034\uffd8\035\uffd8\070\uffd8" +
    "\072\uffd8\073\uffd8\074\uffd8\075\uffd8\076\uffd8\077\uffd8\100" +
    "\uffd8\101\uffd8\102\uffd8\001\002\000\040\004\046\005\054" +
    "\006\044\007\045\010\042\012\053\014\055\015\041\016" +
    "\047\017\056\020\043\021\050\022\051\023\052\031\057" +
    "\001\002\000\024\006\020\013\007\024\025\075\037\076" +
    "\005\077\017\100\024\101\004\102\016\001\002\000\024" +
    "\006\020\013\007\024\025\075\037\076\005\077\017\100" +
    "\024\101\004\102\016\001\002\000\024\006\020\013\007" +
    "\024\025\075\037\076\005\077\017\100\024\101\004\102" +
    "\016\001\002\000\024\006\020\013\007\024\025\075\037" +
    "\076\005\077\017\100\024\101\004\102\016\001\002\000" +
    "\024\006\020\013\007\024\025\075\037\076\005\077\017" +
    "\100\024\101\004\102\016\001\002\000\024\006\020\013" +
    "\007\024\025\075\037\076\005\077\017\100\024\101\004" +
    "\102\016\001\002\000\024\006\020\013\007\024\025\075" +
    "\037\076\005\077\017\100\024\101\004\102\016\001\002" +
    "\000\024\006\020\013\007\024\025\075\037\076\005\077" +
    "\017\100\024\101\004\102\016\001\002\000\024\006\020" +
    "\013\007\024\025\075\037\076\005\077\017\100\024\101" +
    "\004\102\016\001\002\000\024\006\020\013\007\024\025" +
    "\075\037\076\005\077\017\100\024\101\004\102\016\001" +
    "\002\000\024\006\020\013\007\024\025\075\037\076\005" +
    "\077\017\100\024\101\004\102\016\001\002\000\024\006" +
    "\020\013\007\024\025\075\037\076\005\077\017\100\024" +
    "\101\004\102\016\001\002\000\024\006\020\013\007\024" +
    "\025\075\037\076\005\077\017\100\024\101\004\102\016" +
    "\001\002\000\024\006\020\013\007\024\025\075\037\076" +
    "\005\077\017\100\024\101\004\102\016\001\002\000\104" +
    "\002\uffd7\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7\012" +
    "\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7" +
    "\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\027\uffd7\031" +
    "\uffd7\033\uffd7\034\uffd7\035\uffd7\070\uffd7\072\uffd7\073\uffd7" +
    "\074\uffd7\075\uffd7\076\uffd7\077\uffd7\100\uffd7\101\uffd7\102" +
    "\uffd7\001\002\000\104\002\uffe5\004\046\005\054\006\044" +
    "\007\045\010\042\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016" +
    "\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5" +
    "\025\uffe5\027\uffe5\031\uffe5\033\uffe5\034\uffe5\035\uffe5\070" +
    "\uffe5\072\uffe5\073\uffe5\074\uffe5\075\uffe5\076\uffe5\077\uffe5" +
    "\100\uffe5\101\uffe5\102\uffe5\001\002\000\104\002\uffe9\004" +
    "\046\005\054\006\044\007\045\010\042\012\uffe9\013\uffe9" +
    "\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022" +
    "\uffe9\023\uffe9\024\uffe9\025\uffe9\027\uffe9\031\uffe9\033\uffe9" +
    "\034\uffe9\035\uffe9\070\uffe9\072\uffe9\073\uffe9\074\uffe9\075" +
    "\uffe9\076\uffe9\077\uffe9\100\uffe9\101\uffe9\102\uffe9\001\002" +
    "\000\104\002\uffef\004\uffef\005\uffef\006\uffef\007\uffef\010" +
    "\042\012\uffef\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef" +
    "\020\uffef\021\uffef\022\uffef\023\uffef\024\uffef\025\uffef\027" +
    "\uffef\031\uffef\033\uffef\034\uffef\035\uffef\070\uffef\072\uffef" +
    "\073\uffef\074\uffef\075\uffef\076\uffef\077\uffef\100\uffef\101" +
    "\uffef\102\uffef\001\002\000\104\002\uffe8\004\046\005\054" +
    "\006\044\007\045\010\042\012\uffe8\013\uffe8\014\uffe8\015" +
    "\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8" +
    "\024\uffe8\025\uffe8\027\uffe8\031\uffe8\033\uffe8\034\uffe8\035" +
    "\uffe8\070\uffe8\072\uffe8\073\uffe8\074\uffe8\075\uffe8\076\uffe8" +
    "\077\uffe8\100\uffe8\101\uffe8\102\uffe8\001\002\000\104\002" +
    "\uffe1\004\046\005\054\006\044\007\045\010\042\012\053" +
    "\013\uffe1\014\055\015\041\016\047\017\056\020\043\021" +
    "\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\027\uffe1\031\uffe1" +
    "\033\uffe1\034\uffe1\035\uffe1\070\uffe1\072\uffe1\073\uffe1\074" +
    "\uffe1\075\uffe1\076\uffe1\077\uffe1\100\uffe1\101\uffe1\102\uffe1" +
    "\001\002\000\104\002\uffe2\004\046\005\054\006\044\007" +
    "\045\010\042\012\053\013\uffe2\014\055\015\041\016\047" +
    "\017\056\020\043\021\050\022\uffe2\023\052\024\uffe2\025" +
    "\uffe2\027\uffe2\031\uffe2\033\uffe2\034\uffe2\035\uffe2\070\uffe2" +
    "\072\uffe2\073\uffe2\074\uffe2\075\uffe2\076\uffe2\077\uffe2\100" +
    "\uffe2\101\uffe2\102\uffe2\001\002\000\104\002\uffe3\004\046" +
    "\005\054\006\044\007\045\010\042\012\053\013\uffe3\014" +
    "\055\015\041\016\047\017\056\020\043\021\uffe3\022\uffe3" +
    "\023\052\024\uffe3\025\uffe3\027\uffe3\031\uffe3\033\uffe3\034" +
    "\uffe3\035\uffe3\070\uffe3\072\uffe3\073\uffe3\074\uffe3\075\uffe3" +
    "\076\uffe3\077\uffe3\100\uffe3\101\uffe3\102\uffe3\001\002\000" +
    "\104\002\uffe6\004\046\005\054\006\044\007\045\010\042" +
    "\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020" +
    "\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\027\uffe6" +
    "\031\uffe6\033\uffe6\034\uffe6\035\uffe6\070\uffe6\072\uffe6\073" +
    "\uffe6\074\uffe6\075\uffe6\076\uffe6\077\uffe6\100\uffe6\101\uffe6" +
    "\102\uffe6\001\002\000\104\002\uffed\004\uffed\005\uffed\006" +
    "\uffed\007\uffed\010\042\012\uffed\013\uffed\014\uffed\015\uffed" +
    "\016\uffed\017\uffed\020\uffed\021\uffed\022\uffed\023\uffed\024" +
    "\uffed\025\uffed\027\uffed\031\uffed\033\uffed\034\uffed\035\uffed" +
    "\070\uffed\072\uffed\073\uffed\074\uffed\075\uffed\076\uffed\077" +
    "\uffed\100\uffed\101\uffed\102\uffed\001\002\000\104\002\ufff1" +
    "\004\046\005\054\006\ufff1\007\ufff1\010\042\012\ufff1\013" +
    "\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1" +
    "\022\ufff1\023\ufff1\024\ufff1\025\ufff1\027\ufff1\031\ufff1\033" +
    "\ufff1\034\ufff1\035\ufff1\070\ufff1\072\ufff1\073\ufff1\074\ufff1" +
    "\075\ufff1\076\ufff1\077\ufff1\100\ufff1\101\ufff1\102\ufff1\001" +
    "\002\000\104\002\ufff0\004\046\005\054\006\ufff0\007\ufff0" +
    "\010\042\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\017" +
    "\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0" +
    "\027\ufff0\031\ufff0\033\ufff0\034\ufff0\035\ufff0\070\ufff0\072" +
    "\ufff0\073\ufff0\074\ufff0\075\ufff0\076\ufff0\077\ufff0\100\ufff0" +
    "\101\ufff0\102\ufff0\001\002\000\104\002\uffe4\004\046\005" +
    "\054\006\044\007\045\010\042\012\uffe4\013\uffe4\014\uffe4" +
    "\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023" +
    "\uffe4\024\uffe4\025\uffe4\027\uffe4\031\uffe4\033\uffe4\034\uffe4" +
    "\035\uffe4\070\uffe4\072\uffe4\073\uffe4\074\uffe4\075\uffe4\076" +
    "\uffe4\077\uffe4\100\uffe4\101\uffe4\102\uffe4\001\002\000\104" +
    "\002\uffee\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee\012" +
    "\uffee\013\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee" +
    "\021\uffee\022\uffee\023\uffee\024\uffee\025\uffee\027\uffee\031" +
    "\uffee\033\uffee\034\uffee\035\uffee\070\uffee\072\uffee\073\uffee" +
    "\074\uffee\075\uffee\076\uffee\077\uffee\100\uffee\101\uffee\102" +
    "\uffee\001\002\000\104\002\uffe7\004\046\005\054\006\044" +
    "\007\045\010\042\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016" +
    "\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7" +
    "\025\uffe7\027\uffe7\031\uffe7\033\uffe7\034\uffe7\035\uffe7\070" +
    "\uffe7\072\uffe7\073\uffe7\074\uffe7\075\uffe7\076\uffe7\077\uffe7" +
    "\100\uffe7\101\uffe7\102\uffe7\001\002\000\040\004\046\005" +
    "\054\006\044\007\045\010\042\012\053\014\055\015\041" +
    "\016\047\017\056\020\043\021\050\022\051\023\052\033" +
    "\077\001\002\000\042\002\ufff9\006\ufff9\013\ufff9\024\ufff9" +
    "\027\ufff9\035\ufff9\070\ufff9\072\ufff9\073\ufff9\074\ufff9\075" +
    "\ufff9\076\ufff9\077\ufff9\100\ufff9\101\ufff9\102\ufff9\001\002" +
    "\000\004\002\001\001\002\000\024\006\020\013\007\024" +
    "\025\075\037\076\005\077\017\100\024\101\004\102\016" +
    "\001\002\000\040\004\046\005\054\006\044\007\045\010" +
    "\042\012\053\014\055\015\041\016\047\017\056\020\043" +
    "\021\050\022\051\023\052\025\103\001\002\000\004\026" +
    "\104\001\002\000\040\006\020\013\007\024\025\027\106" +
    "\035\026\070\030\072\006\073\010\074\013\075\033\076" +
    "\005\077\017\100\024\101\004\102\016\001\002\000\040" +
    "\006\020\013\007\024\025\027\117\035\026\070\030\072" +
    "\006\073\010\074\013\075\033\076\005\077\017\100\024" +
    "\101\004\102\016\001\002\000\044\002\uffd2\006\uffd2\013" +
    "\uffd2\024\uffd2\027\uffd2\035\uffd2\070\uffd2\071\107\072\uffd2" +
    "\073\uffd2\074\uffd2\075\uffd2\076\uffd2\077\uffd2\100\uffd2\101" +
    "\uffd2\102\uffd2\001\002\000\006\026\111\070\030\001\002" +
    "\000\042\002\uffd1\006\uffd1\013\uffd1\024\uffd1\027\uffd1\035" +
    "\uffd1\070\uffd1\072\uffd1\073\uffd1\074\uffd1\075\uffd1\076\uffd1" +
    "\077\uffd1\100\uffd1\101\uffd1\102\uffd1\001\002\000\040\006" +
    "\020\013\007\024\025\027\114\035\026\070\030\072\006" +
    "\073\010\074\013\075\033\076\005\077\017\100\024\101" +
    "\004\102\016\001\002\000\042\002\uffce\006\uffce\013\uffce" +
    "\024\uffce\027\uffce\035\uffce\070\uffce\072\uffce\073\uffce\074" +
    "\uffce\075\uffce\076\uffce\077\uffce\100\uffce\101\uffce\102\uffce" +
    "\001\002\000\040\006\020\013\007\024\025\027\115\035" +
    "\026\070\030\072\006\073\010\074\013\075\033\076\005" +
    "\077\017\100\024\101\004\102\016\001\002\000\042\002" +
    "\uffcd\006\uffcd\013\uffcd\024\uffcd\027\uffcd\035\uffcd\070\uffcd" +
    "\072\uffcd\073\uffcd\074\uffcd\075\uffcd\076\uffcd\077\uffcd\100" +
    "\uffcd\101\uffcd\102\uffcd\001\002\000\042\002\uffcc\006\uffcc" +
    "\013\uffcc\024\uffcc\027\uffcc\035\uffcc\070\uffcc\072\uffcc\073" +
    "\uffcc\074\uffcc\075\uffcc\076\uffcc\077\uffcc\100\uffcc\101\uffcc" +
    "\102\uffcc\001\002\000\042\002\uffff\006\uffff\013\uffff\024" +
    "\uffff\027\uffff\035\uffff\070\uffff\072\uffff\073\uffff\074\uffff" +
    "\075\uffff\076\uffff\077\uffff\100\uffff\101\uffff\102\uffff\001" +
    "\002\000\044\002\uffd0\006\uffd0\013\uffd0\024\uffd0\027\uffd0" +
    "\035\uffd0\070\uffd0\071\107\072\uffd0\073\uffd0\074\uffd0\075" +
    "\uffd0\076\uffd0\077\uffd0\100\uffd0\101\uffd0\102\uffd0\001\002" +
    "\000\042\002\uffcf\006\uffcf\013\uffcf\024\uffcf\027\uffcf\035" +
    "\uffcf\070\uffcf\072\uffcf\073\uffcf\074\uffcf\075\uffcf\076\uffcf" +
    "\077\uffcf\100\uffcf\101\uffcf\102\uffcf\001\002\000\006\033" +
    "\142\034\141\001\002\000\012\011\124\030\125\033\ufff2" +
    "\034\ufff2\001\002\000\006\033\ufff7\034\ufff7\001\002\000" +
    "\026\006\020\013\007\024\025\026\132\075\037\076\005" +
    "\077\017\100\024\101\004\102\016\001\002\000\024\006" +
    "\020\013\007\024\025\075\037\076\005\077\017\100\024" +
    "\101\004\102\016\001\002\000\040\004\046\005\054\006" +
    "\044\007\045\010\042\012\053\014\055\015\041\016\047" +
    "\017\056\020\043\021\050\022\051\023\052\031\127\001" +
    "\002\000\010\011\130\033\ufff3\034\ufff3\001\002\000\024" +
    "\006\020\013\007\024\025\075\037\076\005\077\017\100" +
    "\024\101\004\102\016\001\002\000\042\004\046\005\054" +
    "\006\044\007\045\010\042\012\053\014\055\015\041\016" +
    "\047\017\056\020\043\021\050\022\051\023\052\033\ufff4" +
    "\034\ufff4\001\002\000\024\006\020\013\007\024\025\075" +
    "\037\076\005\077\017\100\024\101\004\102\016\001\002" +
    "\000\042\004\046\005\054\006\044\007\045\010\042\012" +
    "\053\014\055\015\041\016\047\017\056\020\043\021\050" +
    "\022\051\023\052\033\ufff6\034\ufff6\001\002\000\006\027" +
    "\136\034\137\001\002\000\042\004\046\005\054\006\044" +
    "\007\045\010\042\012\053\014\055\015\041\016\047\017" +
    "\056\020\043\021\050\022\051\023\052\027\uffde\034\uffde" +
    "\001\002\000\006\033\ufff5\034\ufff5\001\002\000\024\006" +
    "\020\013\007\024\025\075\037\076\005\077\017\100\024" +
    "\101\004\102\016\001\002\000\042\004\046\005\054\006" +
    "\044\007\045\010\042\012\053\014\055\015\041\016\047" +
    "\017\056\020\043\021\050\022\051\023\052\027\uffdf\034" +
    "\uffdf\001\002\000\004\075\122\001\002\000\042\002\ufffa" +
    "\006\ufffa\013\ufffa\024\ufffa\027\ufffa\035\ufffa\070\ufffa\072" +
    "\ufffa\073\ufffa\074\ufffa\075\ufffa\076\ufffa\077\ufffa\100\ufffa" +
    "\101\ufffa\102\ufffa\001\002\000\006\033\ufff8\034\ufff8\001" +
    "\002\000\040\004\046\005\054\006\044\007\045\010\042" +
    "\012\053\014\055\015\041\016\047\017\056\020\043\021" +
    "\050\022\051\023\052\025\145\001\002\000\104\002\uffeb" +
    "\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\012\uffeb\013" +
    "\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb" +
    "\022\uffeb\023\uffeb\024\uffeb\025\uffeb\027\uffeb\031\uffeb\033" +
    "\uffeb\034\uffeb\035\uffeb\070\uffeb\072\uffeb\073\uffeb\074\uffeb" +
    "\075\uffeb\076\uffeb\077\uffeb\100\uffeb\101\uffeb\102\uffeb\001" +
    "\002\000\104\002\uffec\004\046\005\054\006\uffec\007\uffec" +
    "\010\042\012\uffec\013\uffec\014\uffec\015\uffec\016\uffec\017" +
    "\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025\uffec" +
    "\027\uffec\031\uffec\033\uffec\034\uffec\035\uffec\070\uffec\072" +
    "\uffec\073\uffec\074\uffec\075\uffec\076\uffec\077\uffec\100\uffec" +
    "\101\uffec\102\uffec\001\002\000\024\006\020\013\007\024" +
    "\025\075\037\076\005\077\017\100\024\101\004\102\016" +
    "\001\002\000\040\004\046\005\054\006\044\007\045\010" +
    "\042\012\053\014\055\015\041\016\047\017\056\020\043" +
    "\021\050\022\051\023\052\025\151\001\002\000\004\026" +
    "\152\001\002\000\040\006\020\013\007\024\025\027\154" +
    "\035\026\070\030\072\006\073\010\074\013\075\033\076" +
    "\005\077\017\100\024\101\004\102\016\001\002\000\040" +
    "\006\020\013\007\024\025\027\155\035\026\070\030\072" +
    "\006\073\010\074\013\075\033\076\005\077\017\100\024" +
    "\101\004\102\016\001\002\000\042\002\uffca\006\uffca\013" +
    "\uffca\024\uffca\027\uffca\035\uffca\070\uffca\072\uffca\073\uffca" +
    "\074\uffca\075\uffca\076\uffca\077\uffca\100\uffca\101\uffca\102" +
    "\uffca\001\002\000\042\002\uffc9\006\uffc9\013\uffc9\024\uffc9" +
    "\027\uffc9\035\uffc9\070\uffc9\072\uffc9\073\uffc9\074\uffc9\075" +
    "\uffc9\076\uffc9\077\uffc9\100\uffc9\101\uffc9\102\uffc9\001\002" +
    "\000\024\006\020\013\007\024\025\075\037\076\005\077" +
    "\017\100\024\101\004\102\016\001\002\000\040\004\046" +
    "\005\054\006\044\007\045\010\042\012\053\014\055\015" +
    "\041\016\047\017\056\020\043\021\050\022\051\023\052" +
    "\025\160\001\002\000\004\033\161\001\002\000\042\002" +
    "\uffcb\006\uffcb\013\uffcb\024\uffcb\027\uffcb\035\uffcb\070\uffcb" +
    "\072\uffcb\073\uffcb\074\uffcb\075\uffcb\076\uffcb\077\uffcb\100" +
    "\uffcb\101\uffcb\102\uffcb\001\002\000\104\002\uffea\004\046" +
    "\005\054\006\044\007\045\010\042\012\uffea\013\uffea\014" +
    "\uffea\015\uffea\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea" +
    "\023\uffea\024\uffea\025\uffea\027\uffea\031\uffea\033\uffea\034" +
    "\uffea\035\uffea\070\uffea\072\uffea\073\uffea\074\uffea\075\uffea" +
    "\076\uffea\077\uffea\100\uffea\101\uffea\102\uffea\001\002\000" +
    "\024\006\020\013\007\024\025\075\037\076\005\077\017" +
    "\100\024\101\004\102\016\001\002\000\040\004\046\005" +
    "\054\006\044\007\045\010\042\012\053\014\055\015\041" +
    "\016\047\017\056\020\043\021\050\022\051\023\052\025" +
    "\165\001\002\000\004\026\166\001\002\000\040\006\020" +
    "\013\007\024\025\027\170\035\026\070\030\072\006\073" +
    "\010\074\013\075\033\076\005\077\017\100\024\101\004" +
    "\102\016\001\002\000\040\006\020\013\007\024\025\027" +
    "\171\035\026\070\030\072\006\073\010\074\013\075\033" +
    "\076\005\077\017\100\024\101\004\102\016\001\002\000" +
    "\042\002\uffc8\006\uffc8\013\uffc8\024\uffc8\027\uffc8\035\uffc8" +
    "\070\uffc8\072\uffc8\073\uffc8\074\uffc8\075\uffc8\076\uffc8\077" +
    "\uffc8\100\uffc8\101\uffc8\102\uffc8\001\002\000\042\002\uffc7" +
    "\006\uffc7\013\uffc7\024\uffc7\027\uffc7\035\uffc7\070\uffc7\072" +
    "\uffc7\073\uffc7\074\uffc7\075\uffc7\076\uffc7\077\uffc7\100\uffc7" +
    "\101\uffc7\102\uffc7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\167\000\030\002\031\003\010\006\021\010\020\011" +
    "\013\012\033\014\011\015\030\016\014\017\026\020\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\161\012\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\003\010\006\021\010\020\011" +
    "\013\012\033\015\115\016\014\017\026\020\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\145\012\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\143\012\033\001\001" +
    "\000\006\004\120\005\122\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\075\012\033\001" +
    "\001\000\006\010\037\012\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\074\012\033\001\001\000" +
    "\006\010\073\012\033\001\001\000\006\010\072\012\033" +
    "\001\001\000\006\010\071\012\033\001\001\000\006\010" +
    "\070\012\033\001\001\000\006\010\067\012\033\001\001" +
    "\000\006\010\066\012\033\001\001\000\006\010\065\012" +
    "\033\001\001\000\006\010\064\012\033\001\001\000\006" +
    "\010\063\012\033\001\001\000\006\010\062\012\033\001" +
    "\001\000\006\010\061\012\033\001\001\000\006\010\060" +
    "\012\033\001\001\000\006\010\057\012\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\101\012\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\003\010" +
    "\006\021\010\020\011\013\012\033\014\104\015\030\016" +
    "\014\017\026\020\022\001\001\000\024\003\010\006\021" +
    "\010\020\011\013\012\033\015\115\016\014\017\026\020" +
    "\022\001\001\000\004\007\107\001\001\000\004\006\111" +
    "\001\001\000\002\001\001\000\026\003\010\006\021\010" +
    "\020\011\013\012\033\014\112\015\030\016\014\017\026" +
    "\020\022\001\001\000\002\001\001\000\024\003\010\006" +
    "\021\010\020\011\013\012\033\015\115\016\014\017\026" +
    "\020\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\117\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\132\012\033\001\001\000\006\010\125\012\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\130\012\033\001\001\000\002\001\001\000\010\010\134" +
    "\012\033\013\133\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\137" +
    "\012\033\001\001\000\002\001\001\000\004\005\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\147\012" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\003\010\006\021\010\020\011\013\012\033\014\152\015" +
    "\030\016\014\017\026\020\022\001\001\000\024\003\010" +
    "\006\021\010\020\011\013\012\033\015\115\016\014\017" +
    "\026\020\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\156\012\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\163\012\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\003\010\006\021\010\020\011\013\012\033" +
    "\014\166\015\030\016\014\017\026\020\022\001\001\000" +
    "\024\003\010\006\021\010\020\011\013\012\033\015\115" +
    "\016\014\017\026\020\022\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analisis_Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analisis_Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analisis_Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Arbol variables = new Arbol();
    public Cola TodosLosErrores = new Cola();
    public NodoSintactico padre;
    public int contador = 1;
    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s){
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        System.out.println("ERROR SINTACTICO");
        Errores error = new Errores(lexema,fila,columna,"Token " + lexema + " No esperado", "Sintactico");
        TodosLosErrores.insertar(error);
    }

    //Metodo al que se llama en el momento en el que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s){

    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analisis_Sintactico$actions {


    

  private final Analisis_Sintactico parser;

  /** Constructor */
  CUP$Analisis_Sintactico$actions(Analisis_Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analisis_Sintactico$do_action_part00000000(
    int                        CUP$Analisis_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analisis_Sintactico$parser,
    java.util.Stack            CUP$Analisis_Sintactico$stack,
    int                        CUP$Analisis_Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analisis_Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Analisis_Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analisis_Sintactico$parser.done_parsing();
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              Object RESULT =null;
		int inicioleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int inicioright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico inicio = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("INICIO", inicioleft, inicioright);
    tmp.setNumNodo(contador++);
    tmp.addHijo(inicio);
    padre = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES OPCIONES 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("OPCIONES", bleft, bright);
    tmp.setNumNodo(contador++);
    tmp.addHijo(a);
    tmp.addHijo(b);
    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= OPCIONES 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("OPCION", aleft, aright);
    tmp.setNumNodo(contador++);
    tmp.addHijo(a);
    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // OPCIONES ::= DECLARACION 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPCIONES",11, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // OPCIONES ::= E 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("E", aleft, aright);
    tmp.setNumNodo(contador++);
    tmp.addHijo(a);
    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPCIONES",11, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // OPCIONES ::= FUNCIONES 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("FUNCION", aleft, aright);
    tmp.setNumNodo(contador++);
    tmp.addHijo(a);
    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPCIONES",11, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARACION ::= var ASIGNACION puntoComa 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARACION ::= identificador igual E puntoComa 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
    NodoSintactico identificador = new NodoSintactico("ID", aleft, aright);
    identificador.setValor(a);
    identificador.setNumNodo(contador++);

    NodoSintactico tmp = new NodoSintactico("REASIGNACION", aleft, aright);
    tmp.addHijo(identificador);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);
    
    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ASIGNACION ::= ASIGNACION coma IDENT 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("ASIGNACIONES", bleft, bright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ASIGNACION ::= IDENT 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // IDENT ::= identificador igual E 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico identificador = new NodoSintactico("ID", aleft, aright);
    identificador.setValor(a);
    identificador.setNumNodo(contador++);

    NodoSintactico tmp = new NodoSintactico("SDA", bleft, bright);
    tmp.addHijo(identificador);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("IDENT",3, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // IDENT ::= identificador igual llaveA LISTAEXP llaveC 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
    NodoSintactico identificador = new NodoSintactico("ID", aleft, aright);
    identificador.setValor(a);
    identificador.setNumNodo(contador++);

    NodoSintactico tmp = new NodoSintactico("ADA", aleft, aright);
    tmp.addHijo(identificador);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("IDENT",3, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IDENT ::= identificador corcheteA E corcheteC igual E 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico c = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico identificador = new NodoSintactico("ID", aleft, aright);
    identificador.setValor(a);
    identificador.setNumNodo(contador++);

    NodoSintactico tmp = new NodoSintactico("ADA", aleft, aright);
    tmp.addHijo(identificador);
    tmp.addHijo(b);
    tmp.addHijo(c);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("IDENT",3, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IDENT ::= identificador corcheteA E corcheteC 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
    NodoSintactico identificador = new NodoSintactico("ID", aleft, aright);
    identificador.setValor(a);
    identificador.setNumNodo(contador++);

    NodoSintactico tmp = new NodoSintactico("AD", aleft, aright);
    tmp.addHijo(identificador);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("IDENT",3, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IDENT ::= identificador 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico identificador = new NodoSintactico("ID", aleft, aright);
    identificador.setValor(a);
    identificador.setNumNodo(contador++);

    NodoSintactico tmp = new NodoSintactico("SD", aleft, aright);
    tmp.addHijo(identificador);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("IDENT",3, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // E ::= E suma E 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("+", cleft, cright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // E ::= E resta E 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("-", cleft, cright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // E ::= E division E 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("/", cleft, cright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // E ::= E potencia E 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("pow", cleft, cright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // E ::= E multiplicacion E 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("*", cleft, cright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // E ::= resta E 
            {
              NodoSintactico RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("NEGATIVO", cleft, cright);
    tmp.addHijo(a);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // E ::= parentesisA E parentesisC 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // E ::= not E 
            {
              NodoSintactico RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("!", cleft, cright);
    tmp.addHijo(a);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // E ::= E diferente E 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("!=", cleft, cright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // E ::= E igualigual E 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("==", cleft, cright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // E ::= E menorQue E 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("<", cleft, cright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // E ::= E mayorQue E 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico(">", cleft, cright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // E ::= E menorIgual E 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("<=", cleft, cright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // E ::= E mayorIgual E 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico(">=", cleft, cright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // E ::= E logicoAND E 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("&&", cleft, cright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // E ::= E logicoOR E 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("||", cleft, cright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // E ::= E logicoXOR E 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("^", cleft, cright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // E ::= DATO 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LISTAEXP ::= LISTAEXP coma E 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    a.addHijo(b);
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAEXP",9, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LISTAEXP ::= E 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico entero = new NodoSintactico("DATARR", aleft, aright);
    entero.setNumNodo(contador++);
    entero.addHijo(a);
    RESULT = entero;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAEXP",9, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DATO ::= entero 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico entero = new NodoSintactico("ENTERO", aleft, aright);
    int numero = Integer.parseInt(a);
    entero.setValor(numero);
    entero.setNumNodo(contador++);

    RESULT = entero;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DATO",8, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DATO ::= doble 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico doble = new NodoSintactico("DOBLE", aleft, aright);
    double numero = Double.valueOf(a);
    doble.setValor(numero);
    doble.setNumNodo(contador++);

    RESULT = doble;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DATO",8, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DATO ::= cadena 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico cadena = new NodoSintactico("CADENA", aleft, aright);
    a = a.replace("\"","");
    cadena.setValor(a);
    cadena.setNumNodo(contador++);

    RESULT = cadena;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DATO",8, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DATO ::= caracter 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico caracter = new NodoSintactico("CARACTER", aleft, aright);
    char carac = a.charAt(1);
    caracter.setValor(carac);
    caracter.setNumNodo(contador++);

    RESULT = caracter;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DATO",8, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DATO ::= booleano 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico booleano = new NodoSintactico("BOOLEANO", aleft, aright);
    boolean valor = true;
    a = a.toLowerCase();
    if(a.equals("false")){
        valor = false;
    }
    booleano.setValor(valor);
    booleano.setNumNodo(contador++);

    RESULT = booleano;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DATO",8, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DATO ::= identificador 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico identificador = new NodoSintactico("ID", aleft, aright);
    identificador.setValor(a);
    identificador.setNumNodo(contador++);

    RESULT = identificador;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DATO",8, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DATO ::= identificador corcheteA E corcheteC 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
    NodoSintactico identificador = new NodoSintactico("ID", aleft, aright);
    identificador.setValor(a);
    identificador.addHijo(b);
    identificador.setNumNodo(contador++);

    RESULT = identificador;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DATO",8, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FUNCIONES ::= SI 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",7, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FUNCIONES ::= IMPRIMIR 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",7, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FUNCIONES ::= MIENTRAS 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",7, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FUNCIONES ::= REPETIR 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",7, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SI ::= si parentesisA E parentesisC llaveA llaveC 
            {
              NodoSintactico RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		
    NodoSintactico tmp = new NodoSintactico("SI", bleft, bright);
    tmp.addHijo(a);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SI",4, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SI ::= si parentesisA E parentesisC llaveA llaveC SINO 
            {
              NodoSintactico RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("SI-SINO", cleft, cright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SI",4, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SI ::= si parentesisA E parentesisC llaveA INSTRUCCIONES llaveC 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
    NodoSintactico tmp = new NodoSintactico("SI", aleft, aright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SI",4, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SI ::= si parentesisA E parentesisC llaveA INSTRUCCIONES llaveC SINO 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico c = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("SI-SINO", aleft, aright);
    tmp.addHijo(a);
    tmp.addHijo(b);
    tmp.addHijo(c);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SI",4, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SINO ::= sino SI 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    NodoSintactico tmp = new NodoSintactico("SINO-SI", aleft, aright);
    tmp.addHijo(a);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SINO",5, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SINO ::= sino llaveA llaveC 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		
    NodoSintactico tmp = new NodoSintactico("SINO", aleft, aright);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SINO",5, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SINO ::= sino llaveA INSTRUCCIONES llaveC 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico a = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
    NodoSintactico tmp = new NodoSintactico("SINO", aleft, aright);
    tmp.addHijo(a);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("SINO",5, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // IMPRIMIR ::= imprimir parentesisA E parentesisC puntoComa 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		
    NodoSintactico tmp = new NodoSintactico("IMPRIMIR", aleft, aright);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // MIENTRAS ::= mientras parentesisA E parentesisC llaveA llaveC 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		
    NodoSintactico tmp = new NodoSintactico("MIENTRAS", aleft, aright);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("MIENTRAS",13, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // MIENTRAS ::= mientras parentesisA E parentesisC llaveA INSTRUCCIONES llaveC 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico c = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
    NodoSintactico tmp = new NodoSintactico("MIENTRAS", aleft, aright);
    tmp.addHijo(b);
    tmp.addHijo(c);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("MIENTRAS",13, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // REPETIR ::= repetir parentesisA E parentesisC llaveA llaveC 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)).value;
		
    NodoSintactico tmp = new NodoSintactico("REPETIR", aleft, aright);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("REPETIR",14, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // REPETIR ::= repetir parentesisA E parentesisC llaveA INSTRUCCIONES llaveC 
            {
              NodoSintactico RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).right;
		NodoSintactico b = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		NodoSintactico c = (NodoSintactico)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
    NodoSintactico tmp = new NodoSintactico("REPETIR", aleft, aright);
    tmp.addHijo(b);
    tmp.addHijo(c);
    tmp.setNumNodo(contador++);

    RESULT = tmp;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("REPETIR",14, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analisis_Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analisis_Sintactico$do_action(
    int                        CUP$Analisis_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analisis_Sintactico$parser,
    java.util.Stack            CUP$Analisis_Sintactico$stack,
    int                        CUP$Analisis_Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Analisis_Sintactico$do_action_part00000000(
                               CUP$Analisis_Sintactico$act_num,
                               CUP$Analisis_Sintactico$parser,
                               CUP$Analisis_Sintactico$stack,
                               CUP$Analisis_Sintactico$top);
    }
}

}
