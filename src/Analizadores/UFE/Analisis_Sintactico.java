
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores.UFE;

import java_cup.runtime.Symbol;
import Estructuras.*;
import java.util.ArrayList;
import Modelos.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analisis_Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public Analisis_Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analisis_Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analisis_Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\043\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\006\003\000\002\006\003" +
    "\000\002\004\005\000\002\005\006\000\002\005\004\000" +
    "\002\010\004\000\002\010\002\000\002\007\003\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\004" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\073\000\024\013\007\024\004\035\022\075\021\076" +
    "\015\077\016\100\020\101\010\102\014\001\002\000\022" +
    "\013\007\024\004\075\021\076\015\077\016\100\020\101" +
    "\010\102\014\001\002\000\026\002\ufffe\013\ufffe\024\ufffe" +
    "\035\ufffe\075\ufffe\076\ufffe\077\ufffe\100\ufffe\101\ufffe\102" +
    "\ufffe\001\002\000\026\002\ufffd\013\ufffd\024\ufffd\035\ufffd" +
    "\075\ufffd\076\ufffd\077\ufffd\100\ufffd\101\ufffd\102\ufffd\001" +
    "\002\000\022\013\007\024\004\075\021\076\015\077\016" +
    "\100\020\101\010\102\014\001\002\000\070\002\uffe2\004" +
    "\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\012\uffe2\013\uffe2" +
    "\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022" +
    "\uffe2\023\uffe2\024\uffe2\025\uffe2\033\uffe2\034\uffe2\035\uffe2" +
    "\075\uffe2\076\uffe2\077\uffe2\100\uffe2\101\uffe2\102\uffe2\001" +
    "\002\000\062\002\ufffc\004\036\005\044\006\034\007\035" +
    "\010\031\012\043\013\ufffc\014\045\015\032\016\037\017" +
    "\046\020\033\021\041\022\040\023\042\024\ufffc\035\ufffc" +
    "\075\ufffc\076\ufffc\077\ufffc\100\ufffc\101\ufffc\102\ufffc\001" +
    "\002\000\004\002\072\001\002\000\026\002\000\013\007" +
    "\024\004\035\022\075\021\076\015\077\016\100\020\101" +
    "\010\102\014\001\002\000\070\002\uffe1\004\uffe1\005\uffe1" +
    "\006\uffe1\007\uffe1\010\uffe1\012\uffe1\013\uffe1\014\uffe1\015" +
    "\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1" +
    "\024\uffe1\025\uffe1\033\uffe1\034\uffe1\035\uffe1\075\uffe1\076" +
    "\uffe1\077\uffe1\100\uffe1\101\uffe1\102\uffe1\001\002\000\070" +
    "\002\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\012" +
    "\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4" +
    "\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\033\uffe4\034" +
    "\uffe4\035\uffe4\075\uffe4\076\uffe4\077\uffe4\100\uffe4\101\uffe4" +
    "\102\uffe4\001\002\000\070\002\uffe3\004\uffe3\005\uffe3\006" +
    "\uffe3\007\uffe3\010\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3" +
    "\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024" +
    "\uffe3\025\uffe3\033\uffe3\034\uffe3\035\uffe3\075\uffe3\076\uffe3" +
    "\077\uffe3\100\uffe3\101\uffe3\102\uffe3\001\002\000\070\002" +
    "\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\012\uffe5" +
    "\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021" +
    "\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\033\uffe5\034\uffe5" +
    "\035\uffe5\075\uffe5\076\uffe5\077\uffe5\100\uffe5\101\uffe5\102" +
    "\uffe5\001\002\000\070\002\uffe0\004\uffe0\005\uffe0\006\uffe0" +
    "\007\uffe0\010\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016" +
    "\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0" +
    "\025\uffe0\033\uffe0\034\uffe0\035\uffe0\075\uffe0\076\uffe0\077" +
    "\uffe0\100\uffe0\101\uffe0\102\uffe0\001\002\000\070\002\uffdf" +
    "\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf\012\uffdf\013" +
    "\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf" +
    "\022\uffdf\023\uffdf\024\uffdf\025\uffdf\033\uffdf\034\uffdf\035" +
    "\uffdf\075\uffdf\076\uffdf\077\uffdf\100\uffdf\101\uffdf\102\uffdf" +
    "\001\002\000\004\075\024\001\002\000\006\033\066\034" +
    "\065\001\002\000\010\011\025\033\ufff7\034\ufff7\001\002" +
    "\000\022\013\007\024\004\075\021\076\015\077\016\100" +
    "\020\101\010\102\014\001\002\000\006\033\ufff9\034\ufff9" +
    "\001\002\000\006\033\ufff8\034\ufff8\001\002\000\042\004" +
    "\036\005\044\006\034\007\035\010\031\012\043\014\045" +
    "\015\032\016\037\017\046\020\033\021\041\022\040\023" +
    "\042\033\ufff6\034\ufff6\001\002\000\022\013\007\024\004" +
    "\075\021\076\015\077\016\100\020\101\010\102\014\001" +
    "\002\000\022\013\007\024\004\075\021\076\015\077\016" +
    "\100\020\101\010\102\014\001\002\000\022\013\007\024" +
    "\004\075\021\076\015\077\016\100\020\101\010\102\014" +
    "\001\002\000\022\013\007\024\004\075\021\076\015\077" +
    "\016\100\020\101\010\102\014\001\002\000\022\013\007" +
    "\024\004\075\021\076\015\077\016\100\020\101\010\102" +
    "\014\001\002\000\022\013\007\024\004\075\021\076\015" +
    "\077\016\100\020\101\010\102\014\001\002\000\022\013" +
    "\007\024\004\075\021\076\015\077\016\100\020\101\010" +
    "\102\014\001\002\000\022\013\007\024\004\075\021\076" +
    "\015\077\016\100\020\101\010\102\014\001\002\000\022" +
    "\013\007\024\004\075\021\076\015\077\016\100\020\101" +
    "\010\102\014\001\002\000\022\013\007\024\004\075\021" +
    "\076\015\077\016\100\020\101\010\102\014\001\002\000" +
    "\022\013\007\024\004\075\021\076\015\077\016\100\020" +
    "\101\010\102\014\001\002\000\022\013\007\024\004\075" +
    "\021\076\015\077\016\100\020\101\010\102\014\001\002" +
    "\000\022\013\007\024\004\075\021\076\015\077\016\100" +
    "\020\101\010\102\014\001\002\000\022\013\007\024\004" +
    "\075\021\076\015\077\016\100\020\101\010\102\014\001" +
    "\002\000\070\002\uffea\004\036\005\044\006\034\007\035" +
    "\010\031\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017" +
    "\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea" +
    "\033\uffea\034\uffea\035\uffea\075\uffea\076\uffea\077\uffea\100" +
    "\uffea\101\uffea\102\uffea\001\002\000\070\002\uffee\004\036" +
    "\005\044\006\034\007\035\010\031\012\uffee\013\uffee\014" +
    "\uffee\015\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee" +
    "\023\uffee\024\uffee\025\uffee\033\uffee\034\uffee\035\uffee\075" +
    "\uffee\076\uffee\077\uffee\100\uffee\101\uffee\102\uffee\001\002" +
    "\000\070\002\ufff3\004\ufff3\005\ufff3\006\ufff3\007\ufff3\010" +
    "\031\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3" +
    "\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\033" +
    "\ufff3\034\ufff3\035\ufff3\075\ufff3\076\ufff3\077\ufff3\100\ufff3" +
    "\101\ufff3\102\ufff3\001\002\000\070\002\uffed\004\036\005" +
    "\044\006\034\007\035\010\031\012\uffed\013\uffed\014\uffed" +
    "\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022\uffed\023" +
    "\uffed\024\uffed\025\uffed\033\uffed\034\uffed\035\uffed\075\uffed" +
    "\076\uffed\077\uffed\100\uffed\101\uffed\102\uffed\001\002\000" +
    "\070\002\uffe6\004\036\005\044\006\034\007\035\010\031" +
    "\012\043\013\uffe6\014\045\015\032\016\037\017\046\020" +
    "\033\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\033\uffe6" +
    "\034\uffe6\035\uffe6\075\uffe6\076\uffe6\077\uffe6\100\uffe6\101" +
    "\uffe6\102\uffe6\001\002\000\070\002\uffe8\004\036\005\044" +
    "\006\034\007\035\010\031\012\043\013\uffe8\014\045\015" +
    "\032\016\037\017\046\020\033\021\uffe8\022\uffe8\023\042" +
    "\024\uffe8\025\uffe8\033\uffe8\034\uffe8\035\uffe8\075\uffe8\076" +
    "\uffe8\077\uffe8\100\uffe8\101\uffe8\102\uffe8\001\002\000\070" +
    "\002\uffe7\004\036\005\044\006\034\007\035\010\031\012" +
    "\043\013\uffe7\014\045\015\032\016\037\017\046\020\033" +
    "\021\041\022\uffe7\023\042\024\uffe7\025\uffe7\033\uffe7\034" +
    "\uffe7\035\uffe7\075\uffe7\076\uffe7\077\uffe7\100\uffe7\101\uffe7" +
    "\102\uffe7\001\002\000\070\002\uffeb\004\036\005\044\006" +
    "\034\007\035\010\031\012\uffeb\013\uffeb\014\uffeb\015\uffeb" +
    "\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024" +
    "\uffeb\025\uffeb\033\uffeb\034\uffeb\035\uffeb\075\uffeb\076\uffeb" +
    "\077\uffeb\100\uffeb\101\uffeb\102\uffeb\001\002\000\070\002" +
    "\ufff1\004\ufff1\005\ufff1\006\ufff1\007\ufff1\010\031\012\ufff1" +
    "\013\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1\021" +
    "\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\033\ufff1\034\ufff1" +
    "\035\ufff1\075\ufff1\076\ufff1\077\ufff1\100\ufff1\101\ufff1\102" +
    "\ufff1\001\002\000\070\002\ufff5\004\036\005\044\006\ufff5" +
    "\007\ufff5\010\031\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016" +
    "\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5" +
    "\025\ufff5\033\ufff5\034\ufff5\035\ufff5\075\ufff5\076\ufff5\077" +
    "\ufff5\100\ufff5\101\ufff5\102\ufff5\001\002\000\070\002\ufff4" +
    "\004\036\005\044\006\ufff4\007\ufff4\010\031\012\ufff4\013" +
    "\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4" +
    "\022\ufff4\023\ufff4\024\ufff4\025\ufff4\033\ufff4\034\ufff4\035" +
    "\ufff4\075\ufff4\076\ufff4\077\ufff4\100\ufff4\101\ufff4\102\ufff4" +
    "\001\002\000\070\002\uffe9\004\036\005\044\006\034\007" +
    "\035\010\031\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9" +
    "\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025" +
    "\uffe9\033\uffe9\034\uffe9\035\uffe9\075\uffe9\076\uffe9\077\uffe9" +
    "\100\uffe9\101\uffe9\102\uffe9\001\002\000\070\002\uffec\004" +
    "\036\005\044\006\034\007\035\010\031\012\uffec\013\uffec" +
    "\014\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022" +
    "\uffec\023\uffec\024\uffec\025\uffec\033\uffec\034\uffec\035\uffec" +
    "\075\uffec\076\uffec\077\uffec\100\uffec\101\uffec\102\uffec\001" +
    "\002\000\070\002\ufff2\004\ufff2\005\ufff2\006\ufff2\007\ufff2" +
    "\010\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\017" +
    "\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2" +
    "\033\ufff2\034\ufff2\035\ufff2\075\ufff2\076\ufff2\077\ufff2\100" +
    "\ufff2\101\ufff2\102\ufff2\001\002\000\004\075\067\001\002" +
    "\000\026\002\ufffb\013\ufffb\024\ufffb\035\ufffb\075\ufffb\076" +
    "\ufffb\077\ufffb\100\ufffb\101\ufffb\102\ufffb\001\002\000\010" +
    "\011\025\033\ufff7\034\ufff7\001\002\000\006\033\ufffa\034" +
    "\ufffa\001\002\000\026\002\uffff\013\uffff\024\uffff\035\uffff" +
    "\075\uffff\076\uffff\077\uffff\100\uffff\101\uffff\102\uffff\001" +
    "\002\000\004\002\001\001\002\000\070\002\uffef\004\036" +
    "\005\044\006\034\007\035\010\031\012\043\013\uffef\014" +
    "\045\015\032\016\037\017\046\020\033\021\uffef\022\uffef" +
    "\023\uffef\024\uffef\025\uffef\033\uffef\034\uffef\035\uffef\075" +
    "\uffef\076\uffef\077\uffef\100\uffef\101\uffef\102\uffef\001\002" +
    "\000\040\004\036\005\044\006\034\007\035\010\031\012" +
    "\043\014\045\015\032\016\037\017\046\020\033\021\041" +
    "\022\040\023\042\025\075\001\002\000\070\002\ufff0\004" +
    "\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\012\ufff0\013\ufff0" +
    "\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022" +
    "\ufff0\023\ufff0\024\ufff0\025\ufff0\033\ufff0\034\ufff0\035\ufff0" +
    "\075\ufff0\076\ufff0\077\ufff0\100\ufff0\101\ufff0\102\ufff0\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\073\000\016\002\011\003\012\004\005\006\004\012" +
    "\016\013\010\001\001\000\006\012\016\013\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\016\013" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\004\005\006\070\012\016\013\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\022\001\001\000\002\001\001\000\004\010\025" +
    "\001\001\000\010\007\026\012\016\013\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\016\013\063\001\001\000\006\012\016\013\062\001" +
    "\001\000\006\012\016\013\061\001\001\000\006\012\016" +
    "\013\060\001\001\000\006\012\016\013\057\001\001\000" +
    "\006\012\016\013\056\001\001\000\006\012\016\013\055" +
    "\001\001\000\006\012\016\013\054\001\001\000\006\012" +
    "\016\013\053\001\001\000\006\012\016\013\052\001\001" +
    "\000\006\012\016\013\051\001\001\000\006\012\016\013" +
    "\050\001\001\000\006\012\016\013\047\001\001\000\006" +
    "\012\016\013\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analisis_Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analisis_Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analisis_Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Arbol variables = new Arbol();
    public Cola TodosLosErrores = new Cola();

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s){
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        System.out.println("ERROR SINTACTICO");
        Errores error = new Errores(lexema,fila,columna,"Token " + lexema + " No esperado", "Sintactico");
        TodosLosErrores.insertar(error);
    }

    //Metodo al que se llama en el momento en el que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s){

    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analisis_Sintactico$actions {


    

  private final Analisis_Sintactico parser;

  /** Constructor */
  CUP$Analisis_Sintactico$actions(Analisis_Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analisis_Sintactico$do_action_part00000000(
    int                        CUP$Analisis_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analisis_Sintactico$parser,
    java.util.Stack            CUP$Analisis_Sintactico$stack,
    int                        CUP$Analisis_Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analisis_Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Analisis_Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analisis_Sintactico$parser.done_parsing();
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= INICIO 
            {
              Object RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= INICIO OPCIONES 
            {
              Object RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= OPCIONES 
            {
              Object RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // OPCIONES ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPCIONES",4, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // OPCIONES ::= OPERACION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    if(a != null){
        System.out.println(a);
    } else {
        System.out.println("ERROR: error aritmetico");
    }

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPCIONES",4, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARACION ::= var ASIGNACION puntoComa 
            {
              Object RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ASIGNACION ::= ASIGNACION coma identificador IDENT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    if(b != null){
        String nombre = a;
        nombre = nombre.toLowerCase();
        Variable var = new Variable(nombre, b);
        if(!variables.insertar(var).equals("Ingresada")){
            System.out.println("ERROR: Variable duplicada");
        }
    }else{
        String nombre = a;
        nombre = nombre.toLowerCase();
        Variable var = new Variable(nombre);
        if(!variables.insertar(var).equals("Ingresada")){
            System.out.println("ERROR: Variable duplicada");
        }
    }

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",3, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ASIGNACION ::= identificador IDENT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    if(b != null){
        String nombre = a;
        nombre = nombre.toLowerCase();
        Variable var = new Variable(nombre, b);
        if(!variables.insertar(var).equals("Ingresada")){
            System.out.println("ERROR: Variable duplicada");
        }
    }else{
        String nombre = a;
        nombre = nombre.toLowerCase();
        Variable var = new Variable(nombre);
        if(!variables.insertar(var).equals("Ingresada")){
            System.out.println("ERROR: Variable duplicada");
        }
    }

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",3, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // IDENT ::= igual VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("IDENT",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // IDENT ::= 
            {
              Object RESULT =null;
		 RESULT = ""; 
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("IDENT",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VALOR ::= OPERACION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",5, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // OPERACION ::= OPERACION suma OPERACION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    if(a != null && b != null){
        if(a instanceof String || b instanceof String){
            String valor1 = String.valueOf(a);
            String valor2 = String.valueOf(b);
            String resultado = valor1 + valor2;
            RESULT = resultado;
        }else if((a instanceof java.lang.Double && b instanceof Integer) || (a instanceof Integer && b instanceof java.lang.Double) || (a instanceof java.lang.Double && b instanceof java.lang.Character) ||(a instanceof java.lang.Character && b instanceof java.lang.Double) || (a instanceof java.lang.Double && b instanceof java.lang.Double)){
            double resultado = Double.valueOf(String.valueOf(a)) + Double.valueOf(String.valueOf(b));
            RESULT = resultado;
        }else if(a instanceof java.lang.Character && b instanceof Integer){
            char uno = (char) a;
            int resultado = (int) uno + (int) b;
            RESULT = resultado;
        }else if(a instanceof Integer && b instanceof java.lang.Character){
            char dos = (char) b;
            int resultado = (int) a + (int) dos;
            RESULT = resultado;
        }else if(a instanceof java.lang.Character && b instanceof java.lang.Character){
            char uno = (char) a;
            char dos = (char) b;
            int resultado = (int) uno + (int) dos;
            RESULT = resultado;
        }else if(a instanceof Integer && b instanceof Integer){
            RESULT = (int) a + (int) b;
        }else{
            RESULT = null;
        }
    } else {
        RESULT = null;
    }

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",9, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // OPERACION ::= OPERACION resta OPERACION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    if(a != null && b != null){
        if((a instanceof java.lang.Double && b instanceof Integer) || (a instanceof Integer && b instanceof java.lang.Double) || (a instanceof java.lang.Double && b instanceof java.lang.Character) ||(a instanceof java.lang.Character && b instanceof java.lang.Double) || (a instanceof java.lang.Double && b instanceof java.lang.Double)){
            double resultado = Double.valueOf(String.valueOf(a)) - Double.valueOf(String.valueOf(b));
            RESULT = resultado;
        }else if(a instanceof java.lang.Character && b instanceof Integer){
            char uno = (char) a;
            int resultado = (int) uno - (int) b;
            RESULT = resultado;
        }else if(a instanceof Integer && b instanceof java.lang.Character){
            char dos = (char) b;
            int resultado = (int) a - (int) dos;
            RESULT = resultado;
        }else if(a instanceof java.lang.Character && b instanceof java.lang.Character){
            char uno = (char) a;
            char dos = (char) b;
            int resultado = (int) uno - (int) dos;
            RESULT = resultado;
        }else if(a instanceof Integer && b instanceof Integer){
            RESULT = (int) a - (int) b;
        }else{
            RESULT = null;
        }
    } else {
        RESULT = null;
    }

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",9, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // OPERACION ::= OPERACION division OPERACION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    if(a != null && b != null){
        boolean comprobador = true;
        if(b instanceof Double){
            double n = (double) b;
            if(n == 0.0){
                comprobador = false;
            }
        }
        if(b instanceof Integer){
            int n = (int) b;
            if(n == 0){
                comprobador = false;
            }
        }
        if(b instanceof java.lang.Character){
            int numero = (char) b;
            b = numero;
        }
        if(a instanceof java.lang.Character){
            int numero = (char) a;
            a = numero;
        }
        if(comprobador){
            if((a instanceof java.lang.Double && b instanceof Integer) || (a instanceof Integer && b instanceof java.lang.Double) || (a instanceof java.lang.Double && b instanceof java.lang.Character) ||(a instanceof java.lang.Character && b instanceof java.lang.Double) || (a instanceof java.lang.Double && b instanceof java.lang.Double)){
                double resultado = Double.valueOf(String.valueOf(a)) / Double.valueOf(String.valueOf(b));
                RESULT = resultado;
            }else if(a instanceof java.lang.Character && b instanceof Integer){
                char uno = (char) a;
                double resultado = Double.valueOf(String.valueOf(uno)) / Double.valueOf(String.valueOf(b));
                RESULT = resultado;
            }else if(a instanceof Integer && b instanceof java.lang.Character){
                char dos = (char) b;
                double resultado = Double.valueOf(String.valueOf(a)) / Double.valueOf(String.valueOf(dos));
                RESULT = resultado;
            }else if(a instanceof java.lang.Character && b instanceof java.lang.Character){
                char uno = (char) a;
                char dos = (char) b;
                double resultado = Double.valueOf(String.valueOf(uno)) / Double.valueOf(String.valueOf(dos));
                RESULT = resultado;
            }else if(a instanceof Integer && b instanceof Integer){
                double resultado = Double.valueOf(String.valueOf(a)) / Double.valueOf(String.valueOf(b));
                RESULT = resultado;
            }else{
                RESULT = null;
            }
        } else {
            RESULT = null;
        }
    } else {
        RESULT = null;
    }

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",9, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // OPERACION ::= OPERACION potencia OPERACION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    if(a != null && b != null){
        if((a instanceof java.lang.Double && b instanceof Integer) || (a instanceof Integer && b instanceof java.lang.Double) || (a instanceof java.lang.Double && b instanceof java.lang.Character) ||(a instanceof java.lang.Character && b instanceof java.lang.Double) || (a instanceof java.lang.Double && b instanceof java.lang.Double)){
            double base = Double.valueOf(String.valueOf(a));
            double exponente = Double.valueOf(String.valueOf(b));
            double resultado = Double.valueOf(String.valueOf((int) Math.pow(base, exponente)));
            RESULT = resultado;
        }else if(a instanceof java.lang.Character && b instanceof Integer){
            char uno = (char) a;
            int numero1 = (int) uno;
            int numero2 = (int) b;
            double base = Double.valueOf(String.valueOf(numero1));
            double exponente = Double.valueOf(String.valueOf(numero2));
            double resultado = Double.valueOf(String.valueOf((int) Math.pow(base, exponente)));
            RESULT = resultado;
        }else if(a instanceof Integer && b instanceof java.lang.Character){
            char dos = (char) b;
            int numero1 = (int) a;
            int numero2 = (int) dos;
            double base = Double.valueOf(String.valueOf(numero1));
            double exponente = Double.valueOf(String.valueOf(numero2));
            double resultado = Double.valueOf(String.valueOf((int) Math.pow(base, exponente)));
            RESULT = resultado;
        }else if(a instanceof java.lang.Character && b instanceof java.lang.Character){
            char uno = (char) a;
            char dos = (char) b;
            int numero1 = (int) uno;
            int numero2 = (int) dos;
            double base = Double.valueOf(String.valueOf(numero1));
            double exponente = Double.valueOf(String.valueOf(numero2));
            double resultado = Double.valueOf(String.valueOf((int) Math.pow(base, exponente)));
            RESULT = resultado;
        }else if(a instanceof Integer && b instanceof Integer){
            int base = (int) a;
            int exponente = (int) b;
            int resultado = (int) Math.pow(base, exponente);
            RESULT = resultado;
        }else{
            RESULT = null;
        }
    } else {
        RESULT = null;
    }

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",9, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // OPERACION ::= OPERACION multiplicacion OPERACION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    if(a != null && b != null){
        if((a instanceof java.lang.Double && b instanceof Integer) || (a instanceof Integer && b instanceof java.lang.Double) || (a instanceof java.lang.Double && b instanceof java.lang.Character) ||(a instanceof java.lang.Character && b instanceof java.lang.Double) || (a instanceof java.lang.Double && b instanceof java.lang.Double)){
            double resultado = Double.valueOf(String.valueOf(a)) * Double.valueOf(String.valueOf(b));
            RESULT = resultado;
        }else if(a instanceof java.lang.Character && b instanceof Integer){
            char uno = (char) a;
            int resultado = (int) uno * (int) b;
            RESULT = resultado;
        }else if(a instanceof Integer && b instanceof java.lang.Character){
            char dos = (char) b;
            int resultado = (int) a * (int) dos;
            RESULT = resultado;
        }else if(a instanceof java.lang.Character && b instanceof java.lang.Character){
            char uno = (char) a;
            char dos = (char) b;
            int resultado = (int) uno * (int) dos;
            RESULT = resultado;
        }else if(a instanceof Integer && b instanceof Integer){
            int resultado = (int) a * (int) b;
            RESULT = resultado;
        }else{
            RESULT = null;
        }
    } else {
        RESULT = null;
    }

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",9, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // OPERACION ::= parentesisA OPERACION parentesisC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		
    RESULT = a;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",9, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // OPERACION ::= not OPERACION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    if(a instanceof Boolean){
        boolean resultado = (boolean) a;
        RESULT = !resultado;
    } else {
        RESULT = null;
    }

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",9, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // OPERACION ::= OPERACION diferente OPERACION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    if(a instanceof Integer && b instanceof Integer){
        int numero1 = (int) a;
        int numero2 = (int) b;
        RESULT = numero1 != numero2;
    } else if(a instanceof Integer && b instanceof Double){
        int numero1 = (int) a;
        double numero2 = (double) b;
        RESULT = numero1 != numero2;
    } else if(a instanceof Double && b instanceof Integer){
        double numero1 = (double) a;
        int numero2 = (int) b;
        RESULT = numero1 != numero2;
    } else if(a instanceof Double && b instanceof Double){
        double numero1 = (double) a;
        double numero2 = (double) b;
        RESULT = numero1 != numero2;
    } else if(a instanceof Integer && b instanceof Character){
        int numero1 = (int) a;
        char numero2 = (char) b;
        RESULT = numero1 != numero2;
    } else if(a instanceof Character && b instanceof Integer){
        char numero1 = (char) a;
        int numero2 = (int) b;
        RESULT = numero1 != numero2;
    } else if(a instanceof Character && b instanceof Double){
        char numero1 = (char) a;
        double numero2 = (double) b;
        RESULT = numero1 != numero2;
    } else if(a instanceof Double && b instanceof Character){
        double numero1 = (double) a;
        char numero2 = (char) a;
        RESULT = numero1 != numero2;
    } else if(a instanceof Character && b instanceof Character){
        char numero1 = (char) a;
        char numero2 = (char) a;
        RESULT = numero1 != numero2;
    } else if(a instanceof String && b instanceof String){
        String numero1 = (String) a;
        String numero2 = (String) b;
        RESULT = !numero1.equals(numero2);
    }

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",9, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // OPERACION ::= OPERACION igualigual OPERACION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    if(a instanceof Integer && b instanceof Integer){
        int numero1 = (int) a;
        int numero2 = (int) b;
        RESULT = numero1 == numero2;
    } else if(a instanceof Integer && b instanceof Double){
        int numero1 = (int) a;
        double numero2 = (double) b;
        RESULT = numero1 == numero2;
    } else if(a instanceof Double && b instanceof Integer){
        double numero1 = (double) a;
        int numero2 = (int) b;
        RESULT = numero1 == numero2;
    } else if(a instanceof Double && b instanceof Double){
        double numero1 = (double) a;
        double numero2 = (double) b;
        RESULT = numero1 == numero2;
    } else if(a instanceof Integer && b instanceof Character){
        int numero1 = (int) a;
        char numero2 = (char) b;
        RESULT = numero1 == numero2;
    } else if(a instanceof Character && b instanceof Integer){
        char numero1 = (char) a;
        int numero2 = (int) b;
        RESULT = numero1 == numero2;
    } else if(a instanceof Character && b instanceof Double){
        char numero1 = (char) a;
        double numero2 = (double) b;
        RESULT = numero1 == numero2;
    } else if(a instanceof Double && b instanceof Character){
        double numero1 = (double) a;
        char numero2 = (char) a;
        RESULT = numero1 == numero2;
    } else if(a instanceof Character && b instanceof Character){
        char numero1 = (char) a;
        char numero2 = (char) a;
        RESULT = numero1 == numero2;
    } else if(a instanceof String && b instanceof String){
        String numero1 = (String) a;
        String numero2 = (String) b;
        RESULT = numero1.equals(numero2);
    }

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",9, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // OPERACION ::= OPERACION menorQue OPERACION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    if(a instanceof Integer && b instanceof Integer){
        int numero1 = (int) a;
        int numero2 = (int) b;
        RESULT = numero1 < numero2;
    } else if(a instanceof Integer && b instanceof Double){
        int numero1 = (int) a;
        double numero2 = (double) b;
        RESULT = numero1 < numero2;
    } else if(a instanceof Double && b instanceof Integer){
        double numero1 = (double) a;
        int numero2 = (int) b;
        RESULT = numero1 < numero2;
    } else if(a instanceof Double && b instanceof Double){
        double numero1 = (double) a;
        double numero2 = (double) b;
        RESULT = numero1 < numero2;
    } else if(a instanceof Integer && b instanceof Character){
        int numero1 = (int) a;
        char numero2 = (char) b;
        RESULT = numero1 < numero2;
    } else if(a instanceof Character && b instanceof Integer){
        char numero1 = (char) a;
        int numero2 = (int) b;
        RESULT = numero1 < numero2;
    } else if(a instanceof Character && b instanceof Double){
        char numero1 = (char) a;
        double numero2 = (double) b;
        RESULT = numero1 < numero2;
    } else if(a instanceof Double && b instanceof Character){
        double numero1 = (double) a;
        char numero2 = (char) a;
        RESULT = numero1 < numero2;
    } else if(a instanceof Character && b instanceof Character){
        char numero1 = (char) a;
        char numero2 = (char) a;
        RESULT = numero1 < numero2;
    }

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",9, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // OPERACION ::= OPERACION mayorQue OPERACION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    if(a instanceof Integer && b instanceof Integer){
        int numero1 = (int) a;
        int numero2 = (int) b;
        RESULT = numero1 > numero2;
    } else if(a instanceof Integer && b instanceof Double){
        int numero1 = (int) a;
        double numero2 = (double) b;
        RESULT = numero1 > numero2;
    } else if(a instanceof Double && b instanceof Integer){
        double numero1 = (double) a;
        int numero2 = (int) b;
        RESULT = numero1 > numero2;
    } else if(a instanceof Double && b instanceof Double){
        double numero1 = (double) a;
        double numero2 = (double) b;
        RESULT = numero1 > numero2;
    } else if(a instanceof Integer && b instanceof Character){
        int numero1 = (int) a;
        char numero2 = (char) b;
        RESULT = numero1 > numero2;
    } else if(a instanceof Character && b instanceof Integer){
        char numero1 = (char) a;
        int numero2 = (int) b;
        RESULT = numero1 > numero2;
    } else if(a instanceof Character && b instanceof Double){
        char numero1 = (char) a;
        double numero2 = (double) b;
        RESULT = numero1 > numero2;
    } else if(a instanceof Double && b instanceof Character){
        double numero1 = (double) a;
        char numero2 = (char) a;
        RESULT = numero1 > numero2;
    } else if(a instanceof Character && b instanceof Character){
        char numero1 = (char) a;
        char numero2 = (char) a;
        RESULT = numero1 > numero2;
    }

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",9, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OPERACION ::= OPERACION menorIgual OPERACION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    if(a instanceof Integer && b instanceof Integer){
        int numero1 = (int) a;
        int numero2 = (int) b;
        RESULT = numero1 <= numero2;
    } else if(a instanceof Integer && b instanceof Double){
        int numero1 = (int) a;
        double numero2 = (double) b;
        RESULT = numero1 <= numero2;
    } else if(a instanceof Double && b instanceof Integer){
        double numero1 = (double) a;
        int numero2 = (int) b;
        RESULT = numero1 <= numero2;
    } else if(a instanceof Double && b instanceof Double){
        double numero1 = (double) a;
        double numero2 = (double) b;
        RESULT = numero1 <= numero2;
    } else if(a instanceof Integer && b instanceof Character){
        int numero1 = (int) a;
        char numero2 = (char) b;
        RESULT = numero1 <= numero2;
    } else if(a instanceof Character && b instanceof Integer){
        char numero1 = (char) a;
        int numero2 = (int) b;
        RESULT = numero1 <= numero2;
    } else if(a instanceof Character && b instanceof Double){
        char numero1 = (char) a;
        double numero2 = (double) b;
        RESULT = numero1 <= numero2;
    } else if(a instanceof Double && b instanceof Character){
        double numero1 = (double) a;
        char numero2 = (char) a;
        RESULT = numero1 <= numero2;
    } else if(a instanceof Character && b instanceof Character){
        char numero1 = (char) a;
        char numero2 = (char) a;
        RESULT = numero1 <= numero2;
    }

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",9, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OPERACION ::= OPERACION mayorIgual OPERACION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    if(a instanceof Integer && b instanceof Integer){
        int numero1 = (int) a;
        int numero2 = (int) b;
        RESULT = numero1 >= numero2;
    } else if(a instanceof Integer && b instanceof Double){
        int numero1 = (int) a;
        double numero2 = (double) b;
        RESULT = numero1 >= numero2;
    } else if(a instanceof Double && b instanceof Integer){
        double numero1 = (double) a;
        int numero2 = (int) b;
        RESULT = numero1 >= numero2;
    } else if(a instanceof Double && b instanceof Double){
        double numero1 = (double) a;
        double numero2 = (double) b;
        RESULT = numero1 >= numero2;
    } else if(a instanceof Integer && b instanceof Character){
        int numero1 = (int) a;
        char numero2 = (char) b;
        RESULT = numero1 >= numero2;
    } else if(a instanceof Character && b instanceof Integer){
        char numero1 = (char) a;
        int numero2 = (int) b;
        RESULT = numero1 >= numero2;
    } else if(a instanceof Character && b instanceof Double){
        char numero1 = (char) a;
        double numero2 = (double) b;
        RESULT = numero1 >= numero2;
    } else if(a instanceof Double && b instanceof Character){
        double numero1 = (double) a;
        char numero2 = (char) a;
        RESULT = numero1 >= numero2;
    } else if(a instanceof Character && b instanceof Character){
        char numero1 = (char) a;
        char numero2 = (char) a;
        RESULT = numero1 >= numero2;
    }

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",9, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OPERACION ::= OPERACION logicoAND OPERACION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    if(a instanceof Boolean && b instanceof Boolean){
        boolean valor1 = (boolean) a;
        boolean valor2 = (boolean) b;
        RESULT = valor1 && valor2;
    }

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",9, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OPERACION ::= OPERACION logicoOR OPERACION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    if(a instanceof Boolean && b instanceof Boolean){
        boolean valor1 = (boolean) a;
        boolean valor2 = (boolean) b;
        RESULT = valor1 || valor2;
    }

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",9, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OPERACION ::= OPERACION logicoXOR OPERACION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    if(a instanceof Boolean && b instanceof Boolean){
        boolean valor1 = (boolean) a;
        boolean valor2 = (boolean) b;
        RESULT = valor1^valor2;
    }

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",9, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OPERACION ::= DATO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    if(a == null){
        RESULT = null;
    }else{
        RESULT = a;
    }

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",9, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DATO ::= entero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    int retorno = Integer.parseInt(String.valueOf(a));
    RESULT = retorno;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DATO",8, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DATO ::= doble 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    double retorno = Double.parseDouble(String.valueOf(a));
    RESULT = retorno;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DATO",8, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DATO ::= cadena 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    String retorno = String.valueOf(a);
    retorno = retorno.replace("\"", "");
    RESULT = retorno;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DATO",8, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DATO ::= caracter 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    String valor = String.valueOf(a);
    char retorno = valor.charAt(1);
    RESULT = retorno;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DATO",8, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DATO ::= booleano 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		
    String dato = String.valueOf(a);
    boolean retorno = false;
    if(dato.equals("true")){
        retorno = true;
    }
    RESULT = retorno;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DATO",8, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DATO ::= identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		 
    String nombre = a.toLowerCase();
    if(variables.getRaiz() != null){
        Variable var = variables.obtenerValor(nombre, variables.getRaiz());
        Object valor = var.getContenido();
        if(valor != null){
            RESULT = valor;
     }else{
            System.out.println("ERROR: Variable no inicializada");
            RESULT = null;
        }
    }else{
        System.out.println("ERROR: Variable no inicializada");
        RESULT = null;
    }

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("DATO",8, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analisis_Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analisis_Sintactico$do_action(
    int                        CUP$Analisis_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analisis_Sintactico$parser,
    java.util.Stack            CUP$Analisis_Sintactico$stack,
    int                        CUP$Analisis_Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Analisis_Sintactico$do_action_part00000000(
                               CUP$Analisis_Sintactico$act_num,
                               CUP$Analisis_Sintactico$parser,
                               CUP$Analisis_Sintactico$stack,
                               CUP$Analisis_Sintactico$top);
    }
}

}
