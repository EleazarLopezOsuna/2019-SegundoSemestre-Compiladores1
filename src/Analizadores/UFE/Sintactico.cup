/*--------- 1ra Area: Codigo de Usuario ---------*/

//--------> Paquetes e importaciones
package Analizadores.UFE;
import java_cup.runtime.Symbol;
import Estructuras.*;
import Nodos.NodoSintactico;
import Modelos.*;

//--------> Codigo para el parser, variables, metodos
parser code
{:
    public Arbol variables = new Arbol();
    public Cola TodosLosErrores = new Cola();
    public NodoSintactico padre;
    public int contador = 1;
    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s){
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        System.out.println("ERROR SINTACTICO");
        Errores error = new Errores(lexema,fila,columna,"Token " + lexema + " No esperado", "Sintactico");
        TodosLosErrores.insertar(error);
    }

    //Metodo al que se llama en el momento en el que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s){

    }
:}

//--------> Codigo para las acciones gramaticales
action code
{:
    
:}

/*--------- 2da Area: Declaraciones ---------*/

//--------> Declaracion de terminales
terminal multiplicacion, division, resta, suma, potencia, igual, igualigual, not;
terminal diferente, menorQue, mayorQue, menorIgual, mayorIgual;
terminal logicoAND, logicoOR, logicoXOR;
terminal parentesisA, parentesisC, llaveA, llaveC, corcheteA, corcheteC;
terminal dosPuntos, puntoComa, coma;
terminal var, component, id, x, y;
terminal height, width, color, border, className, render;
terminal retorno, panel, text, textField, button, list;
terminal element, item, defecto, spinner, min, max;
terminal image, fuente, importar, from, si;
terminal sino, repetir, imprimir, mientras;
terminal String identificador, cadena, caracter, entero, doble, booleano;

//--------> Declaracion de no terminales
non terminal INICIO;
non terminal NodoSintactico DECLARACION, ASIGNACION, IDENT, SI, SINO, E;
non terminal NodoSintactico FUNCIONES, DATO, LISTAEXP, INSTRUCCIONES, OPCIONES;

//----> precedencia de menor a mayor
precedence left logicoOR;
precedence left logicoAND;
precedence left logicoXOR;
precedence left not;
precedence left igualigual, diferente, mayorQue, menorIgual, menorQue, mayorIgual;
precedence left suma, resta;
precedence left multiplicacion, division;
precedence left potencia;
precedence left parentesisA;

start with INICIO;

/*--------- 3ra Area: Reglas Semanticas ---------*/

INICIO ::= INSTRUCCIONES:inicio
{:
    NodoSintactico tmp = new NodoSintactico("INICIO");
    tmp.setNumNodo(contador++);
    tmp.addHijo(inicio);
    padre = tmp;
:}
    ;
INSTRUCCIONES ::= INSTRUCCIONES:a OPCIONES:b
{:
    NodoSintactico tmp = new NodoSintactico("OPCIONES");
    tmp.setNumNodo(contador++);
    tmp.addHijo(a);
    tmp.addHijo(b);
    RESULT = tmp;
:}
    | OPCIONES:a
{:
    NodoSintactico tmp = new NodoSintactico("OPCION");
    tmp.setNumNodo(contador++);
    tmp.addHijo(a);
    RESULT = tmp;
:}
    ;
OPCIONES ::= DECLARACION:a
{:
    NodoSintactico tmp = new NodoSintactico("DECLARACION");
    tmp.setNumNodo(contador++);
    tmp.addHijo(a);
    RESULT = tmp;
:}
    | E:a
{:
    NodoSintactico tmp = new NodoSintactico("E");
    tmp.setNumNodo(contador++);
    tmp.addHijo(a);
    RESULT = tmp;
:}
    | FUNCIONES:a
{:
    NodoSintactico tmp = new NodoSintactico("FUNCION");
    tmp.setNumNodo(contador++);
    tmp.addHijo(a);
    RESULT = tmp;
:}
    ;
DECLARACION ::= var ASIGNACION:a puntoComa
{:
    NodoSintactico var = new NodoSintactico("var");
    var.setValor("var");
    var.setNumNodo(contador++);

    NodoSintactico puntoComa = new NodoSintactico(";");
    puntoComa.setNumNodo(contador++);
    
    NodoSintactico tmp = new NodoSintactico("DECLARACION");
    tmp.addHijo(var);
    tmp.addHijo(a);
    tmp.addHijo(puntoComa);
    tmp.setNumNodo(contador++);

    RESULT = tmp;
:}
    ;
ASIGNACION ::= ASIGNACION:a coma IDENT:b
{:
    NodoSintactico coma = new NodoSintactico("coma");
    coma.setValor(",");
    coma.setNumNodo(contador++);

    NodoSintactico tmp = new NodoSintactico("ASIGNACIONES");
    tmp.addHijo(coma);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;
:}
    | IDENT:a
{:
    NodoSintactico tmp = new NodoSintactico("ASIGNACION");
    tmp.addHijo(a);
    tmp.setNumNodo(contador++);
    
    RESULT = tmp;
:}
    ;
IDENT ::= identificador:a igual E:b
{:
    NodoSintactico identificador = new NodoSintactico("identificador");
    identificador.setValor(a);
    identificador.setNumNodo(contador++);
    
    NodoSintactico igual = new NodoSintactico("igual");
    igual.setValor("=");
    igual.setNumNodo(contador++);

    NodoSintactico tmp = new NodoSintactico("IDENT");
    tmp.addHijo(identificador);
    tmp.addHijo(igual);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;
:}
    | identificador:a corcheteA E:b corcheteC igual E:c
{:
    NodoSintactico identificador = new NodoSintactico("identificador");
    identificador.setValor(a);
    identificador.setNumNodo(contador++);

    NodoSintactico corcheteA = new NodoSintactico("corcheteA");
    corcheteA.setValor("[");
    corcheteA.setNumNodo(contador++);

    NodoSintactico corcheteC = new NodoSintactico("corcheteC");
    corcheteC.setValor("]");
    corcheteC.setNumNodo(contador++);
    
    NodoSintactico igual = new NodoSintactico("igual");
    igual.setValor("=");
    igual.setNumNodo(contador++);

    NodoSintactico tmp = new NodoSintactico("IDENT");
    tmp.addHijo(identificador);
    tmp.addHijo(corcheteA);
    tmp.addHijo(b);
    tmp.addHijo(corcheteC);
    tmp.addHijo(igual);
    tmp.addHijo(c);
    tmp.setNumNodo(contador++);

    RESULT = tmp;
:}
    | identificador:a corcheteA E:b corcheteC
{:
    NodoSintactico identificador = new NodoSintactico("identificador");
    identificador.setValor(a);
    identificador.setNumNodo(contador++);

    NodoSintactico corcheteA = new NodoSintactico("corcheteA");
    corcheteA.setValor("[");
    corcheteA.setNumNodo(contador++);

    NodoSintactico corcheteC = new NodoSintactico("corcheteC");
    corcheteC.setValor("]");
    corcheteC.setNumNodo(contador++);
    NodoSintactico tmp = new NodoSintactico("IDENT");
    tmp.addHijo(identificador);
    tmp.addHijo(corcheteA);
    tmp.addHijo(b);
    tmp.addHijo(corcheteC);
    tmp.setNumNodo(contador++);

    RESULT = tmp;
:}
    | identificador:a
{:
    NodoSintactico identificador = new NodoSintactico("identificador");
    identificador.setValor(a);
    identificador.setNumNodo(contador++);

    NodoSintactico tmp = new NodoSintactico("IDENT");
    tmp.addHijo(identificador);
    tmp.setNumNodo(contador++);

    RESULT = tmp;
:}
    ;
E ::= E:a suma E:b
{:
    NodoSintactico suma = new NodoSintactico("suma");
    suma.setValor("+");
    suma.setNumNodo(contador++);

    NodoSintactico tmp = new NodoSintactico("E");
    tmp.addHijo(a);
    tmp.addHijo(suma);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;
:}
    | E:a resta E:b
{:
    NodoSintactico resta = new NodoSintactico("resta");
    resta.setValor("-");
    resta.setNumNodo(contador++);

    NodoSintactico tmp = new NodoSintactico("E");
    tmp.addHijo(a);
    tmp.addHijo(resta);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;
:}
    | E:a division E:b
{:
    NodoSintactico division = new NodoSintactico("division");
    division.setValor("/");
    division.setNumNodo(contador++);

    NodoSintactico tmp = new NodoSintactico("E");
    tmp.addHijo(a);
    tmp.addHijo(division);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;
:}
    | E:a potencia E:b
{:
    NodoSintactico potencia = new NodoSintactico("potencia");
    potencia.setValor("pow");
    potencia.setNumNodo(contador++);

    NodoSintactico tmp = new NodoSintactico("E");
    tmp.addHijo(a);
    tmp.addHijo(potencia);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;
:}
    | E:a multiplicacion E:b
{:
    NodoSintactico multiplicacion = new NodoSintactico("multiplicacion");
    multiplicacion.setValor("*");
    multiplicacion.setNumNodo(contador++);

    NodoSintactico tmp = new NodoSintactico("E");
    tmp.addHijo(a);
    tmp.addHijo(multiplicacion);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;
:}
    | resta E:a
{:
    NodoSintactico resta = new NodoSintactico("resta");
    resta.setValor("-");
    resta.setNumNodo(contador++);

    NodoSintactico tmp = new NodoSintactico("E");
    tmp.addHijo(resta);
    tmp.addHijo(a);
    tmp.setNumNodo(contador++);

    RESULT = tmp;
:}
    | parentesisA E:a parentesisC
{:
    NodoSintactico parentesisA = new NodoSintactico("parentesisA");
    parentesisA.setValor("(");
    parentesisA.setNumNodo(contador++);
    
    NodoSintactico parentesisC = new NodoSintactico("parentesisC");
    parentesisC.setValor(")");
    parentesisC.setNumNodo(contador++);

    NodoSintactico tmp = new NodoSintactico("E");
    tmp.addHijo(parentesisA);
    tmp.addHijo(a);
    tmp.addHijo(parentesisC);
    tmp.setNumNodo(contador++);

    RESULT = tmp;
:}
    | not E:a
{:
    NodoSintactico not = new NodoSintactico("not");
    not.setValor("!");
    not.setNumNodo(contador++);

    NodoSintactico tmp = new NodoSintactico("E");
    tmp.addHijo(not);
    tmp.addHijo(a);
    tmp.setNumNodo(contador++);

    RESULT = tmp;
:}
    | E:a diferente E:b
{:
    NodoSintactico diferente = new NodoSintactico("diferente");
    diferente.setValor("!=");
    diferente.setNumNodo(contador++);

    NodoSintactico tmp = new NodoSintactico("E");
    tmp.addHijo(a);
    tmp.addHijo(diferente);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;
:}
    | E:a igualigual E:b
{:
    NodoSintactico igualigual = new NodoSintactico("igualigual");
    igualigual.setValor("==");
    igualigual.setNumNodo(contador++);

    NodoSintactico tmp = new NodoSintactico("E");
    tmp.addHijo(a);
    tmp.addHijo(igualigual);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;
:}
    | E:a menorQue E:b
{:
    NodoSintactico menorQue = new NodoSintactico("menorQue");
    menorQue.setValor("<");
    menorQue.setNumNodo(contador++);

    NodoSintactico tmp = new NodoSintactico("E");
    tmp.addHijo(a);
    tmp.addHijo(menorQue);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;
:}
    | E:a mayorQue E:b
{:
    NodoSintactico mayorQue = new NodoSintactico("mayorQue");
    mayorQue.setValor(">");
    mayorQue.setNumNodo(contador++);

    NodoSintactico tmp = new NodoSintactico("E");
    tmp.addHijo(a);
    tmp.addHijo(mayorQue);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;
:}
    | E:a menorIgual E:b
{:
    NodoSintactico menorIgual = new NodoSintactico("menorIgual");
    menorIgual.setValor("<=");
    menorIgual.setNumNodo(contador++);

    NodoSintactico tmp = new NodoSintactico("E");
    tmp.addHijo(a);
    tmp.addHijo(menorIgual);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;
:}
    | E:a mayorIgual E:b
{:
    NodoSintactico mayorIgual = new NodoSintactico("mayorIgual");
    mayorIgual.setValor(">=");
    mayorIgual.setNumNodo(contador++);

    NodoSintactico tmp = new NodoSintactico("E");
    tmp.addHijo(a);
    tmp.addHijo(mayorIgual);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;
:}
    | E:a logicoAND E:b
{:
    NodoSintactico logicoAND = new NodoSintactico("logicoAND");
    logicoAND.setValor("&&");
    logicoAND.setNumNodo(contador++);

    NodoSintactico tmp = new NodoSintactico("E");
    tmp.addHijo(a);
    tmp.addHijo(logicoAND);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;
:}
    | E:a logicoOR E:b
{:
    NodoSintactico logicoOR = new NodoSintactico("logicoOR");
    logicoOR.setValor("||");
    logicoOR.setNumNodo(contador++);

    NodoSintactico tmp = new NodoSintactico("E");
    tmp.addHijo(a);
    tmp.addHijo(logicoOR);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;
:}
    | E:a logicoXOR E:b
{:
    NodoSintactico logicoXOR = new NodoSintactico("logicoXOR");
    logicoXOR.setValor("^");
    logicoXOR.setNumNodo(contador++);

    NodoSintactico tmp = new NodoSintactico("E");
    tmp.addHijo(a);
    tmp.addHijo(logicoXOR);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;
:}
    | DATO:a
{:
    NodoSintactico tmp = new NodoSintactico("E");
    tmp.addHijo(a);
    tmp.setNumNodo(contador++);

    RESULT = tmp;
:}
    | llaveA LISTAEXP:a llaveC
{:
    NodoSintactico llaveA = new NodoSintactico("llaveA");
    llaveA.setValor("{");
    llaveA.setNumNodo(contador++);
    
    NodoSintactico llaveC = new NodoSintactico("llaveC");
    llaveC.setValor("}");
    llaveC.setNumNodo(contador++);

    NodoSintactico tmp = new NodoSintactico("E");
    tmp.addHijo(llaveA);
    tmp.addHijo(a);
    tmp.addHijo(llaveC);
    tmp.setNumNodo(contador++);

    RESULT = tmp;
:}
    ;
LISTAEXP ::= LISTAEXP:a coma E:b
{:
    NodoSintactico coma = new NodoSintactico("coma");
    coma.setValor(",");
    coma.setNumNodo(contador++);

    NodoSintactico tmp = new NodoSintactico("E");
    tmp.addHijo(a);
    tmp.addHijo(coma);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;
:}
    | E:a
{:
    NodoSintactico tmp = new NodoSintactico("E");
    tmp.addHijo(a);
    tmp.setNumNodo(contador++);

    RESULT = tmp;
:}
    ;
DATO ::= entero:a
{:
    NodoSintactico entero = new NodoSintactico("entero");
    int numero = Integer.parseInt(a);
    entero.setValor(numero);
    entero.setNumNodo(contador++);

    NodoSintactico tmp = new NodoSintactico("DATO");
    tmp.addHijo(entero);
    tmp.setNumNodo(contador++);

    RESULT = tmp;
:}
    | doble:a
{:
    NodoSintactico doble = new NodoSintactico("doble");
    double numero = Double.valueOf(a);
    doble.setValor(numero);
    doble.setNumNodo(contador++);

    NodoSintactico tmp = new NodoSintactico("DATO");
    tmp.addHijo(doble);
    tmp.setNumNodo(contador++);

    RESULT = tmp;
:}
    | cadena:a
{:
    NodoSintactico cadena = new NodoSintactico("cadena");
    a = a.replace("\"","");
    cadena.setValor(a);
    cadena.setNumNodo(contador++);

    NodoSintactico tmp = new NodoSintactico("DATO");
    tmp.addHijo(cadena);
    tmp.setNumNodo(contador++);

    RESULT = tmp;
:}
    | caracter:a
{:
    NodoSintactico caracter = new NodoSintactico("caracter");
    char carac = a.charAt(1);
    caracter.setValor(carac);
    caracter.setNumNodo(contador++);

    NodoSintactico tmp = new NodoSintactico("DATO");
    tmp.addHijo(caracter);
    tmp.setNumNodo(contador++);

    RESULT = tmp;
:}
    | booleano:a
{:
    NodoSintactico booleano = new NodoSintactico("booleano");
    boolean valor = true;
    a = a.toLowerCase();
    if(a.equals("false")){
        valor = false;
    }
    booleano.setValor(valor);
    booleano.setNumNodo(contador++);

    NodoSintactico tmp = new NodoSintactico("DATO");
    tmp.addHijo(booleano);
    tmp.setNumNodo(contador++);

    RESULT = tmp;
:}
    | identificador:a
{:
    NodoSintactico identificador = new NodoSintactico("identificador");
    identificador.setValor(a);
    identificador.setNumNodo(contador++);

    NodoSintactico tmp = new NodoSintactico("DATO");
    tmp.addHijo(identificador);
    tmp.setNumNodo(contador++);

    RESULT = tmp;
:}
    ;
FUNCIONES ::= SI:a
{:
    RESULT = a;
:}
    ;
SI ::= si parentesisA E:a parentesisC llaveA llaveC
{:
    NodoSintactico si = new NodoSintactico("si");
    si.setValor("si");
    si.setNumNodo(contador++);

    NodoSintactico parentesisA = new NodoSintactico("parentesisA");
    parentesisA.setValor("(");
    parentesisA.setNumNodo(contador++);
    
    NodoSintactico parentesisC = new NodoSintactico("parentesisC");
    parentesisC.setValor(")");
    parentesisC.setNumNodo(contador++);
    
    NodoSintactico llaveA = new NodoSintactico("llaveA");
    llaveA.setValor("{");
    llaveA.setNumNodo(contador++);
    
    NodoSintactico llaveC = new NodoSintactico("llaveC");
    llaveC.setValor("}");
    llaveC.setNumNodo(contador++);

    NodoSintactico tmp = new NodoSintactico("SI");
    tmp.addHijo(si);
    tmp.addHijo(parentesisA);
    tmp.addHijo(a);
    tmp.addHijo(parentesisC);
    tmp.addHijo(llaveA);
    tmp.addHijo(llaveC);
    tmp.setNumNodo(contador++);

    RESULT = tmp;
:}
    | si parentesisA E:a parentesisC llaveA llaveC SINO:b
{:
    NodoSintactico si = new NodoSintactico("si");
    si.setValor("si");
    si.setNumNodo(contador++);

    NodoSintactico parentesisA = new NodoSintactico("parentesisA");
    parentesisA.setValor("(");
    parentesisA.setNumNodo(contador++);
    
    NodoSintactico parentesisC = new NodoSintactico("parentesisC");
    parentesisC.setValor(")");
    parentesisC.setNumNodo(contador++);
    
    NodoSintactico llaveA = new NodoSintactico("llaveA");
    llaveA.setValor("{");
    llaveA.setNumNodo(contador++);
    
    NodoSintactico llaveC = new NodoSintactico("llaveC");
    llaveC.setValor("}");
    llaveC.setNumNodo(contador++);

    NodoSintactico tmp = new NodoSintactico("SI");
    tmp.addHijo(si);
    tmp.addHijo(parentesisA);
    tmp.addHijo(a);
    tmp.addHijo(parentesisC);
    tmp.addHijo(llaveA);
    tmp.addHijo(llaveC);
    tmp.addHijo(b);
    tmp.setNumNodo(contador++);

    RESULT = tmp;
:}
    | si parentesisA E:a parentesisC llaveA INSTRUCCIONES:b llaveC
{:
    NodoSintactico si = new NodoSintactico("si");
    si.setValor("si");
    si.setNumNodo(contador++);

    NodoSintactico parentesisA = new NodoSintactico("parentesisA");
    parentesisA.setValor("(");
    parentesisA.setNumNodo(contador++);
    
    NodoSintactico parentesisC = new NodoSintactico("parentesisC");
    parentesisC.setValor(")");
    parentesisC.setNumNodo(contador++);
    
    NodoSintactico llaveA = new NodoSintactico("llaveA");
    llaveA.setValor("{");
    llaveA.setNumNodo(contador++);
    
    NodoSintactico llaveC = new NodoSintactico("llaveC");
    llaveC.setValor("}");
    llaveC.setNumNodo(contador++);

    NodoSintactico tmp = new NodoSintactico("SI");
    tmp.addHijo(si);
    tmp.addHijo(parentesisA);
    tmp.addHijo(a);
    tmp.addHijo(parentesisC);
    tmp.addHijo(llaveA);
    tmp.addHijo(b);
    tmp.addHijo(llaveC);
    tmp.setNumNodo(contador++);

    RESULT = tmp;
:}
    | si parentesisA E:a parentesisC llaveA INSTRUCCIONES:b llaveC SINO:c
{:
    NodoSintactico si = new NodoSintactico("si");
    si.setValor("si");
    si.setNumNodo(contador++);

    NodoSintactico parentesisA = new NodoSintactico("parentesisA");
    parentesisA.setValor("(");
    parentesisA.setNumNodo(contador++);
    
    NodoSintactico parentesisC = new NodoSintactico("parentesisC");
    parentesisC.setValor(")");
    parentesisC.setNumNodo(contador++);
    
    NodoSintactico llaveA = new NodoSintactico("llaveA");
    llaveA.setValor("{");
    llaveA.setNumNodo(contador++);
    
    NodoSintactico llaveC = new NodoSintactico("llaveC");
    llaveC.setValor("}");
    llaveC.setNumNodo(contador++);

    NodoSintactico tmp = new NodoSintactico("SI");
    tmp.addHijo(si);
    tmp.addHijo(parentesisA);
    tmp.addHijo(a);
    tmp.addHijo(parentesisC);
    tmp.addHijo(llaveA);
    tmp.addHijo(b);
    tmp.addHijo(llaveC);
    tmp.addHijo(c);
    tmp.setNumNodo(contador++);

    RESULT = tmp;
:}
    ;

SINO ::= sino SI:a
{:
    NodoSintactico sino = new NodoSintactico("sino");
    sino.setValor("si");
    sino.setNumNodo(contador++);

    NodoSintactico tmp = new NodoSintactico("SINO");
    tmp.addHijo(sino);
    tmp.addHijo(a);
    tmp.setNumNodo(contador++);

    RESULT = tmp;
:}
    | sino llaveA llaveC
{:
    NodoSintactico sino = new NodoSintactico("sino");
    sino.setValor("si");
    sino.setNumNodo(contador++);

    NodoSintactico llaveA = new NodoSintactico("llaveA");
    llaveA.setValor("{");
    llaveA.setNumNodo(contador++);
    
    NodoSintactico llaveC = new NodoSintactico("llaveC");
    llaveC.setValor("}");
    llaveC.setNumNodo(contador++);

    NodoSintactico tmp = new NodoSintactico("SINO");
    tmp.addHijo(sino);
    tmp.addHijo(llaveA);
    tmp.addHijo(llaveC);
    tmp.setNumNodo(contador++);

    RESULT = tmp;
:}
    | sino llaveA INSTRUCCIONES:a llaveC
{:
    NodoSintactico sino = new NodoSintactico("sino");
    sino.setValor("sino");
    sino.setNumNodo(contador++);

    NodoSintactico llaveA = new NodoSintactico("llaveA");
    llaveA.setValor("{");
    llaveA.setNumNodo(contador++);
    
    NodoSintactico llaveC = new NodoSintactico("llaveC");
    llaveC.setValor("}");
    llaveC.setNumNodo(contador++);

    NodoSintactico tmp = new NodoSintactico("SINO");
    tmp.addHijo(sino);
    tmp.addHijo(llaveA);
    tmp.addHijo(a);
    tmp.addHijo(llaveC);
    tmp.setNumNodo(contador++);

    RESULT = tmp;
:}
    ;