/* The following code was generated by JFlex 1.7.0 */


/*--------- 1ra Area: Codigo de Usuario ---------*/

//--------> Paquetes e importaciones
package Analizadores.UFE;
import java_cup.runtime.*;
import Estructuras.Cola;
import Modelos.Errores;

/*--------- 2da Area: Opciones y Declaraciones ---------*/


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Lexico.jflex</tt>
 */
public class Analisis_Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int TEXTO = 2;
  public static final int ETIQUETA = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 26, 13, 13, 13, 13,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    26, 34,  3, 19,  0,  0, 37, 12, 39, 40, 18, 29, 46, 28,  2, 17, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 44, 45, 35, 33, 36,  0, 
     0,  9, 60, 48, 54,  7,  8, 59, 58, 53, 14, 62, 10, 50, 51, 31, 
    30, 14,  5, 15,  4,  6, 47, 32, 56, 57, 14, 42,  0, 43, 38, 16, 
     0, 22, 23, 49, 55, 20, 21, 59, 58, 53, 14, 62, 10, 50, 51, 31, 
    30, 14,  5, 15,  4,  6, 27, 32, 56, 57, 14, 24, 25, 41,  0,  0, 
     0,  0,  0,  0,  0, 13,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    26,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\0\1\2\1\3\1\2\6\4\2\2"+
    "\1\5\1\4\1\6\1\7\1\2\1\4\1\10\2\5"+
    "\1\11\1\12\2\4\1\13\1\14\1\15\1\16\1\2"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\3\4\1\2\2\4\1\30\1\31\1\4\2\1"+
    "\1\5\1\32\1\33\3\4\1\5\1\4\1\13\1\34"+
    "\1\4\1\2\1\4\2\0\1\35\6\4\1\0\1\4"+
    "\2\0\1\36\1\0\2\4\1\36\2\0\1\37\5\0"+
    "\2\4\1\40\3\4\1\0\1\4\1\41\1\42\1\43"+
    "\1\44\1\45\3\4\1\0\1\4\2\0\1\46\2\4"+
    "\1\46\2\4\1\47\1\0\2\4\1\50\10\4\1\0"+
    "\1\4\1\51\2\0\1\52\1\51\2\4\7\0\2\4"+
    "\1\53\1\4\1\54\1\0\4\4\1\55\1\0\1\56"+
    "\1\4\1\56\3\0\4\4\1\0\1\4\1\47\1\4"+
    "\1\57\1\60\4\4\1\61\1\0\2\62\1\0\1\63"+
    "\1\4\1\63\2\0\1\37\4\0\3\4\1\0\1\4"+
    "\1\0\3\4\1\0\1\4\1\64\3\0\1\64\4\4"+
    "\1\0\7\4\1\57\1\0\1\4\1\65\2\0\1\66"+
    "\2\0\2\4\1\67\2\70\1\0\1\4\1\71\1\4"+
    "\1\0\1\4\1\72\2\0\1\72\3\4\1\0\1\4"+
    "\1\0\1\4\1\0\1\4\1\73\1\0\1\4\1\74"+
    "\1\4\1\0\1\4\5\0\1\75\1\76\1\0\2\4"+
    "\1\0\1\4\1\0\1\77\1\4\1\77\1\4\2\100"+
    "\1\0\1\4\1\0\1\4\2\101\1\4\2\102\2\0"+
    "\1\103\1\0\1\104\1\0\2\4\1\0\1\4\1\0"+
    "\1\4\1\105\2\106\1\0\1\4\2\107\1\0\1\110"+
    "\1\111\1\0\2\4\2\112\2\113\2\114\1\0\2\115"+
    "\1\116\1\117";

  private static int [] zzUnpackAction() {
    int [] result = new int[325];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\u017a\0\u01b9"+
    "\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333\0\275\0\u0372"+
    "\0\u03b1\0\275\0\u03f0\0\u042f\0\275\0\u046e\0\u04ad\0\275"+
    "\0\275\0\u04ec\0\u052b\0\u056a\0\u05a9\0\u05e8\0\u0627\0\u0666"+
    "\0\275\0\275\0\275\0\275\0\275\0\275\0\275\0\275"+
    "\0\275\0\u04ad\0\u06a5\0\u06e4\0\u0723\0\u0762\0\u07a1\0\u01f8"+
    "\0\u01f8\0\u07e0\0\u081f\0\u085e\0\u081f\0\275\0\275\0\u089d"+
    "\0\u08dc\0\u091b\0\u01f8\0\u095a\0\275\0\275\0\u0999\0\u09d8"+
    "\0\u0a17\0\u0a56\0\u013b\0\275\0\u0a95\0\u0ad4\0\u0b13\0\u0b52"+
    "\0\u0b91\0\u0bd0\0\u0c0f\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b\0\u0d4a"+
    "\0\u0d89\0\u0dc8\0\u0e07\0\u0e46\0\u0e85\0\u0ec4\0\u0f03\0\u0f42"+
    "\0\u0f81\0\u0fc0\0\u0fff\0\u103e\0\u107d\0\275\0\u10bc\0\u10fb"+
    "\0\u113a\0\u1179\0\u11b8\0\275\0\275\0\275\0\275\0\275"+
    "\0\u11f7\0\u1236\0\u1275\0\u12b4\0\u12f3\0\u1332\0\u1371\0\275"+
    "\0\u13b0\0\u13ef\0\u01f8\0\u142e\0\u146d\0\u081f\0\u14ac\0\u14eb"+
    "\0\u152a\0\u0a56\0\u1569\0\u15a8\0\u15e7\0\u1626\0\u1665\0\u16a4"+
    "\0\u16e3\0\u1722\0\u1761\0\u17a0\0\275\0\u17df\0\u181e\0\275"+
    "\0\u01f8\0\u185d\0\u189c\0\u18db\0\u191a\0\u1959\0\u1998\0\u19d7"+
    "\0\u1a16\0\u1a55\0\u1a94\0\u1ad3\0\u01f8\0\u1b12\0\u01f8\0\u1b51"+
    "\0\u1b90\0\u1bcf\0\u1c0e\0\u1c4d\0\u01f8\0\u1c8c\0\275\0\u1ccb"+
    "\0\u01f8\0\u1d0a\0\u1d49\0\u1d88\0\u1dc7\0\u1e06\0\u1e45\0\u1e84"+
    "\0\u1ec3\0\u1f02\0\275\0\u1f41\0\u01f8\0\u1f80\0\u1fbf\0\u1ffe"+
    "\0\u203d\0\u207c\0\u01f8\0\u20bb\0\275\0\u01f8\0\u20fa\0\275"+
    "\0\u2139\0\u01f8\0\u2178\0\u21b7\0\275\0\u21f6\0\u2235\0\u2274"+
    "\0\u22b3\0\u22f2\0\u2331\0\u2370\0\u23af\0\u23ee\0\u242d\0\u246c"+
    "\0\u24ab\0\u24ea\0\u2529\0\u2568\0\275\0\u25a7\0\u25e6\0\u2625"+
    "\0\u01f8\0\u2664\0\u26a3\0\u26e2\0\u2721\0\u2760\0\u279f\0\u27de"+
    "\0\u281d\0\u285c\0\u289b\0\u28da\0\u2919\0\275\0\u2958\0\u2997"+
    "\0\u29d6\0\u2a15\0\u2a54\0\275\0\u2a93\0\u2ad2\0\u2b11\0\u2b50"+
    "\0\u01f8\0\275\0\u01f8\0\u2b8f\0\u2bce\0\u01f8\0\u2c0d\0\u2c4c"+
    "\0\u2c8b\0\275\0\u2cca\0\u2d09\0\u01f8\0\u2d48\0\u2d87\0\u2dc6"+
    "\0\u2e05\0\u2e44\0\u2e83\0\u2ec2\0\u2f01\0\u2f40\0\u01f8\0\u2f7f"+
    "\0\u2fbe\0\u01f8\0\u2ffd\0\u303c\0\u307b\0\u30ba\0\u30f9\0\u3138"+
    "\0\u3177\0\u31b6\0\u01f8\0\u01f8\0\u31f5\0\u3234\0\u3273\0\u32b2"+
    "\0\u32f1\0\u3330\0\275\0\u336f\0\u01f8\0\u33ae\0\275\0\u01f8"+
    "\0\u33ed\0\u342c\0\u346b\0\u34aa\0\275\0\u01f8\0\u34e9\0\275"+
    "\0\u01f8\0\u3528\0\u3567\0\275\0\u35a6\0\275\0\u35e5\0\u3624"+
    "\0\u3663\0\u36a2\0\u36e1\0\u3720\0\u375f\0\u01f8\0\275\0\u01f8"+
    "\0\u379e\0\u37dd\0\275\0\u01f8\0\u381c\0\275\0\275\0\u385b"+
    "\0\u389a\0\u38d9\0\275\0\u01f8\0\275\0\u01f8\0\275\0\u01f8"+
    "\0\u3918\0\275\0\u01f8\0\u01f8\0\275";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[325];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\4\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\11\1\14\1\15\1\16\1\17\1\11\1\20"+
    "\1\4\1\21\1\22\1\23\1\12\1\13\1\11\1\24"+
    "\1\25\1\26\1\17\1\27\1\30\1\31\1\32\1\11"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\2\53\1\54\1\11\1\55\1\56\2\57\1\60\1\61"+
    "\1\62\1\11\1\24\1\4\1\11\3\63\1\64\11\63"+
    "\1\65\12\63\1\66\3\65\7\63\1\67\3\63\2\4"+
    "\26\63\1\4\1\5\1\4\1\6\1\70\3\11\1\71"+
    "\2\11\1\4\1\16\1\17\2\11\4\4\1\11\1\71"+
    "\1\11\1\72\1\25\2\17\1\73\2\4\1\11\1\74"+
    "\1\33\1\75\2\4\1\76\4\4\1\44\5\4\1\11"+
    "\2\77\2\11\1\100\1\101\2\11\1\60\1\61\1\62"+
    "\1\11\1\72\1\4\1\11\100\0\1\5\1\102\74\0"+
    "\3\103\1\104\73\103\1\0\1\11\2\0\1\11\1\105"+
    "\1\11\1\106\3\11\3\0\3\11\3\0\1\106\3\11"+
    "\1\0\1\11\1\0\1\11\2\0\3\11\16\0\5\11"+
    "\1\0\10\11\1\0\1\11\1\0\1\11\2\0\3\11"+
    "\1\107\3\11\3\0\3\11\3\0\1\107\3\11\1\0"+
    "\1\11\1\0\1\11\2\0\3\11\16\0\5\11\1\0"+
    "\10\11\1\0\1\11\1\0\1\11\2\0\7\11\3\0"+
    "\3\11\3\0\4\11\1\0\1\11\1\0\1\11\2\0"+
    "\3\11\16\0\5\11\1\0\10\11\1\0\1\11\1\0"+
    "\1\11\2\0\6\11\1\110\3\0\3\11\3\0\4\11"+
    "\1\0\1\11\1\0\1\11\2\0\3\11\16\0\5\11"+
    "\1\0\10\11\1\0\1\11\1\0\1\11\2\0\1\11"+
    "\1\111\3\11\1\112\1\11\3\0\3\11\3\0\2\11"+
    "\1\112\1\11\1\0\1\11\1\0\1\11\2\0\3\11"+
    "\16\0\5\11\1\0\10\11\1\0\1\11\1\0\1\11"+
    "\2\0\7\11\3\0\3\11\3\0\4\11\1\0\1\11"+
    "\1\0\1\11\2\0\3\11\16\0\5\11\1\113\1\114"+
    "\7\11\1\0\1\11\5\0\1\115\30\0\1\116\25\0"+
    "\2\117\11\0\15\120\1\0\61\120\1\0\1\11\2\0"+
    "\1\11\1\121\5\11\3\0\3\11\3\0\4\11\1\0"+
    "\1\11\1\0\1\11\2\0\1\122\2\11\16\0\5\11"+
    "\1\117\1\123\7\11\1\0\1\11\4\0\1\124\6\0"+
    "\1\125\3\0\1\125\1\0\1\126\1\127\4\0\1\130"+
    "\34\0\2\131\2\132\4\0\1\130\3\0\1\133\22\0"+
    "\4\133\31\0\1\133\5\0\1\133\10\0\1\11\2\0"+
    "\2\11\1\134\4\11\3\0\3\11\3\0\4\11\1\0"+
    "\1\11\1\0\1\11\2\0\1\11\1\135\1\11\16\0"+
    "\5\11\1\0\10\11\1\0\1\11\31\0\1\136\46\0"+
    "\1\11\2\0\5\11\1\137\1\11\3\0\3\11\3\0"+
    "\2\11\1\137\1\11\1\0\1\11\1\0\1\11\2\0"+
    "\3\11\16\0\5\11\1\0\10\11\1\0\1\11\1\0"+
    "\1\11\2\0\5\11\1\140\1\11\3\0\3\11\3\0"+
    "\2\11\1\140\1\11\1\0\1\11\1\0\1\11\2\0"+
    "\1\11\1\141\1\11\16\0\5\11\1\0\10\11\1\0"+
    "\1\11\1\0\1\11\2\0\7\11\3\0\3\11\3\0"+
    "\4\11\1\0\1\11\1\0\1\11\2\0\3\11\16\0"+
    "\5\11\1\142\1\143\7\11\1\0\1\11\41\0\1\144"+
    "\76\0\1\145\76\0\1\146\76\0\1\147\102\0\1\150"+
    "\32\0\1\11\2\0\6\11\1\151\3\0\3\11\3\0"+
    "\4\11\1\0\1\11\1\0\1\11\2\0\1\11\1\152"+
    "\1\11\16\0\5\11\1\0\10\11\1\0\1\11\1\0"+
    "\1\11\2\0\5\11\1\153\1\11\3\0\3\11\3\0"+
    "\2\11\1\153\1\11\1\0\1\11\1\0\1\11\2\0"+
    "\3\11\16\0\5\11\1\154\1\155\7\11\1\0\1\11"+
    "\4\0\1\156\55\0\1\157\3\0\2\160\10\0\1\11"+
    "\2\0\1\161\6\11\3\0\3\11\3\0\4\11\1\0"+
    "\1\11\1\0\1\11\2\0\3\11\16\0\3\11\1\162"+
    "\1\11\1\0\1\11\2\163\5\11\1\0\1\11\1\0"+
    "\1\11\2\0\3\11\1\164\3\11\3\0\3\11\3\0"+
    "\1\164\3\11\1\0\1\11\1\0\1\11\2\0\3\11"+
    "\16\0\5\11\1\0\10\11\1\0\1\11\1\0\1\11"+
    "\2\0\3\11\1\165\3\11\3\0\3\11\3\0\1\165"+
    "\3\11\1\0\1\11\1\0\1\11\2\0\3\11\16\0"+
    "\5\11\1\0\10\11\1\0\1\11\30\63\1\0\12\63"+
    "\1\0\3\63\2\0\26\63\3\64\1\166\24\64\1\167"+
    "\12\64\1\167\3\64\2\167\26\64\1\0\1\11\2\0"+
    "\1\11\1\105\5\11\3\0\3\11\3\0\4\11\1\0"+
    "\1\11\1\0\1\11\2\0\3\11\16\0\5\11\1\0"+
    "\10\11\1\0\1\11\1\0\1\11\2\0\5\11\1\112"+
    "\1\11\3\0\3\11\3\0\2\11\1\112\1\11\1\0"+
    "\1\11\1\0\1\11\2\0\3\11\16\0\5\11\1\0"+
    "\10\11\1\0\1\11\1\0\1\11\2\0\7\11\3\0"+
    "\3\11\3\0\4\11\1\0\1\11\1\0\1\11\2\0"+
    "\1\11\1\135\1\11\16\0\5\11\1\0\10\11\1\0"+
    "\1\11\1\0\1\11\2\0\7\11\3\0\3\11\3\0"+
    "\4\11\1\0\1\11\1\0\1\11\2\0\3\11\16\0"+
    "\4\11\1\170\1\0\10\11\1\0\1\11\1\0\1\11"+
    "\2\0\6\11\1\151\3\0\3\11\3\0\4\11\1\0"+
    "\1\11\1\0\1\11\2\0\1\11\1\171\1\11\16\0"+
    "\5\11\1\0\10\11\1\0\1\11\66\0\2\160\10\0"+
    "\1\11\2\0\7\11\3\0\3\11\3\0\4\11\1\0"+
    "\1\11\1\0\1\11\2\0\3\11\16\0\5\11\1\0"+
    "\1\11\2\163\5\11\1\0\1\11\1\0\1\172\76\0"+
    "\1\11\2\0\2\11\1\173\4\11\3\0\3\11\3\0"+
    "\4\11\1\0\1\11\1\0\1\11\2\0\3\11\16\0"+
    "\5\11\1\0\10\11\1\0\1\11\1\0\1\11\2\0"+
    "\7\11\3\0\3\11\3\0\4\11\1\0\1\11\1\0"+
    "\1\11\2\0\3\11\16\0\5\11\1\0\3\11\1\174"+
    "\4\11\1\0\1\11\1\0\1\11\2\0\1\175\6\11"+
    "\3\0\3\11\3\0\4\11\1\0\1\11\1\0\1\11"+
    "\2\0\1\176\2\11\16\0\4\11\1\177\1\0\10\11"+
    "\1\0\1\11\1\0\1\11\2\0\3\11\1\200\3\11"+
    "\3\0\3\11\3\0\1\200\3\11\1\0\1\11\1\0"+
    "\1\11\2\0\3\11\16\0\5\11\1\0\10\11\1\0"+
    "\1\11\1\0\1\11\2\0\7\11\3\0\3\11\3\0"+
    "\4\11\1\0\1\11\1\0\1\11\2\0\1\11\1\201"+
    "\1\11\16\0\5\11\1\0\10\11\1\0\1\11\1\0"+
    "\1\11\2\0\6\11\1\202\3\0\3\11\3\0\4\11"+
    "\1\0\1\11\1\0\1\11\2\0\3\11\16\0\5\11"+
    "\1\0\10\11\1\0\1\11\13\0\1\203\3\0\1\203"+
    "\60\0\1\11\2\0\7\11\1\203\2\0\1\11\1\204"+
    "\1\11\3\0\4\11\1\0\1\11\1\0\1\11\2\0"+
    "\3\11\16\0\5\11\1\0\10\11\1\0\1\11\60\0"+
    "\2\205\101\0\2\206\74\0\1\207\27\0\1\210\63\0"+
    "\1\11\2\0\7\11\3\0\3\11\3\0\4\11\1\0"+
    "\1\11\1\0\1\11\2\0\3\11\16\0\1\11\2\211"+
    "\2\11\1\0\10\11\1\0\1\11\1\0\1\11\2\0"+
    "\7\11\3\0\3\11\3\0\4\11\1\0\1\11\1\0"+
    "\1\11\2\0\3\11\16\0\5\11\1\206\1\212\7\11"+
    "\1\0\1\11\1\0\1\11\2\0\7\11\3\0\3\11"+
    "\3\0\4\11\1\0\1\11\1\0\1\11\2\0\3\11"+
    "\16\0\4\11\1\213\1\0\10\11\1\0\1\11\7\0"+
    "\1\214\14\0\1\214\110\0\1\215\40\0\15\126\1\0"+
    "\61\126\22\127\1\216\54\127\6\0\1\217\74\0\1\220"+
    "\101\0\1\221\14\0\1\221\53\0\1\222\22\0\4\222"+
    "\31\0\1\222\5\0\1\222\10\0\1\11\2\0\1\223"+
    "\6\11\3\0\3\11\3\0\4\11\1\0\1\11\1\0"+
    "\1\11\2\0\3\11\16\0\5\11\1\0\10\11\1\0"+
    "\1\11\1\0\1\11\2\0\1\11\1\224\5\11\3\0"+
    "\3\11\3\0\4\11\1\0\1\11\1\0\1\11\2\0"+
    "\3\11\16\0\5\11\1\0\10\11\1\0\1\11\1\0"+
    "\1\11\2\0\1\11\1\225\5\11\3\0\3\11\3\0"+
    "\4\11\1\0\1\11\1\0\1\11\2\0\3\11\16\0"+
    "\5\11\1\0\10\11\1\0\1\11\1\0\1\11\2\0"+
    "\7\11\3\0\3\11\3\0\4\11\1\0\1\11\1\0"+
    "\1\11\2\0\3\11\16\0\4\11\1\226\1\0\10\11"+
    "\1\0\1\11\1\0\1\11\2\0\7\11\3\0\3\11"+
    "\3\0\4\11\1\0\1\11\1\0\1\11\2\0\2\11"+
    "\1\227\16\0\5\11\1\0\10\11\1\0\1\11\66\0"+
    "\2\230\10\0\1\11\2\0\7\11\3\0\3\11\3\0"+
    "\4\11\1\0\1\11\1\0\1\11\2\0\3\11\16\0"+
    "\5\11\1\0\1\11\2\231\5\11\1\0\1\11\1\0"+
    "\1\11\2\0\5\11\1\232\1\11\3\0\3\11\3\0"+
    "\2\11\1\232\1\11\1\0\1\11\1\0\1\11\2\0"+
    "\3\11\16\0\5\11\1\0\10\11\1\0\1\11\1\0"+
    "\1\11\2\0\6\11\1\233\3\0\3\11\3\0\4\11"+
    "\1\0\1\11\1\0\1\11\2\0\3\11\16\0\3\11"+
    "\1\234\1\11\1\0\10\11\1\0\1\11\1\0\1\11"+
    "\2\0\7\11\3\0\3\11\3\0\4\11\1\0\1\11"+
    "\1\0\1\11\2\0\3\11\16\0\5\11\1\0\3\11"+
    "\1\235\4\11\1\0\1\11\7\0\1\236\14\0\1\236"+
    "\36\0\1\237\14\0\1\11\2\0\3\11\1\240\3\11"+
    "\3\0\3\11\3\0\1\240\3\11\1\0\1\11\1\0"+
    "\1\11\2\0\3\11\16\0\4\11\1\241\1\0\10\11"+
    "\1\0\1\11\7\0\1\242\14\0\1\242\63\0\1\243"+
    "\14\0\1\243\7\0\1\244\41\0\1\11\2\0\3\11"+
    "\1\245\3\11\3\0\3\11\3\0\1\245\3\11\1\0"+
    "\1\11\1\0\1\11\2\0\3\11\16\0\5\11\1\0"+
    "\10\11\1\0\1\11\1\0\1\11\2\0\5\11\1\246"+
    "\1\11\3\0\3\11\3\0\2\11\1\246\1\11\1\0"+
    "\1\11\1\0\1\11\2\0\1\247\2\11\16\0\5\11"+
    "\1\0\10\11\1\0\1\11\1\0\1\11\2\0\4\11"+
    "\1\250\2\11\3\0\3\11\3\0\1\11\1\250\2\11"+
    "\1\0\1\11\1\0\1\11\2\0\3\11\16\0\5\11"+
    "\1\0\10\11\1\0\1\11\1\0\1\11\2\0\7\11"+
    "\3\0\3\11\3\0\4\11\1\0\1\11\1\0\1\11"+
    "\2\0\3\11\16\0\5\11\1\251\1\252\7\11\1\0"+
    "\1\11\3\167\1\253\73\167\1\0\1\11\2\0\7\11"+
    "\3\0\3\11\3\0\4\11\1\0\1\11\1\0\1\11"+
    "\2\0\3\11\16\0\1\11\2\254\2\11\1\0\10\11"+
    "\1\0\1\11\1\0\1\11\2\0\6\11\1\233\3\0"+
    "\3\11\3\0\4\11\1\0\1\11\1\0\1\11\2\0"+
    "\3\11\16\0\5\11\1\0\10\11\1\0\1\11\1\0"+
    "\1\11\2\0\3\11\1\255\3\11\3\0\3\11\3\0"+
    "\1\255\3\11\1\0\1\11\1\0\1\11\2\0\3\11"+
    "\16\0\5\11\1\0\10\11\1\0\1\11\1\0\1\11"+
    "\2\0\1\256\6\11\3\0\3\11\3\0\4\11\1\0"+
    "\1\11\1\0\1\11\2\0\3\11\16\0\5\11\1\0"+
    "\10\11\1\0\1\11\1\0\1\11\2\0\2\11\1\257"+
    "\4\11\3\0\3\11\3\0\4\11\1\0\1\11\1\0"+
    "\1\11\2\0\3\11\16\0\5\11\1\0\10\11\1\0"+
    "\1\11\1\0\1\11\2\0\3\11\1\260\3\11\3\0"+
    "\3\11\3\0\1\260\3\11\1\0\1\11\1\0\1\11"+
    "\2\0\3\11\16\0\5\11\1\0\10\11\1\0\1\11"+
    "\1\0\1\11\2\0\7\11\3\0\3\11\3\0\4\11"+
    "\1\0\1\11\1\0\1\11\2\0\3\11\16\0\5\11"+
    "\1\0\1\11\2\261\5\11\1\0\1\11\1\0\1\11"+
    "\2\0\7\11\3\0\3\11\3\0\4\11\1\0\1\11"+
    "\1\0\1\11\2\0\3\11\16\0\3\11\1\262\1\11"+
    "\1\0\10\11\1\0\1\11\1\0\1\11\2\0\7\11"+
    "\3\0\3\11\3\0\4\11\1\0\1\11\1\0\1\11"+
    "\2\0\3\11\16\0\3\11\1\263\1\11\1\0\10\11"+
    "\1\0\1\11\1\0\1\11\2\0\7\11\1\264\2\0"+
    "\1\11\1\173\1\11\3\0\4\11\1\0\1\11\1\0"+
    "\1\11\2\0\3\11\16\0\5\11\1\0\10\11\1\0"+
    "\1\11\4\0\1\265\73\0\1\11\2\0\1\266\6\11"+
    "\3\0\3\11\3\0\4\11\1\0\1\11\1\0\1\11"+
    "\2\0\3\11\16\0\5\11\1\0\10\11\1\0\1\11"+
    "\63\0\1\267\52\0\1\270\40\0\1\11\2\0\7\11"+
    "\3\0\3\11\3\0\4\11\1\0\1\11\1\0\1\11"+
    "\2\0\3\11\16\0\4\11\1\271\1\0\10\11\1\0"+
    "\1\11\1\0\1\11\2\0\7\11\3\0\3\11\3\0"+
    "\4\11\1\0\1\11\1\0\1\11\2\0\1\11\1\272"+
    "\1\11\16\0\5\11\1\0\10\11\1\0\1\11\70\0"+
    "\1\273\72\0\2\274\11\0\21\127\1\275\1\216\54\127"+
    "\4\0\1\276\101\0\1\277\14\0\1\277\62\0\1\300"+
    "\14\0\1\300\52\0\1\301\22\0\4\301\31\0\1\301"+
    "\5\0\1\301\10\0\1\11\2\0\1\302\6\11\3\0"+
    "\3\11\3\0\4\11\1\0\1\11\1\0\1\11\2\0"+
    "\3\11\16\0\5\11\1\0\10\11\1\0\1\11\1\0"+
    "\1\11\2\0\7\11\3\0\3\11\3\0\4\11\1\0"+
    "\1\11\1\0\1\11\2\0\3\11\16\0\5\11\1\0"+
    "\1\11\2\303\5\11\1\0\1\11\1\0\1\11\2\0"+
    "\3\11\1\304\3\11\3\0\3\11\3\0\1\304\3\11"+
    "\1\0\1\11\1\0\1\11\2\0\3\11\16\0\5\11"+
    "\1\0\10\11\1\0\1\11\4\0\1\305\73\0\1\11"+
    "\2\0\1\306\6\11\3\0\3\11\3\0\4\11\1\0"+
    "\1\11\1\0\1\11\2\0\3\11\16\0\5\11\1\0"+
    "\10\11\1\0\1\11\1\0\1\11\2\0\7\11\1\307"+
    "\2\0\1\11\1\310\1\11\3\0\4\11\1\0\1\11"+
    "\1\0\1\11\2\0\3\11\16\0\5\11\1\0\10\11"+
    "\1\0\1\11\1\0\1\11\2\0\7\11\3\0\3\11"+
    "\3\0\4\11\1\0\1\11\1\0\1\11\2\0\1\11"+
    "\1\311\1\11\16\0\5\11\1\0\10\11\1\0\1\11"+
    "\1\0\1\11\2\0\7\11\3\0\3\11\3\0\4\11"+
    "\1\0\1\11\1\0\1\11\2\0\1\312\2\11\16\0"+
    "\5\11\1\0\10\11\1\0\1\11\63\0\1\313\14\0"+
    "\1\11\2\0\7\11\3\0\3\11\3\0\4\11\1\0"+
    "\1\11\1\0\1\11\2\0\3\11\16\0\4\11\1\314"+
    "\1\0\10\11\1\0\1\11\62\0\1\315\107\0\1\316"+
    "\10\0\1\317\31\0\1\320\40\0\1\11\2\0\7\11"+
    "\3\0\3\11\3\0\4\11\1\0\1\11\1\0\1\11"+
    "\2\0\3\11\16\0\3\11\1\321\1\11\1\0\10\11"+
    "\1\0\1\11\1\0\1\11\2\0\7\11\3\0\3\11"+
    "\3\0\4\11\1\0\1\11\1\0\1\11\2\0\3\11"+
    "\16\0\5\11\1\0\6\11\1\322\1\11\1\0\1\11"+
    "\1\0\1\11\2\0\1\11\1\323\5\11\3\0\3\11"+
    "\3\0\4\11\1\0\1\11\1\0\1\11\2\0\1\11"+
    "\1\324\1\11\16\0\5\11\1\0\10\11\1\0\1\11"+
    "\1\0\1\11\2\0\5\11\1\325\1\11\3\0\3\11"+
    "\3\0\2\11\1\325\1\11\1\0\1\11\1\0\1\11"+
    "\2\0\3\11\16\0\5\11\1\0\10\11\1\0\1\11"+
    "\73\0\1\326\4\0\1\11\2\0\7\11\3\0\3\11"+
    "\3\0\4\11\1\0\1\11\1\0\1\11\2\0\3\11"+
    "\16\0\5\11\1\0\6\11\1\327\1\11\1\0\1\11"+
    "\1\0\1\11\2\0\6\11\1\330\3\0\3\11\3\0"+
    "\4\11\1\0\1\11\1\0\1\11\2\0\3\11\16\0"+
    "\5\11\1\0\10\11\1\0\1\11\1\0\1\11\2\0"+
    "\4\11\1\331\2\11\3\0\3\11\3\0\1\11\1\331"+
    "\2\11\1\0\1\11\1\0\1\11\2\0\3\11\16\0"+
    "\5\11\1\0\10\11\1\0\1\11\1\0\1\11\2\0"+
    "\1\11\1\332\5\11\3\0\3\11\3\0\4\11\1\0"+
    "\1\11\1\0\1\11\2\0\3\11\16\0\5\11\1\0"+
    "\10\11\1\0\1\11\1\0\1\11\2\0\1\333\6\11"+
    "\3\0\3\11\3\0\4\11\1\0\1\11\1\0\1\11"+
    "\2\0\3\11\16\0\5\11\1\0\10\11\1\0\1\11"+
    "\1\0\1\11\2\0\3\11\1\334\3\11\3\0\3\11"+
    "\3\0\1\334\3\11\1\0\1\11\1\0\1\11\2\0"+
    "\3\11\16\0\5\11\1\0\10\11\1\0\1\11\1\0"+
    "\1\11\2\0\3\11\1\335\3\11\3\0\3\11\3\0"+
    "\1\335\3\11\1\0\1\11\1\0\1\11\2\0\3\11"+
    "\16\0\5\11\1\0\10\11\1\0\1\11\7\0\1\336"+
    "\14\0\1\336\135\0\1\337\14\0\1\11\2\0\7\11"+
    "\3\0\3\11\3\0\4\11\1\0\1\11\1\0\1\11"+
    "\2\0\3\11\16\0\4\11\1\340\1\0\10\11\1\0"+
    "\1\11\4\0\1\341\155\0\1\342\17\0\1\343\154\0"+
    "\1\344\25\0\1\345\14\0\1\345\51\0\1\346\22\0"+
    "\4\346\31\0\1\346\5\0\1\346\10\0\1\11\2\0"+
    "\7\11\3\0\3\11\3\0\4\11\1\0\1\11\1\0"+
    "\1\11\2\0\1\11\1\347\1\11\16\0\5\11\1\0"+
    "\10\11\1\0\1\11\1\0\1\11\2\0\3\11\1\350"+
    "\3\11\3\0\3\11\3\0\1\350\3\11\1\0\1\11"+
    "\1\0\1\11\2\0\3\11\16\0\5\11\1\0\10\11"+
    "\1\0\1\11\1\0\1\11\2\0\6\11\1\351\3\0"+
    "\3\11\3\0\4\11\1\0\1\11\1\0\1\11\2\0"+
    "\3\11\16\0\5\11\1\0\10\11\1\0\1\11\72\0"+
    "\1\352\5\0\1\11\2\0\7\11\3\0\3\11\3\0"+
    "\4\11\1\0\1\11\1\0\1\11\2\0\3\11\16\0"+
    "\5\11\1\0\5\11\1\353\2\11\1\0\1\11\13\0"+
    "\1\354\3\0\1\354\60\0\1\11\2\0\7\11\1\354"+
    "\2\0\1\11\1\355\1\11\3\0\4\11\1\0\1\11"+
    "\1\0\1\11\2\0\3\11\16\0\5\11\1\0\10\11"+
    "\1\0\1\11\1\0\1\11\2\0\1\11\1\356\5\11"+
    "\3\0\3\11\3\0\4\11\1\0\1\11\1\0\1\11"+
    "\2\0\3\11\16\0\5\11\1\0\10\11\1\0\1\11"+
    "\1\0\1\11\2\0\7\11\3\0\3\11\3\0\4\11"+
    "\1\0\1\11\1\0\1\11\2\0\1\11\1\357\1\11"+
    "\16\0\5\11\1\0\10\11\1\0\1\11\4\0\1\360"+
    "\73\0\1\11\2\0\1\361\6\11\3\0\3\11\3\0"+
    "\4\11\1\0\1\11\1\0\1\11\2\0\3\11\16\0"+
    "\5\11\1\0\10\11\1\0\1\11\7\0\1\362\14\0"+
    "\1\362\136\0\2\363\16\0\1\364\72\0\1\11\2\0"+
    "\3\11\1\365\3\11\3\0\3\11\3\0\1\365\3\11"+
    "\1\0\1\11\1\0\1\11\2\0\3\11\16\0\5\11"+
    "\1\0\10\11\1\0\1\11\1\0\1\11\2\0\7\11"+
    "\3\0\3\11\3\0\4\11\1\0\1\11\1\0\1\11"+
    "\2\0\3\11\16\0\5\11\1\363\1\366\7\11\1\0"+
    "\1\11\1\0\1\11\2\0\1\11\1\367\5\11\3\0"+
    "\3\11\3\0\4\11\1\0\1\11\1\0\1\11\2\0"+
    "\3\11\16\0\5\11\1\0\10\11\1\0\1\11\1\0"+
    "\1\11\2\0\2\11\1\370\4\11\3\0\3\11\3\0"+
    "\4\11\1\0\1\11\1\0\1\11\2\0\3\11\16\0"+
    "\5\11\1\0\10\11\1\0\1\11\72\0\1\371\5\0"+
    "\1\11\2\0\7\11\3\0\3\11\3\0\4\11\1\0"+
    "\1\11\1\0\1\11\2\0\3\11\16\0\5\11\1\0"+
    "\5\11\1\372\2\11\1\0\1\11\1\0\1\11\2\0"+
    "\7\11\3\0\3\11\3\0\4\11\1\0\1\11\1\0"+
    "\1\11\2\0\3\11\16\0\5\11\1\373\1\374\7\11"+
    "\1\0\1\11\1\0\1\11\2\0\7\11\3\0\3\11"+
    "\3\0\4\11\1\0\1\11\1\0\1\11\2\0\3\11"+
    "\16\0\5\11\1\375\1\376\7\11\1\0\1\11\1\0"+
    "\1\11\2\0\7\11\3\0\3\11\3\0\4\11\1\0"+
    "\1\11\1\0\1\11\2\0\3\11\16\0\4\11\1\377"+
    "\1\0\10\11\1\0\1\11\1\0\1\11\2\0\7\11"+
    "\3\0\3\11\3\0\4\11\1\0\1\11\1\0\1\11"+
    "\2\0\3\11\16\0\5\11\1\u0100\1\u0101\7\11\1\0"+
    "\1\11\1\0\1\11\2\0\1\11\1\u0102\5\11\3\0"+
    "\3\11\3\0\4\11\1\0\1\11\1\0\1\11\2\0"+
    "\3\11\16\0\5\11\1\0\10\11\1\0\1\11\1\0"+
    "\1\11\2\0\7\11\3\0\3\11\3\0\4\11\1\0"+
    "\1\11\1\0\1\11\2\0\3\11\16\0\4\11\1\u0103"+
    "\1\0\10\11\1\0\1\11\7\0\1\u0104\14\0\1\u0104"+
    "\53\0\1\11\2\0\3\11\1\u0105\3\11\3\0\3\11"+
    "\3\0\1\u0105\3\11\1\0\1\11\1\0\1\11\2\0"+
    "\3\11\16\0\5\11\1\0\10\11\1\0\1\11\10\0"+
    "\1\u0106\14\0\1\u0106\134\0\1\u0107\52\0\1\u0108\45\0"+
    "\1\u0109\71\0\1\u010a\22\0\4\u010a\31\0\1\u010a\5\0"+
    "\1\u010a\10\0\1\11\2\0\7\11\3\0\3\11\3\0"+
    "\4\11\1\0\1\11\1\0\1\11\2\0\3\11\16\0"+
    "\4\11\1\u010b\1\0\10\11\1\0\1\11\1\0\1\11"+
    "\2\0\1\11\1\u010c\5\11\3\0\3\11\3\0\4\11"+
    "\1\0\1\11\1\0\1\11\2\0\3\11\16\0\5\11"+
    "\1\0\10\11\1\0\1\11\63\0\1\u010d\14\0\1\11"+
    "\2\0\7\11\3\0\3\11\3\0\4\11\1\0\1\11"+
    "\1\0\1\11\2\0\3\11\16\0\4\11\1\u010e\1\0"+
    "\10\11\1\0\1\11\1\0\1\11\2\0\7\11\3\0"+
    "\3\11\3\0\4\11\1\0\1\11\1\0\1\11\2\0"+
    "\3\11\16\0\4\11\1\u010f\1\0\10\11\1\0\1\11"+
    "\5\0\1\u0110\72\0\1\11\2\0\1\11\1\u0111\5\11"+
    "\3\0\3\11\3\0\4\11\1\0\1\11\1\0\1\11"+
    "\2\0\3\11\16\0\5\11\1\0\10\11\1\0\1\11"+
    "\62\0\1\u0112\20\0\1\u0113\73\0\1\11\2\0\7\11"+
    "\3\0\3\11\3\0\4\11\1\0\1\11\1\0\1\11"+
    "\2\0\3\11\16\0\3\11\1\u0114\1\11\1\0\10\11"+
    "\1\0\1\11\1\0\1\11\2\0\1\u0115\6\11\3\0"+
    "\3\11\3\0\4\11\1\0\1\11\1\0\1\11\2\0"+
    "\3\11\16\0\5\11\1\0\10\11\1\0\1\11\1\0"+
    "\1\11\2\0\6\11\1\u0116\3\0\3\11\3\0\4\11"+
    "\1\0\1\11\1\0\1\11\2\0\3\11\16\0\5\11"+
    "\1\0\10\11\1\0\1\11\4\0\1\u0117\73\0\1\11"+
    "\2\0\1\u0118\6\11\3\0\3\11\3\0\4\11\1\0"+
    "\1\11\1\0\1\11\2\0\3\11\16\0\5\11\1\0"+
    "\10\11\1\0\1\11\60\0\2\u0119\16\0\1\11\2\0"+
    "\7\11\3\0\3\11\3\0\4\11\1\0\1\11\1\0"+
    "\1\11\2\0\3\11\16\0\1\11\2\u011a\2\11\1\0"+
    "\10\11\1\0\1\11\7\0\1\u011b\14\0\1\u011b\53\0"+
    "\1\11\2\0\3\11\1\u011c\3\11\3\0\3\11\3\0"+
    "\1\u011c\3\11\1\0\1\11\1\0\1\11\2\0\3\11"+
    "\16\0\5\11\1\0\10\11\1\0\1\11\5\0\1\u011d"+
    "\72\0\1\11\2\0\1\11\1\u011e\5\11\3\0\3\11"+
    "\3\0\4\11\1\0\1\11\1\0\1\11\2\0\3\11"+
    "\16\0\5\11\1\0\10\11\1\0\1\11\1\0\1\11"+
    "\2\0\1\u011f\6\11\3\0\3\11\3\0\4\11\1\0"+
    "\1\11\1\0\1\11\2\0\3\11\16\0\5\11\1\0"+
    "\10\11\1\0\1\11\5\0\1\u0120\72\0\1\11\2\0"+
    "\1\11\1\u0121\5\11\3\0\3\11\3\0\4\11\1\0"+
    "\1\11\1\0\1\11\2\0\3\11\16\0\5\11\1\0"+
    "\10\11\1\0\1\11\64\0\2\u0122\20\0\1\u0123\14\0"+
    "\1\u0123\135\0\1\u0124\25\0\1\u0125\65\0\1\u0126\22\0"+
    "\4\u0126\31\0\1\u0126\5\0\1\u0126\20\0\1\u0127\14\0"+
    "\1\u0127\51\0\1\11\2\0\5\11\1\u0128\1\11\3\0"+
    "\3\11\3\0\2\11\1\u0128\1\11\1\0\1\11\1\0"+
    "\1\11\2\0\3\11\16\0\5\11\1\0\10\11\1\0"+
    "\1\11\1\0\1\11\2\0\3\11\1\u0129\3\11\3\0"+
    "\3\11\3\0\1\u0129\3\11\1\0\1\11\1\0\1\11"+
    "\2\0\3\11\16\0\5\11\1\0\10\11\1\0\1\11"+
    "\11\0\1\u012a\14\0\1\u012a\51\0\1\11\2\0\5\11"+
    "\1\u012b\1\11\3\0\3\11\3\0\2\11\1\u012b\1\11"+
    "\1\0\1\11\1\0\1\11\2\0\3\11\16\0\5\11"+
    "\1\0\10\11\1\0\1\11\64\0\2\u012c\12\0\1\11"+
    "\2\0\7\11\3\0\3\11\3\0\4\11\1\0\1\11"+
    "\1\0\1\11\2\0\3\11\16\0\5\11\1\u012c\1\u012d"+
    "\7\11\1\0\1\11\1\0\1\11\2\0\1\u012e\6\11"+
    "\3\0\3\11\3\0\4\11\1\0\1\11\1\0\1\11"+
    "\2\0\3\11\16\0\5\11\1\0\10\11\1\0\1\11"+
    "\75\0\2\u012f\1\0\1\11\2\0\7\11\3\0\3\11"+
    "\3\0\4\11\1\0\1\11\1\0\1\11\2\0\3\11"+
    "\16\0\5\11\1\0\10\11\1\u012f\1\u0130\12\0\1\u0131"+
    "\65\0\1\11\2\0\6\11\1\u0132\3\0\3\11\3\0"+
    "\4\11\1\0\1\11\1\0\1\11\2\0\3\11\16\0"+
    "\5\11\1\0\10\11\1\0\1\11\1\0\1\11\2\0"+
    "\7\11\1\u0133\2\0\1\11\1\u0134\1\11\3\0\4\11"+
    "\1\0\1\11\1\0\1\11\2\0\3\11\16\0\5\11"+
    "\1\0\10\11\1\0\1\11\7\0\1\u0135\14\0\1\u0135"+
    "\57\0\1\u0136\75\0\1\u0137\154\0\1\u0138\15\0\1\11"+
    "\2\0\7\11\3\0\3\11\3\0\4\11\1\0\1\11"+
    "\1\0\1\11\2\0\3\11\16\0\3\11\1\u0139\1\11"+
    "\1\0\10\11\1\0\1\11\1\0\1\11\2\0\7\11"+
    "\3\0\3\11\3\0\4\11\1\0\1\11\1\0\1\11"+
    "\2\0\3\11\16\0\4\11\1\u013a\1\0\10\11\1\0"+
    "\1\11\13\0\1\u013b\3\0\1\u013b\60\0\1\11\2\0"+
    "\7\11\1\u013b\2\0\1\11\1\u013c\1\11\3\0\4\11"+
    "\1\0\1\11\1\0\1\11\2\0\3\11\16\0\5\11"+
    "\1\0\10\11\1\0\1\11\5\0\1\u013d\72\0\1\11"+
    "\2\0\1\11\1\u013e\5\11\3\0\3\11\3\0\4\11"+
    "\1\0\1\11\1\0\1\11\2\0\3\11\16\0\5\11"+
    "\1\0\10\11\1\0\1\11\66\0\2\u013f\10\0\1\11"+
    "\2\0\7\11\3\0\3\11\3\0\4\11\1\0\1\11"+
    "\1\0\1\11\2\0\3\11\16\0\5\11\1\0\1\11"+
    "\2\u0140\5\11\1\0\1\11\12\0\1\u0141\73\0\1\u0142"+
    "\14\0\1\u0142\53\0\1\11\2\0\3\11\1\u0143\3\11"+
    "\3\0\3\11\3\0\1\u0143\3\11\1\0\1\11\1\0"+
    "\1\11\2\0\3\11\16\0\5\11\1\0\10\11\1\0"+
    "\1\11\1\0\1\11\2\0\1\u0144\6\11\3\0\3\11"+
    "\3\0\4\11\1\0\1\11\1\0\1\11\2\0\3\11"+
    "\16\0\5\11\1\0\10\11\1\0\1\11\66\0\2\u0145"+
    "\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14679];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\1\0\1\11\12\1\1\11\2\1\1\11"+
    "\2\1\1\11\2\1\2\11\7\1\11\11\14\1\2\11"+
    "\5\1\2\11\3\1\2\0\1\11\6\1\1\0\1\1"+
    "\2\0\1\1\1\0\3\1\2\0\1\1\5\0\2\1"+
    "\1\11\3\1\1\0\1\1\5\11\3\1\1\0\1\1"+
    "\2\0\1\11\6\1\1\0\13\1\1\0\1\1\1\11"+
    "\2\0\1\11\3\1\7\0\5\1\1\0\5\1\1\0"+
    "\1\11\2\1\3\0\4\1\1\0\1\1\1\11\10\1"+
    "\1\0\1\11\1\1\1\0\1\11\2\1\2\0\1\11"+
    "\4\0\3\1\1\0\1\1\1\0\3\1\1\0\1\1"+
    "\1\11\3\0\5\1\1\0\7\1\1\11\1\0\2\1"+
    "\2\0\1\11\2\0\3\1\1\11\1\1\1\0\3\1"+
    "\1\0\1\1\1\11\2\0\4\1\1\0\1\1\1\0"+
    "\1\1\1\0\2\1\1\0\3\1\1\0\1\1\5\0"+
    "\2\1\1\0\2\1\1\0\1\1\1\0\1\11\3\1"+
    "\1\11\1\1\1\0\1\1\1\0\1\1\1\11\2\1"+
    "\1\11\1\1\2\0\1\11\1\0\1\11\1\0\2\1"+
    "\1\0\1\1\1\0\2\1\1\11\1\1\1\0\1\1"+
    "\1\11\1\1\1\0\2\11\1\0\2\1\1\11\1\1"+
    "\1\11\1\1\1\11\1\1\1\0\1\11\2\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[325];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //--------> Codigo de Usuario en sintaxis Java
    public Cola ErroresLexicos = new Cola();



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analisis_Lexico(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Simbolos.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(YYINITIAL); return new Symbol(Simbolos.texto, yycolumn, yyline, yytext());
            } 
            // fall through
          case 80: break;
          case 2: 
            { System.out.println("Error Lexico Lexema: " + yytext() + " Fila: " + yyline + " Columna: " + yycolumn);
                                        Errores error = new Errores(yytext(),yyline,yycolumn
                                            ,"Error Lexico, No Especificado en el Lenguaje","Lexico");
                                        ErroresLexicos.insertar(error);
            } 
            // fall through
          case 81: break;
          case 3: 
            { return new Symbol(Simbolos.entero, yycolumn, yyline, yytext());
            } 
            // fall through
          case 82: break;
          case 4: 
            { return new Symbol(Simbolos.identificador, yycolumn, yyline, yytext());
            } 
            // fall through
          case 83: break;
          case 5: 
            { /* Espacios en blanco se ignoran */
            } 
            // fall through
          case 84: break;
          case 6: 
            { return new Symbol(Simbolos.division, yycolumn, yyline, yytext());
            } 
            // fall through
          case 85: break;
          case 7: 
            { return new Symbol(Simbolos.multiplicacion, yycolumn, yyline, yytext());
            } 
            // fall through
          case 86: break;
          case 8: 
            { return new Symbol(Simbolos.llaveA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 87: break;
          case 9: 
            { return new Symbol(Simbolos.resta, yycolumn, yyline, yytext());
            } 
            // fall through
          case 88: break;
          case 10: 
            { return new Symbol(Simbolos.suma, yycolumn, yyline, yytext());
            } 
            // fall through
          case 89: break;
          case 11: 
            { return new Symbol(Simbolos.igual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 90: break;
          case 12: 
            { return new Symbol(Simbolos.not, yycolumn, yyline, yytext());
            } 
            // fall through
          case 91: break;
          case 13: 
            { return new Symbol(Simbolos.menorQue, yycolumn, yyline, yytext());
            } 
            // fall through
          case 92: break;
          case 14: 
            { return new Symbol(Simbolos.mayorQue, yycolumn, yyline, yytext());
            } 
            // fall through
          case 93: break;
          case 15: 
            { return new Symbol(Simbolos.logicoXOR, yycolumn, yyline, yytext());
            } 
            // fall through
          case 94: break;
          case 16: 
            { return new Symbol(Simbolos.parentesisA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 95: break;
          case 17: 
            { return new Symbol(Simbolos.parentesisC, yycolumn, yyline, yytext());
            } 
            // fall through
          case 96: break;
          case 18: 
            { return new Symbol(Simbolos.llaveC, yycolumn, yyline, yytext());
            } 
            // fall through
          case 97: break;
          case 19: 
            { return new Symbol(Simbolos.corcheteA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 98: break;
          case 20: 
            { return new Symbol(Simbolos.corcheteC, yycolumn, yyline, yytext());
            } 
            // fall through
          case 99: break;
          case 21: 
            { return new Symbol(Simbolos.dosPuntos, yycolumn, yyline, yytext());
            } 
            // fall through
          case 100: break;
          case 22: 
            { return new Symbol(Simbolos.puntoComa, yycolumn, yyline, yytext());
            } 
            // fall through
          case 101: break;
          case 23: 
            { return new Symbol(Simbolos.coma, yycolumn, yyline, yytext());
            } 
            // fall through
          case 102: break;
          case 24: 
            { return new Symbol(Simbolos.posicionX, yycolumn, yyline, yytext());
            } 
            // fall through
          case 103: break;
          case 25: 
            { return new Symbol(Simbolos.posicionY, yycolumn, yyline, yytext());
            } 
            // fall through
          case 104: break;
          case 26: 
            { yybegin(YYINITIAL); return new Symbol(Simbolos.llaveA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 105: break;
          case 27: 
            { yybegin(YYINITIAL); return new Symbol(Simbolos.menorQue, yycolumn, yyline, yytext());
            } 
            // fall through
          case 106: break;
          case 28: 
            { yybegin(TEXTO); return new Symbol(Simbolos.mayorQue, yycolumn, yyline, yytext());
            } 
            // fall through
          case 107: break;
          case 29: 
            { return new Symbol(Simbolos.cadena, yycolumn, yyline, yytext());
            } 
            // fall through
          case 108: break;
          case 30: 
            { return new Symbol(Simbolos.si, yycolumn, yyline, yytext());
            } 
            // fall through
          case 109: break;
          case 31: 
            { 
            } 
            // fall through
          case 110: break;
          case 32: 
            { return new Symbol(Simbolos.logicoOR, yycolumn, yyline, yytext());
            } 
            // fall through
          case 111: break;
          case 33: 
            { return new Symbol(Simbolos.igualigual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 112: break;
          case 34: 
            { return new Symbol(Simbolos.diferente, yycolumn, yyline, yytext());
            } 
            // fall through
          case 113: break;
          case 35: 
            { return new Symbol(Simbolos.menorIgual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 114: break;
          case 36: 
            { return new Symbol(Simbolos.mayorIgual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 115: break;
          case 37: 
            { return new Symbol(Simbolos.logicoAND, yycolumn, yyline, yytext());
            } 
            // fall through
          case 116: break;
          case 38: 
            { return new Symbol(Simbolos.id, yycolumn, yyline, yytext());
            } 
            // fall through
          case 117: break;
          case 39: 
            { yybegin(YYINITIAL); return new Symbol(Simbolos.cadena, yycolumn, yyline, yytext());
            } 
            // fall through
          case 118: break;
          case 40: 
            { return new Symbol(Simbolos.doble, yycolumn, yyline, yytext());
            } 
            // fall through
          case 119: break;
          case 41: 
            { return new Symbol(Simbolos.fuente, yycolumn, yyline, yytext());
            } 
            // fall through
          case 120: break;
          case 42: 
            { return new Symbol(Simbolos.caracter, yycolumn, yyline, yytext());
            } 
            // fall through
          case 121: break;
          case 43: 
            { return new Symbol(Simbolos.var, yycolumn, yyline, yytext());
            } 
            // fall through
          case 122: break;
          case 44: 
            { return new Symbol(Simbolos.potencia, yycolumn, yyline, yytext());
            } 
            // fall through
          case 123: break;
          case 45: 
            { return new Symbol(Simbolos.max, yycolumn, yyline, yytext());
            } 
            // fall through
          case 124: break;
          case 46: 
            { return new Symbol(Simbolos.min, yycolumn, yyline, yytext());
            } 
            // fall through
          case 125: break;
          case 47: 
            { return new Symbol(Simbolos.booleano, yycolumn, yyline, yytext());
            } 
            // fall through
          case 126: break;
          case 48: 
            { yybegin(ETIQUETA); return new Symbol(Simbolos.textt, yycolumn, yyline, yytext());
            } 
            // fall through
          case 127: break;
          case 49: 
            { return new Symbol(Simbolos.from, yycolumn, yyline, yytext());
            } 
            // fall through
          case 128: break;
          case 50: 
            { return new Symbol(Simbolos.list, yycolumn, yyline, yytext());
            } 
            // fall through
          case 129: break;
          case 51: 
            { return new Symbol(Simbolos.sino, yycolumn, yyline, yytext());
            } 
            // fall through
          case 130: break;
          case 52: 
            { yybegin(ETIQUETA); return new Symbol(Simbolos.items, yycolumn, yyline, yytext());
            } 
            // fall through
          case 131: break;
          case 53: 
            { return new Symbol(Simbolos.ftext, yycolumn, yyline, yytext());
            } 
            // fall through
          case 132: break;
          case 54: 
            { return new Symbol(Simbolos.fitem, yycolumn, yyline, yytext());
            } 
            // fall through
          case 133: break;
          case 55: 
            { return new Symbol(Simbolos.panel, yycolumn, yyline, yytext());
            } 
            // fall through
          case 134: break;
          case 56: 
            { return new Symbol(Simbolos.width, yycolumn, yyline, yytext());
            } 
            // fall through
          case 135: break;
          case 57: 
            { return new Symbol(Simbolos.color, yycolumn, yyline, yytext());
            } 
            // fall through
          case 136: break;
          case 58: 
            { return new Symbol(Simbolos.image, yycolumn, yyline, yytext());
            } 
            // fall through
          case 137: break;
          case 59: 
            { return new Symbol(Simbolos.retorno, yycolumn, yyline, yytext());
            } 
            // fall through
          case 138: break;
          case 60: 
            { return new Symbol(Simbolos.render, yycolumn, yyline, yytext());
            } 
            // fall through
          case 139: break;
          case 61: 
            { yybegin(ETIQUETA); return new Symbol(Simbolos.button, yycolumn, yyline, yytext());
            } 
            // fall through
          case 140: break;
          case 62: 
            { return new Symbol(Simbolos.border, yycolumn, yyline, yytext());
            } 
            // fall through
          case 141: break;
          case 63: 
            { return new Symbol(Simbolos.importar, yycolumn, yyline, yytext());
            } 
            // fall through
          case 142: break;
          case 64: 
            { return new Symbol(Simbolos.height, yycolumn, yyline, yytext());
            } 
            // fall through
          case 143: break;
          case 65: 
            { return new Symbol(Simbolos.repetir, yycolumn, yyline, yytext());
            } 
            // fall through
          case 144: break;
          case 66: 
            { yybegin(ETIQUETA); return new Symbol(Simbolos.spinner, yycolumn, yyline, yytext());
            } 
            // fall through
          case 145: break;
          case 67: 
            { return new Symbol(Simbolos.fbutton, yycolumn, yyline, yytext());
            } 
            // fall through
          case 146: break;
          case 68: 
            { return new Symbol(Simbolos.hexadecimal, yycolumn, yyline, yytext());
            } 
            // fall through
          case 147: break;
          case 69: 
            { yybegin(ETIQUETA); return new Symbol(Simbolos.defecto, yycolumn, yyline, yytext());
            } 
            // fall through
          case 148: break;
          case 70: 
            { return new Symbol(Simbolos.onClick, yycolumn, yyline, yytext());
            } 
            // fall through
          case 149: break;
          case 71: 
            { return new Symbol(Simbolos.element, yycolumn, yyline, yytext());
            } 
            // fall through
          case 150: break;
          case 72: 
            { return new Symbol(Simbolos.fspinner, yycolumn, yyline, yytext());
            } 
            // fall through
          case 151: break;
          case 73: 
            { return new Symbol(Simbolos.fdefecto, yycolumn, yyline, yytext());
            } 
            // fall through
          case 152: break;
          case 74: 
            { return new Symbol(Simbolos.mientras, yycolumn, yyline, yytext());
            } 
            // fall through
          case 153: break;
          case 75: 
            { return new Symbol(Simbolos.imprimir, yycolumn, yyline, yytext());
            } 
            // fall through
          case 154: break;
          case 76: 
            { yybegin(ETIQUETA); return new Symbol(Simbolos.textField, yycolumn, yyline, yytext());
            } 
            // fall through
          case 155: break;
          case 77: 
            { return new Symbol(Simbolos.className, yycolumn, yyline, yytext());
            } 
            // fall through
          case 156: break;
          case 78: 
            { return new Symbol(Simbolos.component, yycolumn, yyline, yytext());
            } 
            // fall through
          case 157: break;
          case 79: 
            { return new Symbol(Simbolos.ftextField, yycolumn, yyline, yytext());
            } 
            // fall through
          case 158: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
