/* The following code was generated by JFlex 1.7.0 */


/*--------- 1ra Area: Codigo de Usuario ---------*/

//--------> Paquetes e importaciones
package Analizadores.UFE;
import java_cup.runtime.*;
import Estructuras.Cola;
import Modelos.Errores;

/*--------- 2da Area: Opciones y Declaraciones ---------*/


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Lexico.jflex</tt>
 */
public class Analisis_Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int TEXTO = 2;
  public static final int ETIQUETA = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 26, 13, 13, 13, 13,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    26, 35,  3, 19,  0,  0, 38, 12, 40, 41, 18, 30, 46, 29,  2, 17, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0, 45, 36, 34, 37,  0, 
     0,  9, 59, 47, 53,  7,  8, 58, 57, 52, 14, 61, 10, 49, 50, 32, 
    31, 14,  5, 15,  4,  6, 27, 33, 55, 56, 14, 43,  0, 44, 39, 16, 
     0, 22, 23, 48, 54, 20, 21, 58, 57, 52, 14, 61, 10, 49, 50, 32, 
    31, 14,  5, 15,  4,  6, 28, 33, 55, 56, 14, 24, 25, 42,  0,  0, 
     0,  0,  0,  0,  0, 13,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    26,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\1\1\2\1\3\1\2\6\4\2\2\1\1\1\4"+
    "\1\5\1\6\1\2\1\4\1\7\1\1\1\4\1\1"+
    "\1\10\1\11\2\4\1\12\1\13\1\14\1\15\1\2"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\2\4\1\2\2\4\1\26\1\27\1\4\1\30\1\1"+
    "\1\31\1\32\3\4\1\1\1\4\1\12\1\33\1\4"+
    "\1\2\1\4\2\0\1\34\6\4\1\0\1\4\2\0"+
    "\1\35\1\0\2\4\1\35\2\0\1\36\5\0\2\4"+
    "\1\37\3\4\1\0\1\4\1\40\1\41\1\42\1\43"+
    "\1\44\3\4\1\0\1\4\2\0\1\45\2\4\1\45"+
    "\4\4\1\46\10\4\1\0\1\4\1\47\2\0\1\50"+
    "\1\47\2\4\7\0\2\4\1\51\1\4\1\52\1\0"+
    "\4\4\1\53\1\0\1\54\1\4\1\54\3\0\4\4"+
    "\1\0\2\4\1\55\1\56\4\4\1\57\1\0\2\60"+
    "\1\0\1\61\1\4\1\61\2\0\1\36\4\0\3\4"+
    "\1\0\1\4\1\0\3\4\1\0\1\4\1\62\3\0"+
    "\1\62\4\4\1\0\7\4\1\55\1\0\1\4\1\63"+
    "\2\0\1\64\2\0\2\4\1\65\2\66\1\0\1\4"+
    "\1\67\1\4\1\0\1\4\1\70\2\0\1\70\3\4"+
    "\1\0\1\4\1\0\1\4\1\0\1\4\1\71\1\0"+
    "\1\4\1\72\1\4\1\0\1\4\5\0\1\73\1\74"+
    "\1\0\2\4\1\0\1\4\1\0\1\75\1\4\1\75"+
    "\1\4\2\76\1\0\1\4\1\0\1\4\2\77\1\4"+
    "\2\100\2\0\1\101\1\0\1\102\1\0\2\4\1\0"+
    "\1\4\1\0\1\4\1\103\2\104\1\0\1\4\2\105"+
    "\1\0\1\106\1\107\1\0\2\4\2\110\2\111\2\112"+
    "\1\0\2\113\1\114\1\115";

  private static int [] zzUnpackAction() {
    int [] result = new int[320];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2"+
    "\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0326\0\u0364\0\u03a2"+
    "\0\u03e0\0\272\0\u041e\0\u045c\0\272\0\u049a\0\u04d8\0\u0516"+
    "\0\272\0\272\0\u0554\0\u0592\0\u05d0\0\u060e\0\u064c\0\u068a"+
    "\0\u06c8\0\272\0\272\0\272\0\272\0\272\0\272\0\272"+
    "\0\272\0\u0706\0\u0744\0\u0782\0\u07c0\0\u07fe\0\u01f0\0\u01f0"+
    "\0\u083c\0\u087a\0\u08b8\0\272\0\272\0\u08f6\0\u0934\0\u0972"+
    "\0\u09b0\0\u09ee\0\272\0\272\0\u0a2c\0\u0a6a\0\u0aa8\0\u0ae6"+
    "\0\u0136\0\272\0\u0b24\0\u0b62\0\u0ba0\0\u0bde\0\u0c1c\0\u0c5a"+
    "\0\u0c98\0\u0cd6\0\u0d14\0\u0d52\0\u0d90\0\u0dce\0\u0e0c\0\u0e4a"+
    "\0\u0e88\0\u0ec6\0\u0f04\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc\0\u103a"+
    "\0\u1078\0\u10b6\0\u10f4\0\u0364\0\u1132\0\u1170\0\u11ae\0\u11ec"+
    "\0\u122a\0\272\0\272\0\272\0\272\0\272\0\u1268\0\u12a6"+
    "\0\u12e4\0\u1322\0\u1360\0\u139e\0\u13dc\0\272\0\u141a\0\u1458"+
    "\0\u01f0\0\u1496\0\u14d4\0\u1512\0\u1550\0\u0ae6\0\u158e\0\u15cc"+
    "\0\u160a\0\u1648\0\u1686\0\u16c4\0\u1702\0\u1740\0\u177e\0\u17bc"+
    "\0\272\0\u17fa\0\u1838\0\272\0\u01f0\0\u1876\0\u18b4\0\u18f2"+
    "\0\u1930\0\u196e\0\u19ac\0\u19ea\0\u1a28\0\u1a66\0\u1aa4\0\u1ae2"+
    "\0\u01f0\0\u1b20\0\u01f0\0\u1b5e\0\u1b9c\0\u1bda\0\u1c18\0\u1c56"+
    "\0\u01f0\0\u1c94\0\272\0\u1cd2\0\u01f0\0\u1d10\0\u1d4e\0\u1d8c"+
    "\0\u1dca\0\u1e08\0\u1e46\0\u1e84\0\u1ec2\0\u1f00\0\u1f3e\0\u01f0"+
    "\0\u1f7c\0\u1fba\0\u1ff8\0\u2036\0\u2074\0\u01f0\0\u20b2\0\272"+
    "\0\u01f0\0\u20f0\0\272\0\u212e\0\u01f0\0\u216c\0\u21aa\0\272"+
    "\0\u21e8\0\u2226\0\u2264\0\u22a2\0\u22e0\0\u231e\0\u235c\0\u239a"+
    "\0\u23d8\0\u2416\0\u2454\0\u2492\0\u24d0\0\u250e\0\u254c\0\272"+
    "\0\u258a\0\u25c8\0\u2606\0\u01f0\0\u2644\0\u2682\0\u26c0\0\u26fe"+
    "\0\u273c\0\u277a\0\u27b8\0\u27f6\0\u2834\0\u2872\0\u28b0\0\u28ee"+
    "\0\272\0\u292c\0\u296a\0\u29a8\0\u29e6\0\u2a24\0\272\0\u2a62"+
    "\0\u2aa0\0\u2ade\0\u2b1c\0\u01f0\0\272\0\u01f0\0\u2b5a\0\u2b98"+
    "\0\u01f0\0\u2bd6\0\u2c14\0\u2c52\0\272\0\u2c90\0\u2cce\0\u01f0"+
    "\0\u2d0c\0\u2d4a\0\u2d88\0\u2dc6\0\u2e04\0\u2e42\0\u2e80\0\u2ebe"+
    "\0\u2efc\0\u01f0\0\u2f3a\0\u2f78\0\u01f0\0\u2fb6\0\u2ff4\0\u3032"+
    "\0\u3070\0\u30ae\0\u30ec\0\u312a\0\u3168\0\u01f0\0\u01f0\0\u31a6"+
    "\0\u31e4\0\u3222\0\u3260\0\u329e\0\u32dc\0\272\0\u331a\0\u01f0"+
    "\0\u3358\0\272\0\u01f0\0\u3396\0\u33d4\0\u3412\0\u3450\0\272"+
    "\0\u01f0\0\u348e\0\272\0\u01f0\0\u34cc\0\u350a\0\272\0\u3548"+
    "\0\272\0\u3586\0\u35c4\0\u3602\0\u3640\0\u367e\0\u36bc\0\u36fa"+
    "\0\u01f0\0\272\0\u01f0\0\u3738\0\u3776\0\272\0\u01f0\0\u37b4"+
    "\0\272\0\272\0\u37f2\0\u3830\0\u386e\0\272\0\u01f0\0\272"+
    "\0\u01f0\0\272\0\u01f0\0\u38ac\0\272\0\u01f0\0\u01f0\0\272";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[320];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\4\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\11\1\14\1\15\1\16\1\17\1\11\1\20"+
    "\1\4\1\21\1\22\1\23\1\12\1\13\1\11\1\24"+
    "\1\25\1\26\1\17\1\27\1\30\1\31\1\32\1\33"+
    "\1\11\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\2\52"+
    "\1\53\1\11\1\54\1\55\2\56\1\57\1\60\1\61"+
    "\1\11\1\24\1\4\1\11\15\62\1\63\12\62\1\64"+
    "\1\17\1\63\1\62\1\63\7\62\1\65\3\62\2\4"+
    "\24\62\1\4\1\5\1\4\1\6\1\66\3\11\1\67"+
    "\2\11\1\4\1\16\1\17\2\11\4\4\1\11\1\67"+
    "\1\11\1\70\1\25\2\17\1\11\1\71\2\4\1\11"+
    "\1\72\1\34\1\73\2\4\1\74\4\4\1\45\4\4"+
    "\2\75\2\11\1\76\1\77\2\11\1\57\1\60\1\61"+
    "\1\11\1\70\1\4\1\11\77\0\1\5\1\100\73\0"+
    "\3\101\1\102\72\101\1\0\1\11\2\0\1\11\1\103"+
    "\1\11\1\104\3\11\3\0\3\11\3\0\1\104\3\11"+
    "\1\0\1\11\1\0\2\11\2\0\3\11\15\0\4\11"+
    "\1\0\10\11\1\0\1\11\1\0\1\11\2\0\3\11"+
    "\1\105\3\11\3\0\3\11\3\0\1\105\3\11\1\0"+
    "\1\11\1\0\2\11\2\0\3\11\15\0\4\11\1\0"+
    "\10\11\1\0\1\11\1\0\1\11\2\0\7\11\3\0"+
    "\3\11\3\0\4\11\1\0\1\11\1\0\2\11\2\0"+
    "\3\11\15\0\4\11\1\0\10\11\1\0\1\11\1\0"+
    "\1\11\2\0\6\11\1\106\3\0\3\11\3\0\4\11"+
    "\1\0\1\11\1\0\2\11\2\0\3\11\15\0\4\11"+
    "\1\0\10\11\1\0\1\11\1\0\1\11\2\0\1\11"+
    "\1\107\3\11\1\110\1\11\3\0\3\11\3\0\2\11"+
    "\1\110\1\11\1\0\1\11\1\0\2\11\2\0\3\11"+
    "\15\0\4\11\1\0\10\11\1\0\1\11\1\0\1\11"+
    "\2\0\7\11\3\0\3\11\3\0\4\11\1\0\1\11"+
    "\1\0\2\11\2\0\3\11\15\0\4\11\1\111\1\112"+
    "\7\11\1\0\1\11\5\0\1\113\31\0\1\114\23\0"+
    "\2\115\11\0\15\116\1\0\60\116\15\0\1\17\13\0"+
    "\2\17\1\0\1\17\42\0\1\11\2\0\1\11\1\117"+
    "\5\11\3\0\3\11\3\0\4\11\1\0\1\11\1\0"+
    "\2\11\2\0\1\120\2\11\15\0\4\11\1\115\1\121"+
    "\7\11\1\0\1\11\4\0\1\122\6\0\1\123\3\0"+
    "\1\123\1\0\1\124\1\125\4\0\1\126\33\0\2\127"+
    "\2\130\4\0\1\126\3\0\1\131\22\0\4\131\30\0"+
    "\1\131\5\0\1\131\10\0\1\11\2\0\2\11\1\132"+
    "\4\11\3\0\3\11\3\0\4\11\1\0\1\11\1\0"+
    "\2\11\2\0\1\11\1\133\1\11\15\0\4\11\1\0"+
    "\10\11\1\0\1\11\15\0\1\17\13\0\1\134\1\17"+
    "\1\0\1\17\42\0\1\11\2\0\5\11\1\135\1\11"+
    "\3\0\3\11\3\0\2\11\1\135\1\11\1\0\1\11"+
    "\1\0\2\11\2\0\3\11\15\0\4\11\1\0\10\11"+
    "\1\0\1\11\1\0\1\11\2\0\5\11\1\135\1\11"+
    "\2\0\1\17\3\11\3\0\2\11\1\135\1\11\1\0"+
    "\1\71\1\17\1\11\1\71\2\0\3\11\15\0\4\11"+
    "\1\0\10\11\1\0\1\11\1\0\1\11\2\0\5\11"+
    "\1\136\1\11\3\0\3\11\3\0\2\11\1\136\1\11"+
    "\1\0\1\11\1\0\2\11\2\0\1\11\1\137\1\11"+
    "\15\0\4\11\1\0\10\11\1\0\1\11\1\0\1\11"+
    "\2\0\7\11\3\0\3\11\3\0\4\11\1\0\1\11"+
    "\1\0\2\11\2\0\3\11\15\0\4\11\1\140\1\141"+
    "\7\11\1\0\1\11\42\0\1\142\75\0\1\143\75\0"+
    "\1\144\75\0\1\145\101\0\1\146\30\0\1\11\2\0"+
    "\6\11\1\147\3\0\3\11\3\0\4\11\1\0\1\11"+
    "\1\0\2\11\2\0\1\11\1\150\1\11\15\0\4\11"+
    "\1\0\10\11\1\0\1\11\1\0\1\11\2\0\5\11"+
    "\1\151\1\11\3\0\3\11\3\0\2\11\1\151\1\11"+
    "\1\0\1\11\1\0\2\11\2\0\3\11\15\0\4\11"+
    "\1\152\1\153\7\11\1\0\1\11\4\0\1\154\54\0"+
    "\1\155\3\0\2\156\10\0\1\11\2\0\1\157\6\11"+
    "\3\0\3\11\3\0\4\11\1\0\1\11\1\0\2\11"+
    "\2\0\3\11\15\0\2\11\1\160\1\11\1\0\1\11"+
    "\2\161\5\11\1\0\1\11\1\0\1\11\2\0\3\11"+
    "\1\162\3\11\3\0\3\11\3\0\1\162\3\11\1\0"+
    "\1\11\1\0\2\11\2\0\3\11\15\0\4\11\1\0"+
    "\10\11\1\0\1\11\1\0\1\11\2\0\3\11\1\163"+
    "\3\11\3\0\3\11\3\0\1\163\3\11\1\0\1\11"+
    "\1\0\2\11\2\0\3\11\15\0\4\11\1\0\10\11"+
    "\1\0\1\11\30\62\2\0\12\62\1\0\3\62\2\0"+
    "\41\62\1\63\12\62\1\0\1\17\1\63\1\62\1\63"+
    "\7\62\1\0\3\62\2\0\24\62\1\0\1\11\2\0"+
    "\1\11\1\103\5\11\3\0\3\11\3\0\4\11\1\0"+
    "\1\11\1\0\2\11\2\0\3\11\15\0\4\11\1\0"+
    "\10\11\1\0\1\11\1\0\1\11\2\0\5\11\1\110"+
    "\1\11\3\0\3\11\3\0\2\11\1\110\1\11\1\0"+
    "\1\11\1\0\2\11\2\0\3\11\15\0\4\11\1\0"+
    "\10\11\1\0\1\11\1\0\1\11\2\0\7\11\3\0"+
    "\3\11\3\0\4\11\1\0\1\11\1\0\2\11\2\0"+
    "\1\11\1\133\1\11\15\0\4\11\1\0\10\11\1\0"+
    "\1\11\1\0\1\11\2\0\7\11\2\0\1\17\3\11"+
    "\3\0\4\11\1\0\1\71\1\17\1\11\1\71\2\0"+
    "\3\11\15\0\4\11\1\0\10\11\1\0\1\11\1\0"+
    "\1\11\2\0\7\11\3\0\3\11\3\0\4\11\1\0"+
    "\1\11\1\0\2\11\2\0\3\11\15\0\3\11\1\164"+
    "\1\0\10\11\1\0\1\11\1\0\1\11\2\0\6\11"+
    "\1\147\3\0\3\11\3\0\4\11\1\0\1\11\1\0"+
    "\2\11\2\0\1\11\1\165\1\11\15\0\4\11\1\0"+
    "\10\11\1\0\1\11\65\0\2\156\10\0\1\11\2\0"+
    "\7\11\3\0\3\11\3\0\4\11\1\0\1\11\1\0"+
    "\2\11\2\0\3\11\15\0\4\11\1\0\1\11\2\161"+
    "\5\11\1\0\1\11\1\0\1\166\75\0\1\11\2\0"+
    "\2\11\1\167\4\11\3\0\3\11\3\0\4\11\1\0"+
    "\1\11\1\0\2\11\2\0\3\11\15\0\4\11\1\0"+
    "\10\11\1\0\1\11\1\0\1\11\2\0\7\11\3\0"+
    "\3\11\3\0\4\11\1\0\1\11\1\0\2\11\2\0"+
    "\3\11\15\0\4\11\1\0\3\11\1\170\4\11\1\0"+
    "\1\11\1\0\1\11\2\0\1\171\6\11\3\0\3\11"+
    "\3\0\4\11\1\0\1\11\1\0\2\11\2\0\1\172"+
    "\2\11\15\0\3\11\1\173\1\0\10\11\1\0\1\11"+
    "\1\0\1\11\2\0\3\11\1\174\3\11\3\0\3\11"+
    "\3\0\1\174\3\11\1\0\1\11\1\0\2\11\2\0"+
    "\3\11\15\0\4\11\1\0\10\11\1\0\1\11\1\0"+
    "\1\11\2\0\7\11\3\0\3\11\3\0\4\11\1\0"+
    "\1\11\1\0\2\11\2\0\1\11\1\175\1\11\15\0"+
    "\4\11\1\0\10\11\1\0\1\11\1\0\1\11\2\0"+
    "\6\11\1\176\3\0\3\11\3\0\4\11\1\0\1\11"+
    "\1\0\2\11\2\0\3\11\15\0\4\11\1\0\10\11"+
    "\1\0\1\11\13\0\1\177\3\0\1\177\57\0\1\11"+
    "\2\0\7\11\1\177\2\0\1\11\1\200\1\11\3\0"+
    "\4\11\1\0\1\11\1\0\2\11\2\0\3\11\15\0"+
    "\4\11\1\0\10\11\1\0\1\11\57\0\2\201\100\0"+
    "\2\202\73\0\1\203\27\0\1\204\62\0\1\11\2\0"+
    "\7\11\3\0\3\11\3\0\4\11\1\0\1\11\1\0"+
    "\2\11\2\0\3\11\15\0\2\205\2\11\1\0\10\11"+
    "\1\0\1\11\1\0\1\11\2\0\7\11\3\0\3\11"+
    "\3\0\4\11\1\0\1\11\1\0\2\11\2\0\3\11"+
    "\15\0\4\11\1\202\1\206\7\11\1\0\1\11\1\0"+
    "\1\11\2\0\7\11\3\0\3\11\3\0\4\11\1\0"+
    "\1\11\1\0\2\11\2\0\3\11\15\0\3\11\1\207"+
    "\1\0\10\11\1\0\1\11\7\0\1\210\14\0\1\210"+
    "\110\0\1\211\36\0\15\124\1\0\60\124\22\125\1\212"+
    "\53\125\6\0\1\213\73\0\1\214\100\0\1\215\14\0"+
    "\1\215\52\0\1\216\22\0\4\216\30\0\1\216\5\0"+
    "\1\216\10\0\1\11\2\0\1\217\6\11\3\0\3\11"+
    "\3\0\4\11\1\0\1\11\1\0\2\11\2\0\3\11"+
    "\15\0\4\11\1\0\10\11\1\0\1\11\1\0\1\11"+
    "\2\0\1\11\1\220\5\11\3\0\3\11\3\0\4\11"+
    "\1\0\1\11\1\0\2\11\2\0\3\11\15\0\4\11"+
    "\1\0\10\11\1\0\1\11\1\0\1\11\2\0\1\11"+
    "\1\221\5\11\3\0\3\11\3\0\4\11\1\0\1\11"+
    "\1\0\2\11\2\0\3\11\15\0\4\11\1\0\10\11"+
    "\1\0\1\11\1\0\1\11\2\0\7\11\3\0\3\11"+
    "\3\0\4\11\1\0\1\11\1\0\2\11\2\0\3\11"+
    "\15\0\3\11\1\222\1\0\10\11\1\0\1\11\1\0"+
    "\1\11\2\0\7\11\3\0\3\11\3\0\4\11\1\0"+
    "\1\11\1\0\2\11\2\0\2\11\1\223\15\0\4\11"+
    "\1\0\10\11\1\0\1\11\65\0\2\224\10\0\1\11"+
    "\2\0\7\11\3\0\3\11\3\0\4\11\1\0\1\11"+
    "\1\0\2\11\2\0\3\11\15\0\4\11\1\0\1\11"+
    "\2\225\5\11\1\0\1\11\1\0\1\11\2\0\5\11"+
    "\1\226\1\11\3\0\3\11\3\0\2\11\1\226\1\11"+
    "\1\0\1\11\1\0\2\11\2\0\3\11\15\0\4\11"+
    "\1\0\10\11\1\0\1\11\1\0\1\11\2\0\6\11"+
    "\1\227\3\0\3\11\3\0\4\11\1\0\1\11\1\0"+
    "\2\11\2\0\3\11\15\0\2\11\1\230\1\11\1\0"+
    "\10\11\1\0\1\11\1\0\1\11\2\0\7\11\3\0"+
    "\3\11\3\0\4\11\1\0\1\11\1\0\2\11\2\0"+
    "\3\11\15\0\4\11\1\0\3\11\1\231\4\11\1\0"+
    "\1\11\7\0\1\232\14\0\1\232\35\0\1\233\14\0"+
    "\1\11\2\0\3\11\1\234\3\11\3\0\3\11\3\0"+
    "\1\234\3\11\1\0\1\11\1\0\2\11\2\0\3\11"+
    "\15\0\3\11\1\235\1\0\10\11\1\0\1\11\7\0"+
    "\1\236\14\0\1\236\62\0\1\237\14\0\1\237\10\0"+
    "\1\240\37\0\1\11\2\0\3\11\1\241\3\11\3\0"+
    "\3\11\3\0\1\241\3\11\1\0\1\11\1\0\2\11"+
    "\2\0\3\11\15\0\4\11\1\0\10\11\1\0\1\11"+
    "\1\0\1\11\2\0\5\11\1\242\1\11\3\0\3\11"+
    "\3\0\2\11\1\242\1\11\1\0\1\11\1\0\2\11"+
    "\2\0\1\243\2\11\15\0\4\11\1\0\10\11\1\0"+
    "\1\11\1\0\1\11\2\0\4\11\1\244\2\11\3\0"+
    "\3\11\3\0\1\11\1\244\2\11\1\0\1\11\1\0"+
    "\2\11\2\0\3\11\15\0\4\11\1\0\10\11\1\0"+
    "\1\11\1\0\1\11\2\0\7\11\3\0\3\11\3\0"+
    "\4\11\1\0\1\11\1\0\2\11\2\0\3\11\15\0"+
    "\4\11\1\245\1\246\7\11\1\0\1\11\1\0\1\11"+
    "\2\0\7\11\3\0\3\11\3\0\4\11\1\0\1\11"+
    "\1\0\2\11\2\0\3\11\15\0\2\247\2\11\1\0"+
    "\10\11\1\0\1\11\1\0\1\11\2\0\6\11\1\227"+
    "\3\0\3\11\3\0\4\11\1\0\1\11\1\0\2\11"+
    "\2\0\3\11\15\0\4\11\1\0\10\11\1\0\1\11"+
    "\1\0\1\11\2\0\3\11\1\250\3\11\3\0\3\11"+
    "\3\0\1\250\3\11\1\0\1\11\1\0\2\11\2\0"+
    "\3\11\15\0\4\11\1\0\10\11\1\0\1\11\1\0"+
    "\1\11\2\0\1\251\6\11\3\0\3\11\3\0\4\11"+
    "\1\0\1\11\1\0\2\11\2\0\3\11\15\0\4\11"+
    "\1\0\10\11\1\0\1\11\1\0\1\11\2\0\2\11"+
    "\1\252\4\11\3\0\3\11\3\0\4\11\1\0\1\11"+
    "\1\0\2\11\2\0\3\11\15\0\4\11\1\0\10\11"+
    "\1\0\1\11\1\0\1\11\2\0\3\11\1\253\3\11"+
    "\3\0\3\11\3\0\1\253\3\11\1\0\1\11\1\0"+
    "\2\11\2\0\3\11\15\0\4\11\1\0\10\11\1\0"+
    "\1\11\1\0\1\11\2\0\7\11\3\0\3\11\3\0"+
    "\4\11\1\0\1\11\1\0\2\11\2\0\3\11\15\0"+
    "\4\11\1\0\1\11\2\254\5\11\1\0\1\11\1\0"+
    "\1\11\2\0\7\11\3\0\3\11\3\0\4\11\1\0"+
    "\1\11\1\0\2\11\2\0\3\11\15\0\2\11\1\255"+
    "\1\11\1\0\10\11\1\0\1\11\1\0\1\11\2\0"+
    "\7\11\3\0\3\11\3\0\4\11\1\0\1\11\1\0"+
    "\2\11\2\0\3\11\15\0\2\11\1\256\1\11\1\0"+
    "\10\11\1\0\1\11\1\0\1\11\2\0\7\11\1\257"+
    "\2\0\1\11\1\167\1\11\3\0\4\11\1\0\1\11"+
    "\1\0\2\11\2\0\3\11\15\0\4\11\1\0\10\11"+
    "\1\0\1\11\4\0\1\260\72\0\1\11\2\0\1\261"+
    "\6\11\3\0\3\11\3\0\4\11\1\0\1\11\1\0"+
    "\2\11\2\0\3\11\15\0\4\11\1\0\10\11\1\0"+
    "\1\11\62\0\1\262\53\0\1\263\36\0\1\11\2\0"+
    "\7\11\3\0\3\11\3\0\4\11\1\0\1\11\1\0"+
    "\2\11\2\0\3\11\15\0\3\11\1\264\1\0\10\11"+
    "\1\0\1\11\1\0\1\11\2\0\7\11\3\0\3\11"+
    "\3\0\4\11\1\0\1\11\1\0\2\11\2\0\1\11"+
    "\1\265\1\11\15\0\4\11\1\0\10\11\1\0\1\11"+
    "\67\0\1\266\71\0\2\267\11\0\21\125\1\270\1\212"+
    "\53\125\4\0\1\271\100\0\1\272\14\0\1\272\61\0"+
    "\1\273\14\0\1\273\51\0\1\274\22\0\4\274\30\0"+
    "\1\274\5\0\1\274\10\0\1\11\2\0\1\275\6\11"+
    "\3\0\3\11\3\0\4\11\1\0\1\11\1\0\2\11"+
    "\2\0\3\11\15\0\4\11\1\0\10\11\1\0\1\11"+
    "\1\0\1\11\2\0\7\11\3\0\3\11\3\0\4\11"+
    "\1\0\1\11\1\0\2\11\2\0\3\11\15\0\4\11"+
    "\1\0\1\11\2\276\5\11\1\0\1\11\1\0\1\11"+
    "\2\0\3\11\1\277\3\11\3\0\3\11\3\0\1\277"+
    "\3\11\1\0\1\11\1\0\2\11\2\0\3\11\15\0"+
    "\4\11\1\0\10\11\1\0\1\11\4\0\1\300\72\0"+
    "\1\11\2\0\1\301\6\11\3\0\3\11\3\0\4\11"+
    "\1\0\1\11\1\0\2\11\2\0\3\11\15\0\4\11"+
    "\1\0\10\11\1\0\1\11\1\0\1\11\2\0\7\11"+
    "\1\302\2\0\1\11\1\303\1\11\3\0\4\11\1\0"+
    "\1\11\1\0\2\11\2\0\3\11\15\0\4\11\1\0"+
    "\10\11\1\0\1\11\1\0\1\11\2\0\7\11\3\0"+
    "\3\11\3\0\4\11\1\0\1\11\1\0\2\11\2\0"+
    "\1\11\1\304\1\11\15\0\4\11\1\0\10\11\1\0"+
    "\1\11\1\0\1\11\2\0\7\11\3\0\3\11\3\0"+
    "\4\11\1\0\1\11\1\0\2\11\2\0\1\305\2\11"+
    "\15\0\4\11\1\0\10\11\1\0\1\11\62\0\1\306"+
    "\14\0\1\11\2\0\7\11\3\0\3\11\3\0\4\11"+
    "\1\0\1\11\1\0\2\11\2\0\3\11\15\0\3\11"+
    "\1\307\1\0\10\11\1\0\1\11\61\0\1\310\106\0"+
    "\1\311\10\0\1\312\32\0\1\313\36\0\1\11\2\0"+
    "\7\11\3\0\3\11\3\0\4\11\1\0\1\11\1\0"+
    "\2\11\2\0\3\11\15\0\2\11\1\314\1\11\1\0"+
    "\10\11\1\0\1\11\1\0\1\11\2\0\7\11\3\0"+
    "\3\11\3\0\4\11\1\0\1\11\1\0\2\11\2\0"+
    "\3\11\15\0\4\11\1\0\6\11\1\315\1\11\1\0"+
    "\1\11\1\0\1\11\2\0\1\11\1\316\5\11\3\0"+
    "\3\11\3\0\4\11\1\0\1\11\1\0\2\11\2\0"+
    "\1\11\1\317\1\11\15\0\4\11\1\0\10\11\1\0"+
    "\1\11\1\0\1\11\2\0\5\11\1\320\1\11\3\0"+
    "\3\11\3\0\2\11\1\320\1\11\1\0\1\11\1\0"+
    "\2\11\2\0\3\11\15\0\4\11\1\0\10\11\1\0"+
    "\1\11\72\0\1\321\4\0\1\11\2\0\7\11\3\0"+
    "\3\11\3\0\4\11\1\0\1\11\1\0\2\11\2\0"+
    "\3\11\15\0\4\11\1\0\6\11\1\322\1\11\1\0"+
    "\1\11\1\0\1\11\2\0\6\11\1\323\3\0\3\11"+
    "\3\0\4\11\1\0\1\11\1\0\2\11\2\0\3\11"+
    "\15\0\4\11\1\0\10\11\1\0\1\11\1\0\1\11"+
    "\2\0\4\11\1\324\2\11\3\0\3\11\3\0\1\11"+
    "\1\324\2\11\1\0\1\11\1\0\2\11\2\0\3\11"+
    "\15\0\4\11\1\0\10\11\1\0\1\11\1\0\1\11"+
    "\2\0\1\11\1\325\5\11\3\0\3\11\3\0\4\11"+
    "\1\0\1\11\1\0\2\11\2\0\3\11\15\0\4\11"+
    "\1\0\10\11\1\0\1\11\1\0\1\11\2\0\1\326"+
    "\6\11\3\0\3\11\3\0\4\11\1\0\1\11\1\0"+
    "\2\11\2\0\3\11\15\0\4\11\1\0\10\11\1\0"+
    "\1\11\1\0\1\11\2\0\3\11\1\327\3\11\3\0"+
    "\3\11\3\0\1\327\3\11\1\0\1\11\1\0\2\11"+
    "\2\0\3\11\15\0\4\11\1\0\10\11\1\0\1\11"+
    "\1\0\1\11\2\0\3\11\1\330\3\11\3\0\3\11"+
    "\3\0\1\330\3\11\1\0\1\11\1\0\2\11\2\0"+
    "\3\11\15\0\4\11\1\0\10\11\1\0\1\11\7\0"+
    "\1\331\14\0\1\331\133\0\1\332\14\0\1\11\2\0"+
    "\7\11\3\0\3\11\3\0\4\11\1\0\1\11\1\0"+
    "\2\11\2\0\3\11\15\0\3\11\1\333\1\0\10\11"+
    "\1\0\1\11\4\0\1\334\153\0\1\335\17\0\1\336"+
    "\152\0\1\337\25\0\1\340\14\0\1\340\50\0\1\341"+
    "\22\0\4\341\30\0\1\341\5\0\1\341\10\0\1\11"+
    "\2\0\7\11\3\0\3\11\3\0\4\11\1\0\1\11"+
    "\1\0\2\11\2\0\1\11\1\342\1\11\15\0\4\11"+
    "\1\0\10\11\1\0\1\11\1\0\1\11\2\0\3\11"+
    "\1\343\3\11\3\0\3\11\3\0\1\343\3\11\1\0"+
    "\1\11\1\0\2\11\2\0\3\11\15\0\4\11\1\0"+
    "\10\11\1\0\1\11\1\0\1\11\2\0\6\11\1\344"+
    "\3\0\3\11\3\0\4\11\1\0\1\11\1\0\2\11"+
    "\2\0\3\11\15\0\4\11\1\0\10\11\1\0\1\11"+
    "\71\0\1\345\5\0\1\11\2\0\7\11\3\0\3\11"+
    "\3\0\4\11\1\0\1\11\1\0\2\11\2\0\3\11"+
    "\15\0\4\11\1\0\5\11\1\346\2\11\1\0\1\11"+
    "\13\0\1\347\3\0\1\347\57\0\1\11\2\0\7\11"+
    "\1\347\2\0\1\11\1\350\1\11\3\0\4\11\1\0"+
    "\1\11\1\0\2\11\2\0\3\11\15\0\4\11\1\0"+
    "\10\11\1\0\1\11\1\0\1\11\2\0\1\11\1\351"+
    "\5\11\3\0\3\11\3\0\4\11\1\0\1\11\1\0"+
    "\2\11\2\0\3\11\15\0\4\11\1\0\10\11\1\0"+
    "\1\11\1\0\1\11\2\0\7\11\3\0\3\11\3\0"+
    "\4\11\1\0\1\11\1\0\2\11\2\0\1\11\1\352"+
    "\1\11\15\0\4\11\1\0\10\11\1\0\1\11\4\0"+
    "\1\353\72\0\1\11\2\0\1\354\6\11\3\0\3\11"+
    "\3\0\4\11\1\0\1\11\1\0\2\11\2\0\3\11"+
    "\15\0\4\11\1\0\10\11\1\0\1\11\7\0\1\355"+
    "\14\0\1\355\134\0\2\356\16\0\1\357\71\0\1\11"+
    "\2\0\3\11\1\360\3\11\3\0\3\11\3\0\1\360"+
    "\3\11\1\0\1\11\1\0\2\11\2\0\3\11\15\0"+
    "\4\11\1\0\10\11\1\0\1\11\1\0\1\11\2\0"+
    "\7\11\3\0\3\11\3\0\4\11\1\0\1\11\1\0"+
    "\2\11\2\0\3\11\15\0\4\11\1\356\1\361\7\11"+
    "\1\0\1\11\1\0\1\11\2\0\1\11\1\362\5\11"+
    "\3\0\3\11\3\0\4\11\1\0\1\11\1\0\2\11"+
    "\2\0\3\11\15\0\4\11\1\0\10\11\1\0\1\11"+
    "\1\0\1\11\2\0\2\11\1\363\4\11\3\0\3\11"+
    "\3\0\4\11\1\0\1\11\1\0\2\11\2\0\3\11"+
    "\15\0\4\11\1\0\10\11\1\0\1\11\71\0\1\364"+
    "\5\0\1\11\2\0\7\11\3\0\3\11\3\0\4\11"+
    "\1\0\1\11\1\0\2\11\2\0\3\11\15\0\4\11"+
    "\1\0\5\11\1\365\2\11\1\0\1\11\1\0\1\11"+
    "\2\0\7\11\3\0\3\11\3\0\4\11\1\0\1\11"+
    "\1\0\2\11\2\0\3\11\15\0\4\11\1\366\1\367"+
    "\7\11\1\0\1\11\1\0\1\11\2\0\7\11\3\0"+
    "\3\11\3\0\4\11\1\0\1\11\1\0\2\11\2\0"+
    "\3\11\15\0\4\11\1\370\1\371\7\11\1\0\1\11"+
    "\1\0\1\11\2\0\7\11\3\0\3\11\3\0\4\11"+
    "\1\0\1\11\1\0\2\11\2\0\3\11\15\0\3\11"+
    "\1\372\1\0\10\11\1\0\1\11\1\0\1\11\2\0"+
    "\7\11\3\0\3\11\3\0\4\11\1\0\1\11\1\0"+
    "\2\11\2\0\3\11\15\0\4\11\1\373\1\374\7\11"+
    "\1\0\1\11\1\0\1\11\2\0\1\11\1\375\5\11"+
    "\3\0\3\11\3\0\4\11\1\0\1\11\1\0\2\11"+
    "\2\0\3\11\15\0\4\11\1\0\10\11\1\0\1\11"+
    "\1\0\1\11\2\0\7\11\3\0\3\11\3\0\4\11"+
    "\1\0\1\11\1\0\2\11\2\0\3\11\15\0\3\11"+
    "\1\376\1\0\10\11\1\0\1\11\7\0\1\377\14\0"+
    "\1\377\52\0\1\11\2\0\3\11\1\u0100\3\11\3\0"+
    "\3\11\3\0\1\u0100\3\11\1\0\1\11\1\0\2\11"+
    "\2\0\3\11\15\0\4\11\1\0\10\11\1\0\1\11"+
    "\10\0\1\u0101\14\0\1\u0101\132\0\1\u0102\53\0\1\u0103"+
    "\43\0\1\u0104\70\0\1\u0105\22\0\4\u0105\30\0\1\u0105"+
    "\5\0\1\u0105\10\0\1\11\2\0\7\11\3\0\3\11"+
    "\3\0\4\11\1\0\1\11\1\0\2\11\2\0\3\11"+
    "\15\0\3\11\1\u0106\1\0\10\11\1\0\1\11\1\0"+
    "\1\11\2\0\1\11\1\u0107\5\11\3\0\3\11\3\0"+
    "\4\11\1\0\1\11\1\0\2\11\2\0\3\11\15\0"+
    "\4\11\1\0\10\11\1\0\1\11\62\0\1\u0108\14\0"+
    "\1\11\2\0\7\11\3\0\3\11\3\0\4\11\1\0"+
    "\1\11\1\0\2\11\2\0\3\11\15\0\3\11\1\u0109"+
    "\1\0\10\11\1\0\1\11\1\0\1\11\2\0\7\11"+
    "\3\0\3\11\3\0\4\11\1\0\1\11\1\0\2\11"+
    "\2\0\3\11\15\0\3\11\1\u010a\1\0\10\11\1\0"+
    "\1\11\5\0\1\u010b\71\0\1\11\2\0\1\11\1\u010c"+
    "\5\11\3\0\3\11\3\0\4\11\1\0\1\11\1\0"+
    "\2\11\2\0\3\11\15\0\4\11\1\0\10\11\1\0"+
    "\1\11\61\0\1\u010d\20\0\1\u010e\72\0\1\11\2\0"+
    "\7\11\3\0\3\11\3\0\4\11\1\0\1\11\1\0"+
    "\2\11\2\0\3\11\15\0\2\11\1\u010f\1\11\1\0"+
    "\10\11\1\0\1\11\1\0\1\11\2\0\1\u0110\6\11"+
    "\3\0\3\11\3\0\4\11\1\0\1\11\1\0\2\11"+
    "\2\0\3\11\15\0\4\11\1\0\10\11\1\0\1\11"+
    "\1\0\1\11\2\0\6\11\1\u0111\3\0\3\11\3\0"+
    "\4\11\1\0\1\11\1\0\2\11\2\0\3\11\15\0"+
    "\4\11\1\0\10\11\1\0\1\11\4\0\1\u0112\72\0"+
    "\1\11\2\0\1\u0113\6\11\3\0\3\11\3\0\4\11"+
    "\1\0\1\11\1\0\2\11\2\0\3\11\15\0\4\11"+
    "\1\0\10\11\1\0\1\11\57\0\2\u0114\16\0\1\11"+
    "\2\0\7\11\3\0\3\11\3\0\4\11\1\0\1\11"+
    "\1\0\2\11\2\0\3\11\15\0\2\u0115\2\11\1\0"+
    "\10\11\1\0\1\11\7\0\1\u0116\14\0\1\u0116\52\0"+
    "\1\11\2\0\3\11\1\u0117\3\11\3\0\3\11\3\0"+
    "\1\u0117\3\11\1\0\1\11\1\0\2\11\2\0\3\11"+
    "\15\0\4\11\1\0\10\11\1\0\1\11\5\0\1\u0118"+
    "\71\0\1\11\2\0\1\11\1\u0119\5\11\3\0\3\11"+
    "\3\0\4\11\1\0\1\11\1\0\2\11\2\0\3\11"+
    "\15\0\4\11\1\0\10\11\1\0\1\11\1\0\1\11"+
    "\2\0\1\u011a\6\11\3\0\3\11\3\0\4\11\1\0"+
    "\1\11\1\0\2\11\2\0\3\11\15\0\4\11\1\0"+
    "\10\11\1\0\1\11\5\0\1\u011b\71\0\1\11\2\0"+
    "\1\11\1\u011c\5\11\3\0\3\11\3\0\4\11\1\0"+
    "\1\11\1\0\2\11\2\0\3\11\15\0\4\11\1\0"+
    "\10\11\1\0\1\11\63\0\2\u011d\20\0\1\u011e\14\0"+
    "\1\u011e\133\0\1\u011f\25\0\1\u0120\64\0\1\u0121\22\0"+
    "\4\u0121\30\0\1\u0121\5\0\1\u0121\20\0\1\u0122\14\0"+
    "\1\u0122\50\0\1\11\2\0\5\11\1\u0123\1\11\3\0"+
    "\3\11\3\0\2\11\1\u0123\1\11\1\0\1\11\1\0"+
    "\2\11\2\0\3\11\15\0\4\11\1\0\10\11\1\0"+
    "\1\11\1\0\1\11\2\0\3\11\1\u0124\3\11\3\0"+
    "\3\11\3\0\1\u0124\3\11\1\0\1\11\1\0\2\11"+
    "\2\0\3\11\15\0\4\11\1\0\10\11\1\0\1\11"+
    "\11\0\1\u0125\14\0\1\u0125\50\0\1\11\2\0\5\11"+
    "\1\u0126\1\11\3\0\3\11\3\0\2\11\1\u0126\1\11"+
    "\1\0\1\11\1\0\2\11\2\0\3\11\15\0\4\11"+
    "\1\0\10\11\1\0\1\11\63\0\2\u0127\12\0\1\11"+
    "\2\0\7\11\3\0\3\11\3\0\4\11\1\0\1\11"+
    "\1\0\2\11\2\0\3\11\15\0\4\11\1\u0127\1\u0128"+
    "\7\11\1\0\1\11\1\0\1\11\2\0\1\u0129\6\11"+
    "\3\0\3\11\3\0\4\11\1\0\1\11\1\0\2\11"+
    "\2\0\3\11\15\0\4\11\1\0\10\11\1\0\1\11"+
    "\74\0\2\u012a\1\0\1\11\2\0\7\11\3\0\3\11"+
    "\3\0\4\11\1\0\1\11\1\0\2\11\2\0\3\11"+
    "\15\0\4\11\1\0\10\11\1\u012a\1\u012b\12\0\1\u012c"+
    "\64\0\1\11\2\0\6\11\1\u012d\3\0\3\11\3\0"+
    "\4\11\1\0\1\11\1\0\2\11\2\0\3\11\15\0"+
    "\4\11\1\0\10\11\1\0\1\11\1\0\1\11\2\0"+
    "\7\11\1\u012e\2\0\1\11\1\u012f\1\11\3\0\4\11"+
    "\1\0\1\11\1\0\2\11\2\0\3\11\15\0\4\11"+
    "\1\0\10\11\1\0\1\11\7\0\1\u0130\14\0\1\u0130"+
    "\56\0\1\u0131\74\0\1\u0132\152\0\1\u0133\15\0\1\11"+
    "\2\0\7\11\3\0\3\11\3\0\4\11\1\0\1\11"+
    "\1\0\2\11\2\0\3\11\15\0\2\11\1\u0134\1\11"+
    "\1\0\10\11\1\0\1\11\1\0\1\11\2\0\7\11"+
    "\3\0\3\11\3\0\4\11\1\0\1\11\1\0\2\11"+
    "\2\0\3\11\15\0\3\11\1\u0135\1\0\10\11\1\0"+
    "\1\11\13\0\1\u0136\3\0\1\u0136\57\0\1\11\2\0"+
    "\7\11\1\u0136\2\0\1\11\1\u0137\1\11\3\0\4\11"+
    "\1\0\1\11\1\0\2\11\2\0\3\11\15\0\4\11"+
    "\1\0\10\11\1\0\1\11\5\0\1\u0138\71\0\1\11"+
    "\2\0\1\11\1\u0139\5\11\3\0\3\11\3\0\4\11"+
    "\1\0\1\11\1\0\2\11\2\0\3\11\15\0\4\11"+
    "\1\0\10\11\1\0\1\11\65\0\2\u013a\10\0\1\11"+
    "\2\0\7\11\3\0\3\11\3\0\4\11\1\0\1\11"+
    "\1\0\2\11\2\0\3\11\15\0\4\11\1\0\1\11"+
    "\2\u013b\5\11\1\0\1\11\12\0\1\u013c\72\0\1\u013d"+
    "\14\0\1\u013d\52\0\1\11\2\0\3\11\1\u013e\3\11"+
    "\3\0\3\11\3\0\1\u013e\3\11\1\0\1\11\1\0"+
    "\2\11\2\0\3\11\15\0\4\11\1\0\10\11\1\0"+
    "\1\11\1\0\1\11\2\0\1\u013f\6\11\3\0\3\11"+
    "\3\0\4\11\1\0\1\11\1\0\2\11\2\0\3\11"+
    "\15\0\4\11\1\0\10\11\1\0\1\11\65\0\2\u0140"+
    "\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14570];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\1\1\11\15\1\1\11\2\1\1\11\3\1\2\11"+
    "\7\1\10\11\12\1\2\11\5\1\2\11\3\1\2\0"+
    "\1\11\6\1\1\0\1\1\2\0\1\1\1\0\3\1"+
    "\2\0\1\1\5\0\6\1\1\0\1\1\5\11\3\1"+
    "\1\0\1\1\2\0\1\11\20\1\1\0\1\1\1\11"+
    "\2\0\1\11\3\1\7\0\5\1\1\0\5\1\1\0"+
    "\1\11\2\1\3\0\4\1\1\0\11\1\1\0\1\11"+
    "\1\1\1\0\1\11\2\1\2\0\1\11\4\0\3\1"+
    "\1\0\1\1\1\0\3\1\1\0\1\1\1\11\3\0"+
    "\5\1\1\0\7\1\1\11\1\0\2\1\2\0\1\11"+
    "\2\0\3\1\1\11\1\1\1\0\3\1\1\0\1\1"+
    "\1\11\2\0\4\1\1\0\1\1\1\0\1\1\1\0"+
    "\2\1\1\0\3\1\1\0\1\1\5\0\2\1\1\0"+
    "\2\1\1\0\1\1\1\0\1\11\3\1\1\11\1\1"+
    "\1\0\1\1\1\0\1\1\1\11\2\1\1\11\1\1"+
    "\2\0\1\11\1\0\1\11\1\0\2\1\1\0\1\1"+
    "\1\0\2\1\1\11\1\1\1\0\1\1\1\11\1\1"+
    "\1\0\2\11\1\0\2\1\1\11\1\1\1\11\1\1"+
    "\1\11\1\1\1\0\1\11\2\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[320];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //--------> Codigo de Usuario en sintaxis Java
    public Cola ErroresLexicos = new Cola();



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analisis_Lexico(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Simbolos.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /* Espacios en blanco se ignoran */
            } 
            // fall through
          case 78: break;
          case 2: 
            { System.out.println("Error Lexico Lexema: " + yytext() + " Fila: " + yyline + " Columna: " + yycolumn);
                                        Errores error = new Errores(yytext(),yyline,yycolumn
                                            ,"Error Lexico, No Especificado en el Lenguaje","Lexico");
                                        ErroresLexicos.insertar(error);
            } 
            // fall through
          case 79: break;
          case 3: 
            { return new Symbol(Simbolos.entero, yycolumn, yyline, yytext());
            } 
            // fall through
          case 80: break;
          case 4: 
            { return new Symbol(Simbolos.identificador, yycolumn, yyline, yytext());
            } 
            // fall through
          case 81: break;
          case 5: 
            { return new Symbol(Simbolos.division, yycolumn, yyline, yytext());
            } 
            // fall through
          case 82: break;
          case 6: 
            { return new Symbol(Simbolos.multiplicacion, yycolumn, yyline, yytext());
            } 
            // fall through
          case 83: break;
          case 7: 
            { return new Symbol(Simbolos.llaveA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 84: break;
          case 8: 
            { return new Symbol(Simbolos.resta, yycolumn, yyline, yytext());
            } 
            // fall through
          case 85: break;
          case 9: 
            { return new Symbol(Simbolos.suma, yycolumn, yyline, yytext());
            } 
            // fall through
          case 86: break;
          case 10: 
            { return new Symbol(Simbolos.igual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 87: break;
          case 11: 
            { return new Symbol(Simbolos.not, yycolumn, yyline, yytext());
            } 
            // fall through
          case 88: break;
          case 12: 
            { return new Symbol(Simbolos.menorQue, yycolumn, yyline, yytext());
            } 
            // fall through
          case 89: break;
          case 13: 
            { return new Symbol(Simbolos.mayorQue, yycolumn, yyline, yytext());
            } 
            // fall through
          case 90: break;
          case 14: 
            { return new Symbol(Simbolos.logicoXOR, yycolumn, yyline, yytext());
            } 
            // fall through
          case 91: break;
          case 15: 
            { return new Symbol(Simbolos.parentesisA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 92: break;
          case 16: 
            { return new Symbol(Simbolos.parentesisC, yycolumn, yyline, yytext());
            } 
            // fall through
          case 93: break;
          case 17: 
            { return new Symbol(Simbolos.llaveC, yycolumn, yyline, yytext());
            } 
            // fall through
          case 94: break;
          case 18: 
            { return new Symbol(Simbolos.corcheteA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 95: break;
          case 19: 
            { return new Symbol(Simbolos.corcheteC, yycolumn, yyline, yytext());
            } 
            // fall through
          case 96: break;
          case 20: 
            { return new Symbol(Simbolos.puntoComa, yycolumn, yyline, yytext());
            } 
            // fall through
          case 97: break;
          case 21: 
            { return new Symbol(Simbolos.coma, yycolumn, yyline, yytext());
            } 
            // fall through
          case 98: break;
          case 22: 
            { return new Symbol(Simbolos.posicionX, yycolumn, yyline, yytext());
            } 
            // fall through
          case 99: break;
          case 23: 
            { return new Symbol(Simbolos.posicionY, yycolumn, yyline, yytext());
            } 
            // fall through
          case 100: break;
          case 24: 
            { yybegin(YYINITIAL); return new Symbol(Simbolos.texto, yycolumn, yyline, yytext());
            } 
            // fall through
          case 101: break;
          case 25: 
            { yybegin(YYINITIAL); return new Symbol(Simbolos.llaveA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 102: break;
          case 26: 
            { yybegin(YYINITIAL); return new Symbol(Simbolos.menorQue, yycolumn, yyline, yytext());
            } 
            // fall through
          case 103: break;
          case 27: 
            { yybegin(TEXTO); return new Symbol(Simbolos.mayorQue, yycolumn, yyline, yytext());
            } 
            // fall through
          case 104: break;
          case 28: 
            { return new Symbol(Simbolos.cadena, yycolumn, yyline, yytext());
            } 
            // fall through
          case 105: break;
          case 29: 
            { return new Symbol(Simbolos.si, yycolumn, yyline, yytext());
            } 
            // fall through
          case 106: break;
          case 30: 
            { 
            } 
            // fall through
          case 107: break;
          case 31: 
            { return new Symbol(Simbolos.logicoOR, yycolumn, yyline, yytext());
            } 
            // fall through
          case 108: break;
          case 32: 
            { return new Symbol(Simbolos.igualigual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 109: break;
          case 33: 
            { return new Symbol(Simbolos.diferente, yycolumn, yyline, yytext());
            } 
            // fall through
          case 110: break;
          case 34: 
            { return new Symbol(Simbolos.menorIgual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 111: break;
          case 35: 
            { return new Symbol(Simbolos.mayorIgual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 112: break;
          case 36: 
            { return new Symbol(Simbolos.logicoAND, yycolumn, yyline, yytext());
            } 
            // fall through
          case 113: break;
          case 37: 
            { return new Symbol(Simbolos.id, yycolumn, yyline, yytext());
            } 
            // fall through
          case 114: break;
          case 38: 
            { return new Symbol(Simbolos.doble, yycolumn, yyline, yytext());
            } 
            // fall through
          case 115: break;
          case 39: 
            { return new Symbol(Simbolos.fuente, yycolumn, yyline, yytext());
            } 
            // fall through
          case 116: break;
          case 40: 
            { return new Symbol(Simbolos.caracter, yycolumn, yyline, yytext());
            } 
            // fall through
          case 117: break;
          case 41: 
            { return new Symbol(Simbolos.var, yycolumn, yyline, yytext());
            } 
            // fall through
          case 118: break;
          case 42: 
            { return new Symbol(Simbolos.potencia, yycolumn, yyline, yytext());
            } 
            // fall through
          case 119: break;
          case 43: 
            { return new Symbol(Simbolos.max, yycolumn, yyline, yytext());
            } 
            // fall through
          case 120: break;
          case 44: 
            { return new Symbol(Simbolos.min, yycolumn, yyline, yytext());
            } 
            // fall through
          case 121: break;
          case 45: 
            { return new Symbol(Simbolos.booleano, yycolumn, yyline, yytext());
            } 
            // fall through
          case 122: break;
          case 46: 
            { yybegin(ETIQUETA); return new Symbol(Simbolos.textt, yycolumn, yyline, yytext());
            } 
            // fall through
          case 123: break;
          case 47: 
            { return new Symbol(Simbolos.from, yycolumn, yyline, yytext());
            } 
            // fall through
          case 124: break;
          case 48: 
            { return new Symbol(Simbolos.list, yycolumn, yyline, yytext());
            } 
            // fall through
          case 125: break;
          case 49: 
            { return new Symbol(Simbolos.sino, yycolumn, yyline, yytext());
            } 
            // fall through
          case 126: break;
          case 50: 
            { yybegin(ETIQUETA); return new Symbol(Simbolos.items, yycolumn, yyline, yytext());
            } 
            // fall through
          case 127: break;
          case 51: 
            { return new Symbol(Simbolos.ftext, yycolumn, yyline, yytext());
            } 
            // fall through
          case 128: break;
          case 52: 
            { return new Symbol(Simbolos.fitem, yycolumn, yyline, yytext());
            } 
            // fall through
          case 129: break;
          case 53: 
            { return new Symbol(Simbolos.panel, yycolumn, yyline, yytext());
            } 
            // fall through
          case 130: break;
          case 54: 
            { return new Symbol(Simbolos.width, yycolumn, yyline, yytext());
            } 
            // fall through
          case 131: break;
          case 55: 
            { return new Symbol(Simbolos.color, yycolumn, yyline, yytext());
            } 
            // fall through
          case 132: break;
          case 56: 
            { return new Symbol(Simbolos.image, yycolumn, yyline, yytext());
            } 
            // fall through
          case 133: break;
          case 57: 
            { return new Symbol(Simbolos.retorno, yycolumn, yyline, yytext());
            } 
            // fall through
          case 134: break;
          case 58: 
            { return new Symbol(Simbolos.render, yycolumn, yyline, yytext());
            } 
            // fall through
          case 135: break;
          case 59: 
            { yybegin(ETIQUETA); return new Symbol(Simbolos.button, yycolumn, yyline, yytext());
            } 
            // fall through
          case 136: break;
          case 60: 
            { return new Symbol(Simbolos.border, yycolumn, yyline, yytext());
            } 
            // fall through
          case 137: break;
          case 61: 
            { return new Symbol(Simbolos.importar, yycolumn, yyline, yytext());
            } 
            // fall through
          case 138: break;
          case 62: 
            { return new Symbol(Simbolos.height, yycolumn, yyline, yytext());
            } 
            // fall through
          case 139: break;
          case 63: 
            { return new Symbol(Simbolos.repetir, yycolumn, yyline, yytext());
            } 
            // fall through
          case 140: break;
          case 64: 
            { return new Symbol(Simbolos.spinner, yycolumn, yyline, yytext());
            } 
            // fall through
          case 141: break;
          case 65: 
            { return new Symbol(Simbolos.fbutton, yycolumn, yyline, yytext());
            } 
            // fall through
          case 142: break;
          case 66: 
            { return new Symbol(Simbolos.hexadecimal, yycolumn, yyline, yytext());
            } 
            // fall through
          case 143: break;
          case 67: 
            { return new Symbol(Simbolos.defecto, yycolumn, yyline, yytext());
            } 
            // fall through
          case 144: break;
          case 68: 
            { return new Symbol(Simbolos.onClick, yycolumn, yyline, yytext());
            } 
            // fall through
          case 145: break;
          case 69: 
            { return new Symbol(Simbolos.element, yycolumn, yyline, yytext());
            } 
            // fall through
          case 146: break;
          case 70: 
            { return new Symbol(Simbolos.fspinner, yycolumn, yyline, yytext());
            } 
            // fall through
          case 147: break;
          case 71: 
            { return new Symbol(Simbolos.fdefecto, yycolumn, yyline, yytext());
            } 
            // fall through
          case 148: break;
          case 72: 
            { return new Symbol(Simbolos.mientras, yycolumn, yyline, yytext());
            } 
            // fall through
          case 149: break;
          case 73: 
            { return new Symbol(Simbolos.imprimir, yycolumn, yyline, yytext());
            } 
            // fall through
          case 150: break;
          case 74: 
            { yybegin(ETIQUETA); return new Symbol(Simbolos.textField, yycolumn, yyline, yytext());
            } 
            // fall through
          case 151: break;
          case 75: 
            { return new Symbol(Simbolos.className, yycolumn, yyline, yytext());
            } 
            // fall through
          case 152: break;
          case 76: 
            { return new Symbol(Simbolos.component, yycolumn, yyline, yytext());
            } 
            // fall through
          case 153: break;
          case 77: 
            { return new Symbol(Simbolos.ftextField, yycolumn, yyline, yytext());
            } 
            // fall through
          case 154: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
