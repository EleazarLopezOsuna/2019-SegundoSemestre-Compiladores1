/* The following code was generated by JFlex 1.7.0 */


/*--------- 1ra Area: Codigo de Usuario ---------*/

//--------> Paquetes e importaciones
package Analizadores.UFE;
import java_cup.runtime.*;
import Estructuras.Cola;
import Modelos.Errores;

/*--------- 2da Area: Opciones y Declaraciones ---------*/


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Lexico.jflex</tt>
 */
public class Analisis_Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 52, 14, 14, 14, 14,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    52, 25,  4,  0,  0,  0, 28, 13, 31, 32, 19, 20, 39,  1,  3, 18, 
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 37, 38, 26, 24, 27,  0, 
     0, 10, 51, 41, 46,  8,  9, 50, 49, 45, 15, 15, 11, 42, 43, 22, 
    21, 15,  6, 16,  5,  7, 40, 23, 47, 48, 15, 35,  0, 36, 30, 17, 
     0, 10, 51, 41, 46,  8,  9, 50, 49, 45, 15, 15, 11, 42, 43, 22, 
    21, 15,  6, 16,  5,  7, 40, 23, 47, 48, 15, 33, 29, 34,  0,  0, 
     0,  0,  0,  0,  0, 14,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    52,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\6\4\2\1\1\5"+
    "\1\4\1\6\1\7\1\10\2\4\1\11\1\12\1\13"+
    "\1\14\2\1\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\3\4\1\1\2\4\1\27"+
    "\1\30\2\4\2\0\1\31\6\4\1\0\1\4\2\0"+
    "\1\32\1\0\2\4\1\32\1\33\1\0\2\4\1\0"+
    "\1\4\1\34\1\35\1\36\1\37\1\40\1\41\4\4"+
    "\1\0\1\4\2\0\1\42\2\4\1\42\4\4\1\43"+
    "\10\4\1\0\1\4\1\44\2\0\1\45\1\44\2\4"+
    "\1\0\1\4\1\46\1\0\1\4\1\47\3\4\1\50"+
    "\1\0\1\51\1\4\1\51\3\0\4\4\1\0\3\4"+
    "\1\52\1\53\4\4\1\54\1\0\2\55\1\0\1\56"+
    "\1\4\1\56\1\33\1\4\1\0\1\4\1\0\3\4"+
    "\1\0\1\4\1\57\3\0\1\57\4\4\1\0\10\4"+
    "\1\52\1\0\1\4\1\60\2\61\1\0\1\4\1\62"+
    "\1\4\1\0\1\4\1\63\2\0\1\63\3\4\1\0"+
    "\3\4\1\0\1\4\1\64\1\0\1\4\1\65\1\4"+
    "\1\0\1\4\1\0\2\4\1\0\1\4\1\0\1\66"+
    "\1\4\1\66\1\4\2\67\1\70\1\71\1\0\1\4"+
    "\2\72\1\73\2\74\1\0\2\4\1\0\1\4\1\0"+
    "\1\4\1\75\1\0\1\4\1\0\2\4\2\76\2\77"+
    "\2\100\2\101\1\102";

  private static int [] zzUnpackAction() {
    int [] result = new int[252];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\65\0\u02b1\0\u02e6"+
    "\0\65\0\65\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424"+
    "\0\u0459\0\u048e\0\65\0\65\0\65\0\65\0\65\0\65"+
    "\0\65\0\65\0\65\0\65\0\u04c3\0\u04f8\0\u052d\0\u0562"+
    "\0\u0597\0\u05cc\0\u0173\0\u0173\0\u0601\0\u0636\0\u066b\0\324"+
    "\0\65\0\u06a0\0\u06d5\0\u070a\0\u073f\0\u0774\0\u07a9\0\u07de"+
    "\0\u0813\0\u0848\0\u087d\0\u08b2\0\u08e7\0\u091c\0\u0951\0\u0986"+
    "\0\u09bb\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\65\0\65"+
    "\0\65\0\65\0\65\0\65\0\u0af9\0\u0b2e\0\u0b63\0\u0b98"+
    "\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\65\0\u0ca1\0\u0cd6\0\u0173"+
    "\0\u0d0b\0\u0d40\0\u0d75\0\u0daa\0\u066b\0\u0ddf\0\u0e14\0\u0e49"+
    "\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc\0\65"+
    "\0\u0ff1\0\u1026\0\65\0\u0173\0\u105b\0\u1090\0\u10c5\0\u10fa"+
    "\0\u0173\0\u112f\0\u1164\0\u0173\0\u1199\0\u11ce\0\u1203\0\u0173"+
    "\0\u1238\0\65\0\u126d\0\u0173\0\u12a2\0\u12d7\0\u130c\0\u1341"+
    "\0\u1376\0\u13ab\0\u13e0\0\u1415\0\u144a\0\u147f\0\u14b4\0\u0173"+
    "\0\u14e9\0\u151e\0\u1553\0\u1588\0\u15bd\0\u0173\0\u15f2\0\65"+
    "\0\u0173\0\u1627\0\65\0\u165c\0\u0173\0\65\0\u1691\0\u16c6"+
    "\0\u16fb\0\u1730\0\u1765\0\u179a\0\u17cf\0\u1804\0\u1839\0\65"+
    "\0\u186e\0\u18a3\0\u18d8\0\u0173\0\u190d\0\u1942\0\u1977\0\u19ac"+
    "\0\u19e1\0\u1a16\0\u1a4b\0\u1a80\0\u1ab5\0\u1aea\0\u1b1f\0\u1b54"+
    "\0\u1b89\0\65\0\u1bbe\0\u1bf3\0\u0173\0\65\0\u0173\0\u1c28"+
    "\0\u1c5d\0\u0173\0\u1c92\0\u1cc7\0\u1cfc\0\65\0\u1d31\0\u1d66"+
    "\0\u0173\0\u1d9b\0\u1dd0\0\u1e05\0\u1e3a\0\u1e6f\0\u1ea4\0\u1ed9"+
    "\0\u1f0e\0\u1f43\0\u0173\0\u1f78\0\u1fad\0\u0173\0\u1fe2\0\u2017"+
    "\0\u204c\0\u2081\0\u20b6\0\u20eb\0\u2120\0\u2155\0\u218a\0\65"+
    "\0\u21bf\0\u0173\0\u21f4\0\65\0\u0173\0\u0173\0\u0173\0\u2229"+
    "\0\u225e\0\65\0\u0173\0\u0173\0\65\0\u0173\0\u2293\0\u22c8"+
    "\0\u22fd\0\u2332\0\u2367\0\u239c\0\u23d1\0\u0173\0\u2406\0\u243b"+
    "\0\u2470\0\u24a5\0\u24da\0\65\0\u0173\0\65\0\u0173\0\65"+
    "\0\u0173\0\65\0\u0173\0\u0173";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[252];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\10\1\13\1\14\1\15\1\16\1\10"+
    "\1\17\1\2\1\20\1\21\1\22\1\23\1\10\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\10\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\10\1\56\1\16\67\0\1\4\64\0"+
    "\1\4\1\57\61\0\4\60\1\61\60\60\2\0\1\10"+
    "\2\0\1\10\1\62\1\10\1\63\3\10\3\0\3\10"+
    "\3\0\3\10\5\0\1\10\12\0\4\10\1\0\7\10"+
    "\3\0\1\10\2\0\3\10\1\64\3\10\3\0\3\10"+
    "\3\0\3\10\5\0\1\10\12\0\4\10\1\0\7\10"+
    "\3\0\1\10\2\0\7\10\3\0\3\10\3\0\3\10"+
    "\5\0\1\10\12\0\4\10\1\0\7\10\3\0\1\10"+
    "\2\0\6\10\1\65\3\0\3\10\3\0\3\10\5\0"+
    "\1\10\12\0\4\10\1\0\7\10\3\0\1\10\2\0"+
    "\1\10\1\66\3\10\1\67\1\10\3\0\3\10\3\0"+
    "\3\10\5\0\1\10\12\0\4\10\1\0\7\10\3\0"+
    "\1\10\2\0\7\10\3\0\3\10\3\0\3\10\5\0"+
    "\1\10\12\0\4\10\1\70\1\71\6\10\7\0\1\72"+
    "\16\0\1\73\26\0\2\74\7\0\16\75\1\0\46\75"+
    "\2\0\1\10\2\0\1\10\1\76\5\10\3\0\3\10"+
    "\3\0\1\77\2\10\5\0\1\10\12\0\4\10\1\74"+
    "\1\100\6\10\23\0\1\101\1\102\43\0\1\10\2\0"+
    "\5\10\1\103\1\10\3\0\3\10\3\0\1\10\1\104"+
    "\1\10\5\0\1\10\12\0\4\10\1\0\7\10\3\0"+
    "\1\10\2\0\7\10\3\0\3\10\3\0\3\10\5\0"+
    "\1\10\12\0\4\10\1\105\1\106\6\10\31\0\1\107"+
    "\64\0\1\110\64\0\1\111\64\0\1\112\70\0\1\113"+
    "\65\0\1\114\31\0\1\10\2\0\5\10\1\115\1\10"+
    "\3\0\3\10\3\0\3\10\5\0\1\10\12\0\4\10"+
    "\1\0\7\10\3\0\1\10\2\0\6\10\1\116\3\0"+
    "\3\10\3\0\1\10\1\117\1\10\5\0\1\10\12\0"+
    "\4\10\1\0\7\10\3\0\1\10\2\0\5\10\1\120"+
    "\1\10\3\0\3\10\3\0\3\10\5\0\1\10\12\0"+
    "\4\10\1\121\1\122\6\10\6\0\1\123\44\0\1\124"+
    "\3\0\1\125\10\0\1\10\2\0\1\126\6\10\3\0"+
    "\3\10\3\0\3\10\5\0\1\10\12\0\2\10\1\127"+
    "\1\10\1\0\1\10\1\130\5\10\3\0\1\10\2\0"+
    "\3\10\1\131\3\10\3\0\3\10\3\0\3\10\5\0"+
    "\1\10\12\0\4\10\1\0\7\10\3\0\1\10\2\0"+
    "\3\10\1\132\3\10\3\0\3\10\3\0\3\10\5\0"+
    "\1\10\12\0\4\10\1\0\7\10\3\0\1\10\2\0"+
    "\2\10\1\133\4\10\3\0\3\10\3\0\1\10\1\134"+
    "\1\10\5\0\1\10\12\0\4\10\1\0\7\10\3\0"+
    "\1\135\64\0\1\10\2\0\2\10\1\136\4\10\3\0"+
    "\3\10\3\0\3\10\5\0\1\10\12\0\4\10\1\0"+
    "\7\10\3\0\1\10\2\0\7\10\3\0\3\10\3\0"+
    "\3\10\5\0\1\10\12\0\4\10\1\0\2\10\1\137"+
    "\4\10\3\0\1\10\2\0\1\140\6\10\3\0\3\10"+
    "\3\0\1\141\2\10\5\0\1\10\12\0\3\10\1\142"+
    "\1\0\7\10\3\0\1\10\2\0\3\10\1\143\3\10"+
    "\3\0\3\10\3\0\3\10\5\0\1\10\12\0\4\10"+
    "\1\0\7\10\3\0\1\10\2\0\7\10\3\0\3\10"+
    "\3\0\1\10\1\144\1\10\5\0\1\10\12\0\4\10"+
    "\1\0\7\10\3\0\1\10\2\0\6\10\1\145\3\0"+
    "\3\10\3\0\3\10\5\0\1\10\12\0\4\10\1\0"+
    "\7\10\15\0\1\146\3\0\1\146\46\0\1\10\2\0"+
    "\7\10\1\146\2\0\1\10\1\147\1\10\3\0\3\10"+
    "\5\0\1\10\12\0\4\10\1\0\7\10\52\0\1\150"+
    "\67\0\2\151\62\0\1\152\26\0\1\153\51\0\1\10"+
    "\2\0\7\10\3\0\3\10\3\0\3\10\5\0\1\10"+
    "\12\0\1\10\1\154\2\10\1\0\7\10\3\0\1\10"+
    "\2\0\7\10\3\0\3\10\3\0\3\10\5\0\1\10"+
    "\12\0\4\10\1\151\1\155\6\10\3\0\1\10\2\0"+
    "\7\10\3\0\3\10\3\0\3\10\5\0\1\10\12\0"+
    "\3\10\1\156\1\0\7\10\1\0\16\101\1\0\46\101"+
    "\23\102\1\157\41\102\2\0\1\10\2\0\7\10\3\0"+
    "\3\10\3\0\3\10\5\0\1\10\12\0\3\10\1\160"+
    "\1\0\7\10\3\0\1\10\2\0\7\10\3\0\3\10"+
    "\3\0\2\10\1\161\5\0\1\10\12\0\4\10\1\0"+
    "\7\10\57\0\1\162\10\0\1\10\2\0\7\10\3\0"+
    "\3\10\3\0\3\10\5\0\1\10\12\0\4\10\1\0"+
    "\1\10\1\163\5\10\3\0\1\10\2\0\1\10\1\164"+
    "\5\10\3\0\3\10\3\0\3\10\5\0\1\10\12\0"+
    "\4\10\1\0\7\10\3\0\1\10\2\0\5\10\1\165"+
    "\1\10\3\0\3\10\3\0\3\10\5\0\1\10\12\0"+
    "\4\10\1\0\7\10\3\0\1\10\2\0\6\10\1\166"+
    "\3\0\3\10\3\0\3\10\5\0\1\10\12\0\2\10"+
    "\1\167\1\10\1\0\7\10\3\0\1\10\2\0\7\10"+
    "\3\0\3\10\3\0\3\10\5\0\1\10\12\0\4\10"+
    "\1\0\2\10\1\170\4\10\11\0\1\171\42\0\1\172"+
    "\13\0\1\10\2\0\3\10\1\173\3\10\3\0\3\10"+
    "\3\0\3\10\5\0\1\10\12\0\3\10\1\174\1\0"+
    "\7\10\11\0\1\175\66\0\1\176\12\0\1\177\41\0"+
    "\1\10\2\0\3\10\1\200\3\10\3\0\3\10\3\0"+
    "\3\10\5\0\1\10\12\0\4\10\1\0\7\10\3\0"+
    "\1\10\2\0\5\10\1\201\1\10\3\0\3\10\3\0"+
    "\1\202\2\10\5\0\1\10\12\0\4\10\1\0\7\10"+
    "\3\0\1\10\2\0\4\10\1\203\2\10\3\0\3\10"+
    "\3\0\3\10\5\0\1\10\12\0\4\10\1\0\7\10"+
    "\3\0\1\10\2\0\7\10\3\0\3\10\3\0\3\10"+
    "\5\0\1\10\12\0\4\10\1\204\1\205\6\10\3\0"+
    "\1\10\2\0\1\206\6\10\3\0\3\10\3\0\3\10"+
    "\5\0\1\10\12\0\4\10\1\0\7\10\3\0\1\10"+
    "\2\0\1\10\1\207\5\10\3\0\3\10\3\0\3\10"+
    "\5\0\1\10\12\0\4\10\1\0\7\10\3\0\1\10"+
    "\2\0\3\10\1\210\3\10\3\0\3\10\3\0\3\10"+
    "\5\0\1\10\12\0\4\10\1\0\7\10\3\0\1\10"+
    "\2\0\1\211\6\10\3\0\3\10\3\0\3\10\5\0"+
    "\1\10\12\0\4\10\1\0\7\10\3\0\1\10\2\0"+
    "\2\10\1\212\4\10\3\0\3\10\3\0\3\10\5\0"+
    "\1\10\12\0\4\10\1\0\7\10\3\0\1\10\2\0"+
    "\3\10\1\213\3\10\3\0\3\10\3\0\3\10\5\0"+
    "\1\10\12\0\4\10\1\0\7\10\3\0\1\10\2\0"+
    "\7\10\3\0\3\10\3\0\3\10\5\0\1\10\12\0"+
    "\4\10\1\0\1\10\1\214\5\10\3\0\1\10\2\0"+
    "\7\10\3\0\3\10\3\0\3\10\5\0\1\10\12\0"+
    "\2\10\1\215\1\10\1\0\7\10\3\0\1\10\2\0"+
    "\7\10\3\0\3\10\3\0\3\10\5\0\1\10\12\0"+
    "\2\10\1\216\1\10\1\0\7\10\3\0\1\10\2\0"+
    "\7\10\1\217\2\0\1\10\1\136\1\10\3\0\3\10"+
    "\5\0\1\10\12\0\4\10\1\0\7\10\6\0\1\220"+
    "\61\0\1\10\2\0\1\221\6\10\3\0\3\10\3\0"+
    "\3\10\5\0\1\10\12\0\4\10\1\0\7\10\54\0"+
    "\1\222\37\0\1\223\40\0\1\10\2\0\7\10\3\0"+
    "\3\10\3\0\3\10\5\0\1\10\12\0\3\10\1\224"+
    "\1\0\7\10\3\0\1\10\2\0\7\10\3\0\3\10"+
    "\3\0\1\10\1\225\1\10\5\0\1\10\12\0\4\10"+
    "\1\0\7\10\1\0\22\102\1\226\1\157\41\102\2\0"+
    "\1\10\2\0\3\10\1\227\3\10\3\0\3\10\3\0"+
    "\3\10\5\0\1\10\12\0\4\10\1\0\7\10\6\0"+
    "\1\230\61\0\1\10\2\0\1\231\6\10\3\0\3\10"+
    "\3\0\3\10\5\0\1\10\12\0\4\10\1\0\7\10"+
    "\3\0\1\10\2\0\7\10\1\232\2\0\1\10\1\233"+
    "\1\10\3\0\3\10\5\0\1\10\12\0\4\10\1\0"+
    "\7\10\3\0\1\10\2\0\7\10\3\0\3\10\3\0"+
    "\1\10\1\234\1\10\5\0\1\10\12\0\4\10\1\0"+
    "\7\10\3\0\1\10\2\0\7\10\3\0\3\10\3\0"+
    "\1\235\2\10\5\0\1\10\12\0\4\10\1\0\7\10"+
    "\54\0\1\236\13\0\1\10\2\0\7\10\3\0\3\10"+
    "\3\0\3\10\5\0\1\10\12\0\3\10\1\237\1\0"+
    "\7\10\53\0\1\240\74\0\1\241\10\0\1\242\17\0"+
    "\1\243\40\0\1\10\2\0\7\10\3\0\3\10\3\0"+
    "\3\10\5\0\1\10\12\0\2\10\1\244\1\10\1\0"+
    "\7\10\3\0\1\10\2\0\7\10\3\0\3\10\3\0"+
    "\3\10\5\0\1\10\12\0\4\10\1\0\5\10\1\245"+
    "\1\10\3\0\1\10\2\0\1\10\1\246\5\10\3\0"+
    "\3\10\3\0\1\10\1\247\1\10\5\0\1\10\12\0"+
    "\4\10\1\0\7\10\3\0\1\10\2\0\5\10\1\250"+
    "\1\10\3\0\3\10\3\0\3\10\5\0\1\10\12\0"+
    "\4\10\1\0\7\10\63\0\1\251\4\0\1\10\2\0"+
    "\7\10\3\0\3\10\3\0\3\10\5\0\1\10\12\0"+
    "\4\10\1\0\5\10\1\252\1\10\3\0\1\10\2\0"+
    "\1\253\6\10\3\0\3\10\3\0\3\10\5\0\1\10"+
    "\12\0\4\10\1\0\7\10\3\0\1\10\2\0\7\10"+
    "\3\0\3\10\3\0\3\10\5\0\1\10\12\0\4\10"+
    "\1\0\1\10\1\254\5\10\3\0\1\10\2\0\4\10"+
    "\1\255\2\10\3\0\3\10\3\0\3\10\5\0\1\10"+
    "\12\0\4\10\1\0\7\10\3\0\1\10\2\0\1\10"+
    "\1\256\5\10\3\0\3\10\3\0\3\10\5\0\1\10"+
    "\12\0\4\10\1\0\7\10\3\0\1\10\2\0\1\257"+
    "\6\10\3\0\3\10\3\0\3\10\5\0\1\10\12\0"+
    "\4\10\1\0\7\10\3\0\1\10\2\0\3\10\1\260"+
    "\3\10\3\0\3\10\3\0\3\10\5\0\1\10\12\0"+
    "\4\10\1\0\7\10\3\0\1\10\2\0\3\10\1\261"+
    "\3\10\3\0\3\10\3\0\3\10\5\0\1\10\12\0"+
    "\4\10\1\0\7\10\11\0\1\262\127\0\1\263\13\0"+
    "\1\10\2\0\7\10\3\0\3\10\3\0\3\10\5\0"+
    "\1\10\12\0\3\10\1\264\1\0\7\10\3\0\1\10"+
    "\2\0\6\10\1\265\3\0\3\10\3\0\3\10\5\0"+
    "\1\10\12\0\4\10\1\0\7\10\62\0\1\266\5\0"+
    "\1\10\2\0\7\10\3\0\3\10\3\0\3\10\5\0"+
    "\1\10\12\0\4\10\1\0\4\10\1\267\2\10\15\0"+
    "\1\270\3\0\1\270\46\0\1\10\2\0\7\10\1\270"+
    "\2\0\1\10\1\271\1\10\3\0\3\10\5\0\1\10"+
    "\12\0\4\10\1\0\7\10\3\0\1\10\2\0\1\10"+
    "\1\272\5\10\3\0\3\10\3\0\3\10\5\0\1\10"+
    "\12\0\4\10\1\0\7\10\3\0\1\10\2\0\7\10"+
    "\3\0\3\10\3\0\1\10\1\273\1\10\5\0\1\10"+
    "\12\0\4\10\1\0\7\10\6\0\1\274\61\0\1\10"+
    "\2\0\1\275\6\10\3\0\3\10\3\0\3\10\5\0"+
    "\1\10\12\0\4\10\1\0\7\10\11\0\1\276\130\0"+
    "\2\277\15\0\1\300\60\0\1\10\2\0\3\10\1\301"+
    "\3\10\3\0\3\10\3\0\3\10\5\0\1\10\12\0"+
    "\4\10\1\0\7\10\3\0\1\10\2\0\7\10\3\0"+
    "\3\10\3\0\3\10\5\0\1\10\12\0\4\10\1\277"+
    "\1\302\6\10\3\0\1\10\2\0\1\10\1\303\5\10"+
    "\3\0\3\10\3\0\3\10\5\0\1\10\12\0\4\10"+
    "\1\0\7\10\3\0\1\10\2\0\2\10\1\304\4\10"+
    "\3\0\3\10\3\0\3\10\5\0\1\10\12\0\4\10"+
    "\1\0\7\10\62\0\1\305\5\0\1\10\2\0\7\10"+
    "\3\0\3\10\3\0\3\10\5\0\1\10\12\0\4\10"+
    "\1\0\4\10\1\306\2\10\3\0\1\10\2\0\7\10"+
    "\3\0\3\10\3\0\1\10\1\307\1\10\5\0\1\10"+
    "\12\0\4\10\1\0\7\10\3\0\1\10\2\0\3\10"+
    "\1\310\3\10\3\0\3\10\3\0\3\10\5\0\1\10"+
    "\12\0\4\10\1\0\7\10\3\0\1\10\2\0\7\10"+
    "\3\0\3\10\3\0\3\10\5\0\1\10\12\0\4\10"+
    "\1\311\1\312\6\10\3\0\1\10\2\0\7\10\3\0"+
    "\3\10\3\0\3\10\5\0\1\10\12\0\3\10\1\313"+
    "\1\0\7\10\3\0\1\10\2\0\7\10\3\0\3\10"+
    "\3\0\3\10\5\0\1\10\12\0\4\10\1\314\1\315"+
    "\6\10\3\0\1\10\2\0\1\10\1\316\5\10\3\0"+
    "\3\10\3\0\3\10\5\0\1\10\12\0\4\10\1\0"+
    "\7\10\3\0\1\10\2\0\7\10\3\0\3\10\3\0"+
    "\3\10\5\0\1\10\12\0\3\10\1\317\1\0\7\10"+
    "\11\0\1\320\56\0\1\10\2\0\3\10\1\321\3\10"+
    "\3\0\3\10\3\0\3\10\5\0\1\10\12\0\4\10"+
    "\1\0\7\10\54\0\1\322\13\0\1\10\2\0\7\10"+
    "\3\0\3\10\3\0\3\10\5\0\1\10\12\0\3\10"+
    "\1\323\1\0\7\10\3\0\1\10\2\0\7\10\3\0"+
    "\3\10\3\0\3\10\5\0\1\10\12\0\3\10\1\324"+
    "\1\0\7\10\7\0\1\325\60\0\1\10\2\0\1\10"+
    "\1\326\5\10\3\0\3\10\3\0\3\10\5\0\1\10"+
    "\12\0\4\10\1\0\7\10\53\0\1\327\17\0\1\330"+
    "\61\0\1\10\2\0\7\10\3\0\3\10\3\0\3\10"+
    "\5\0\1\10\12\0\2\10\1\331\1\10\1\0\7\10"+
    "\3\0\1\10\2\0\1\332\6\10\3\0\3\10\3\0"+
    "\3\10\5\0\1\10\12\0\4\10\1\0\7\10\3\0"+
    "\1\10\2\0\6\10\1\333\3\0\3\10\3\0\3\10"+
    "\5\0\1\10\12\0\4\10\1\0\7\10\6\0\1\334"+
    "\61\0\1\10\2\0\1\335\6\10\3\0\3\10\3\0"+
    "\3\10\5\0\1\10\12\0\4\10\1\0\7\10\3\0"+
    "\1\10\2\0\7\10\3\0\3\10\3\0\3\10\5\0"+
    "\1\10\12\0\3\10\1\336\1\0\7\10\3\0\1\10"+
    "\2\0\1\10\1\337\5\10\3\0\3\10\3\0\3\10"+
    "\5\0\1\10\12\0\4\10\1\0\7\10\11\0\1\340"+
    "\56\0\1\10\2\0\3\10\1\341\3\10\3\0\3\10"+
    "\3\0\3\10\5\0\1\10\12\0\4\10\1\0\7\10"+
    "\7\0\1\342\60\0\1\10\2\0\1\10\1\343\5\10"+
    "\3\0\3\10\3\0\3\10\5\0\1\10\12\0\4\10"+
    "\1\0\7\10\3\0\1\10\2\0\1\344\6\10\3\0"+
    "\3\10\3\0\3\10\5\0\1\10\12\0\4\10\1\0"+
    "\7\10\7\0\1\345\60\0\1\10\2\0\1\10\1\346"+
    "\5\10\3\0\3\10\3\0\3\10\5\0\1\10\12\0"+
    "\4\10\1\0\7\10\13\0\1\347\54\0\1\10\2\0"+
    "\5\10\1\350\1\10\3\0\3\10\3\0\3\10\5\0"+
    "\1\10\12\0\4\10\1\0\7\10\3\0\1\10\2\0"+
    "\3\10\1\351\3\10\3\0\3\10\3\0\3\10\5\0"+
    "\1\10\12\0\4\10\1\0\7\10\13\0\1\352\54\0"+
    "\1\10\2\0\5\10\1\353\1\10\3\0\3\10\3\0"+
    "\3\10\5\0\1\10\12\0\4\10\1\0\7\10\55\0"+
    "\2\354\11\0\1\10\2\0\7\10\3\0\3\10\3\0"+
    "\3\10\5\0\1\10\12\0\4\10\1\354\1\355\6\10"+
    "\3\0\1\10\2\0\1\356\6\10\3\0\3\10\3\0"+
    "\3\10\5\0\1\10\12\0\4\10\1\0\7\10\14\0"+
    "\1\357\53\0\1\10\2\0\6\10\1\360\3\0\3\10"+
    "\3\0\3\10\5\0\1\10\12\0\4\10\1\0\7\10"+
    "\53\0\1\361\14\0\1\10\2\0\7\10\3\0\3\10"+
    "\3\0\3\10\5\0\1\10\12\0\2\10\1\362\1\10"+
    "\1\0\7\10\3\0\1\10\2\0\7\10\3\0\3\10"+
    "\3\0\3\10\5\0\1\10\12\0\3\10\1\363\1\0"+
    "\7\10\15\0\1\364\3\0\1\364\46\0\1\10\2\0"+
    "\7\10\1\364\2\0\1\10\1\365\1\10\3\0\3\10"+
    "\5\0\1\10\12\0\4\10\1\0\7\10\7\0\1\366"+
    "\60\0\1\10\2\0\1\10\1\367\5\10\3\0\3\10"+
    "\3\0\3\10\5\0\1\10\12\0\4\10\1\0\7\10"+
    "\57\0\1\370\10\0\1\10\2\0\7\10\3\0\3\10"+
    "\3\0\3\10\5\0\1\10\12\0\4\10\1\0\1\10"+
    "\1\371\5\10\11\0\1\372\56\0\1\10\2\0\3\10"+
    "\1\373\3\10\3\0\3\10\3\0\3\10\5\0\1\10"+
    "\12\0\4\10\1\0\7\10\3\0\1\10\2\0\1\374"+
    "\6\10\3\0\3\10\3\0\3\10\5\0\1\10\12\0"+
    "\4\10\1\0\7\10\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9487];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\13\1\1\11\2\1\2\11\10\1\12\11"+
    "\12\1\2\0\1\11\6\1\1\0\1\1\2\0\1\1"+
    "\1\0\4\1\1\0\2\1\1\0\1\1\6\11\4\1"+
    "\1\0\1\1\2\0\1\11\20\1\1\0\1\1\1\11"+
    "\2\0\1\11\3\1\1\0\2\1\1\0\6\1\1\0"+
    "\1\11\2\1\3\0\4\1\1\0\12\1\1\0\1\11"+
    "\1\1\1\0\1\11\2\1\1\11\1\1\1\0\1\1"+
    "\1\0\3\1\1\0\1\1\1\11\3\0\5\1\1\0"+
    "\10\1\1\11\1\0\2\1\1\11\1\1\1\0\3\1"+
    "\1\0\1\1\1\11\2\0\4\1\1\0\3\1\1\0"+
    "\2\1\1\0\3\1\1\0\1\1\1\0\2\1\1\0"+
    "\1\1\1\0\1\11\3\1\1\11\3\1\1\0\1\1"+
    "\1\11\2\1\1\11\1\1\1\0\2\1\1\0\1\1"+
    "\1\0\2\1\1\0\1\1\1\0\2\1\1\11\1\1"+
    "\1\11\1\1\1\11\1\1\1\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[252];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //--------> Codigo de Usuario en sintaxis Java
    public Cola ErroresLexicos = new Cola();



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analisis_Lexico(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Simbolos.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Error Lexico Lexema: " + yytext() + " Fila: " + yyline + " Columna: " + yycolumn);
                                        Errores error = new Errores(yytext(),yyline,yycolumn
                                            ,"Error Lexico, No Especificado en el Lenguaje","Lexico");
                                        ErroresLexicos.insertar(error);
            } 
            // fall through
          case 67: break;
          case 2: 
            { return new Symbol(Simbolos.resta, yycolumn, yyline, yytext());
            } 
            // fall through
          case 68: break;
          case 3: 
            { return new Symbol(Simbolos.entero, yycolumn, yyline, yytext());
            } 
            // fall through
          case 69: break;
          case 4: 
            { return new Symbol(Simbolos.identificador, yycolumn, yyline, yytext());
            } 
            // fall through
          case 70: break;
          case 5: 
            { /* Espacios en blanco se ignoran */
            } 
            // fall through
          case 71: break;
          case 6: 
            { return new Symbol(Simbolos.division, yycolumn, yyline, yytext());
            } 
            // fall through
          case 72: break;
          case 7: 
            { return new Symbol(Simbolos.multiplicacion, yycolumn, yyline, yytext());
            } 
            // fall through
          case 73: break;
          case 8: 
            { return new Symbol(Simbolos.suma, yycolumn, yyline, yytext());
            } 
            // fall through
          case 74: break;
          case 9: 
            { return new Symbol(Simbolos.igual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 75: break;
          case 10: 
            { return new Symbol(Simbolos.not, yycolumn, yyline, yytext());
            } 
            // fall through
          case 76: break;
          case 11: 
            { return new Symbol(Simbolos.menorQue, yycolumn, yyline, yytext());
            } 
            // fall through
          case 77: break;
          case 12: 
            { return new Symbol(Simbolos.mayorQue, yycolumn, yyline, yytext());
            } 
            // fall through
          case 78: break;
          case 13: 
            { return new Symbol(Simbolos.logicoXOR, yycolumn, yyline, yytext());
            } 
            // fall through
          case 79: break;
          case 14: 
            { return new Symbol(Simbolos.parentesisA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 80: break;
          case 15: 
            { return new Symbol(Simbolos.parentesisC, yycolumn, yyline, yytext());
            } 
            // fall through
          case 81: break;
          case 16: 
            { return new Symbol(Simbolos.llaveA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 82: break;
          case 17: 
            { return new Symbol(Simbolos.llaveC, yycolumn, yyline, yytext());
            } 
            // fall through
          case 83: break;
          case 18: 
            { return new Symbol(Simbolos.corcheteA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 84: break;
          case 19: 
            { return new Symbol(Simbolos.corcheteC, yycolumn, yyline, yytext());
            } 
            // fall through
          case 85: break;
          case 20: 
            { return new Symbol(Simbolos.dosPuntos, yycolumn, yyline, yytext());
            } 
            // fall through
          case 86: break;
          case 21: 
            { return new Symbol(Simbolos.puntoComa, yycolumn, yyline, yytext());
            } 
            // fall through
          case 87: break;
          case 22: 
            { return new Symbol(Simbolos.coma, yycolumn, yyline, yytext());
            } 
            // fall through
          case 88: break;
          case 23: 
            { return new Symbol(Simbolos.x, yycolumn, yyline, yytext());
            } 
            // fall through
          case 89: break;
          case 24: 
            { return new Symbol(Simbolos.y, yycolumn, yyline, yytext());
            } 
            // fall through
          case 90: break;
          case 25: 
            { return new Symbol(Simbolos.cadena, yycolumn, yyline, yytext());
            } 
            // fall through
          case 91: break;
          case 26: 
            { return new Symbol(Simbolos.si, yycolumn, yyline, yytext());
            } 
            // fall through
          case 92: break;
          case 27: 
            { 
            } 
            // fall through
          case 93: break;
          case 28: 
            { return new Symbol(Simbolos.igualigual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 94: break;
          case 29: 
            { return new Symbol(Simbolos.diferente, yycolumn, yyline, yytext());
            } 
            // fall through
          case 95: break;
          case 30: 
            { return new Symbol(Simbolos.menorIgual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 96: break;
          case 31: 
            { return new Symbol(Simbolos.mayorIgual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 97: break;
          case 32: 
            { return new Symbol(Simbolos.logicoAND, yycolumn, yyline, yytext());
            } 
            // fall through
          case 98: break;
          case 33: 
            { return new Symbol(Simbolos.logicoOR, yycolumn, yyline, yytext());
            } 
            // fall through
          case 99: break;
          case 34: 
            { return new Symbol(Simbolos.id, yycolumn, yyline, yytext());
            } 
            // fall through
          case 100: break;
          case 35: 
            { return new Symbol(Simbolos.doble, yycolumn, yyline, yytext());
            } 
            // fall through
          case 101: break;
          case 36: 
            { return new Symbol(Simbolos.fuente, yycolumn, yyline, yytext());
            } 
            // fall through
          case 102: break;
          case 37: 
            { return new Symbol(Simbolos.caracter, yycolumn, yyline, yytext());
            } 
            // fall through
          case 103: break;
          case 38: 
            { return new Symbol(Simbolos.potencia, yycolumn, yyline, yytext());
            } 
            // fall through
          case 104: break;
          case 39: 
            { return new Symbol(Simbolos.var, yycolumn, yyline, yytext());
            } 
            // fall through
          case 105: break;
          case 40: 
            { return new Symbol(Simbolos.max, yycolumn, yyline, yytext());
            } 
            // fall through
          case 106: break;
          case 41: 
            { return new Symbol(Simbolos.min, yycolumn, yyline, yytext());
            } 
            // fall through
          case 107: break;
          case 42: 
            { return new Symbol(Simbolos.booleano, yycolumn, yyline, yytext());
            } 
            // fall through
          case 108: break;
          case 43: 
            { return new Symbol(Simbolos.text, yycolumn, yyline, yytext());
            } 
            // fall through
          case 109: break;
          case 44: 
            { return new Symbol(Simbolos.from, yycolumn, yyline, yytext());
            } 
            // fall through
          case 110: break;
          case 45: 
            { return new Symbol(Simbolos.list, yycolumn, yyline, yytext());
            } 
            // fall through
          case 111: break;
          case 46: 
            { return new Symbol(Simbolos.sino, yycolumn, yyline, yytext());
            } 
            // fall through
          case 112: break;
          case 47: 
            { return new Symbol(Simbolos.item, yycolumn, yyline, yytext());
            } 
            // fall through
          case 113: break;
          case 48: 
            { return new Symbol(Simbolos.panel, yycolumn, yyline, yytext());
            } 
            // fall through
          case 114: break;
          case 49: 
            { return new Symbol(Simbolos.width, yycolumn, yyline, yytext());
            } 
            // fall through
          case 115: break;
          case 50: 
            { return new Symbol(Simbolos.color, yycolumn, yyline, yytext());
            } 
            // fall through
          case 116: break;
          case 51: 
            { return new Symbol(Simbolos.image, yycolumn, yyline, yytext());
            } 
            // fall through
          case 117: break;
          case 52: 
            { return new Symbol(Simbolos.retorno, yycolumn, yyline, yytext());
            } 
            // fall through
          case 118: break;
          case 53: 
            { return new Symbol(Simbolos.render, yycolumn, yyline, yytext());
            } 
            // fall through
          case 119: break;
          case 54: 
            { return new Symbol(Simbolos.importar, yycolumn, yyline, yytext());
            } 
            // fall through
          case 120: break;
          case 55: 
            { return new Symbol(Simbolos.height, yycolumn, yyline, yytext());
            } 
            // fall through
          case 121: break;
          case 56: 
            { return new Symbol(Simbolos.button, yycolumn, yyline, yytext());
            } 
            // fall through
          case 122: break;
          case 57: 
            { return new Symbol(Simbolos.border, yycolumn, yyline, yytext());
            } 
            // fall through
          case 123: break;
          case 58: 
            { return new Symbol(Simbolos.repetir, yycolumn, yyline, yytext());
            } 
            // fall through
          case 124: break;
          case 59: 
            { return new Symbol(Simbolos.element, yycolumn, yyline, yytext());
            } 
            // fall through
          case 125: break;
          case 60: 
            { return new Symbol(Simbolos.spinner, yycolumn, yyline, yytext());
            } 
            // fall through
          case 126: break;
          case 61: 
            { return new Symbol(Simbolos.defecto, yycolumn, yyline, yytext());
            } 
            // fall through
          case 127: break;
          case 62: 
            { return new Symbol(Simbolos.mientras, yycolumn, yyline, yytext());
            } 
            // fall through
          case 128: break;
          case 63: 
            { return new Symbol(Simbolos.imprimir, yycolumn, yyline, yytext());
            } 
            // fall through
          case 129: break;
          case 64: 
            { return new Symbol(Simbolos.textField, yycolumn, yyline, yytext());
            } 
            // fall through
          case 130: break;
          case 65: 
            { return new Symbol(Simbolos.className, yycolumn, yyline, yytext());
            } 
            // fall through
          case 131: break;
          case 66: 
            { return new Symbol(Simbolos.component, yycolumn, yyline, yytext());
            } 
            // fall through
          case 132: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
