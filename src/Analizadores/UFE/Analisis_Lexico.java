/* The following code was generated by JFlex 1.7.0 */


/*--------- 1ra Area: Codigo de Usuario ---------*/

//--------> Paquetes e importaciones
package Analizadores.UFE;
import java_cup.runtime.*;
import Estructuras.Cola;
import Modelos.Errores;

/*--------- 2da Area: Opciones y Declaraciones ---------*/


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Lexico.jflex</tt>
 */
public class Analisis_Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int TEXTO = 2;
  public static final int ETIQUETA = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 25, 13, 13, 13, 13,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    25, 34,  3, 19,  0,  0, 37, 12, 39, 40, 18, 29, 46, 28,  2, 17, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 44, 45, 35, 33, 36,  0, 
     0,  9, 60, 48, 54,  7,  8, 59, 58, 53, 14, 14, 10, 50, 51, 31, 
    30, 14,  5, 15,  4,  6, 47, 32, 56, 57, 14, 42,  0, 43, 38, 16, 
     0, 22, 23, 49, 55, 20, 21, 59, 58, 53, 14, 14, 10, 50, 51, 31, 
    30, 14,  5, 15,  4,  6, 26, 32, 56, 57, 14, 24, 27, 41,  0,  0, 
     0,  0,  0,  0,  0, 13,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    25,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\3\1\2\6\4\2\2\1\1"+
    "\1\4\1\5\1\6\1\2\1\4\1\7\1\4\1\2"+
    "\1\10\1\11\2\4\1\12\1\13\1\14\1\15\1\2"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\2\4\1\2\2\4\1\27\1\30\1\4\1\31"+
    "\1\1\1\32\1\33\2\2\1\1\2\2\1\12\1\34"+
    "\2\2\1\27\1\30\1\2\2\0\1\35\6\4\1\0"+
    "\1\4\2\0\1\36\1\0\2\4\1\36\2\0\1\37"+
    "\5\0\3\4\1\40\2\4\1\0\1\4\1\41\1\42"+
    "\1\43\1\44\1\45\3\4\1\0\1\4\2\0\1\46"+
    "\2\4\1\46\2\4\6\0\1\47\10\4\1\0\1\4"+
    "\1\50\2\0\1\51\1\50\2\4\7\0\2\4\1\52"+
    "\1\4\1\53\1\0\4\4\1\54\1\0\1\55\1\4"+
    "\1\55\3\0\4\4\1\0\1\4\5\0\1\56\1\57"+
    "\4\4\1\60\2\61\1\0\1\62\1\4\1\62\2\0"+
    "\1\37\4\0\3\4\1\0\1\4\1\0\3\4\1\0"+
    "\1\4\1\63\3\0\1\63\4\4\1\0\1\4\1\56"+
    "\2\0\5\4\1\0\1\4\1\64\2\0\1\65\2\0"+
    "\2\4\1\66\2\67\1\0\1\4\1\70\1\4\1\0"+
    "\1\4\1\71\2\0\1\71\3\4\1\0\1\4\1\0"+
    "\1\70\1\0\1\4\1\72\1\0\1\4\1\73\1\4"+
    "\1\0\1\4\5\0\1\74\1\75\1\0\2\4\1\0"+
    "\1\4\1\0\1\76\1\4\1\76\1\4\2\77\1\75"+
    "\1\0\1\4\2\100\1\101\2\102\2\0\1\103\1\0"+
    "\1\104\1\0\2\4\1\0\1\4\1\0\1\4\1\105"+
    "\1\0\1\4\1\0\1\106\1\107\1\0\2\4\2\110"+
    "\2\111\2\112\1\0\2\113\1\114\1\115";

  private static int [] zzUnpackAction() {
    int [] result = new int[325];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\u01ab"+
    "\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319\0\267\0\u0356"+
    "\0\u0393\0\267\0\u03d0\0\u040d\0\267\0\u044a\0\u0487\0\267"+
    "\0\267\0\u04c4\0\u0501\0\u053e\0\u057b\0\u05b8\0\u05f5\0\u0632"+
    "\0\267\0\267\0\267\0\267\0\267\0\267\0\267\0\267"+
    "\0\267\0\u066f\0\u06ac\0\u06e9\0\u0726\0\u0763\0\u01e8\0\u01e8"+
    "\0\u07a0\0\u07dd\0\u081a\0\267\0\u07dd\0\u0857\0\u0894\0\u08d1"+
    "\0\u090e\0\u094b\0\267\0\267\0\u0988\0\u09c5\0\267\0\267"+
    "\0\u0a02\0\u0a3f\0\u0131\0\267\0\u0a7c\0\u0ab9\0\u0af6\0\u0b33"+
    "\0\u0b70\0\u0bad\0\u0bea\0\u0c27\0\u0c64\0\u0ca1\0\u0cde\0\u0d1b"+
    "\0\u0d58\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c\0\u0e89\0\u0ec6\0\u0f03"+
    "\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7\0\u1034\0\u1071\0\267\0\u10ae"+
    "\0\u10eb\0\u1128\0\u1165\0\267\0\267\0\267\0\267\0\267"+
    "\0\u11a2\0\u11df\0\u121c\0\u1259\0\u1296\0\u12d3\0\u1310\0\267"+
    "\0\u134d\0\u138a\0\u01e8\0\u13c7\0\u1404\0\u1441\0\u147e\0\u14bb"+
    "\0\u14f8\0\u1535\0\u1572\0\u0a3f\0\u15af\0\u15ec\0\u1629\0\u1666"+
    "\0\u16a3\0\u16e0\0\u171d\0\u175a\0\u1797\0\u17d4\0\267\0\u1811"+
    "\0\u184e\0\267\0\u01e8\0\u188b\0\u18c8\0\u1905\0\u1942\0\u197f"+
    "\0\u19bc\0\u19f9\0\u1a36\0\u1a73\0\u1ab0\0\u1aed\0\u01e8\0\u1b2a"+
    "\0\u01e8\0\u1b67\0\u1ba4\0\u1be1\0\u1c1e\0\u1c5b\0\u01e8\0\u1c98"+
    "\0\267\0\u1cd5\0\u01e8\0\u1d12\0\u1d4f\0\u1d8c\0\u1dc9\0\u1e06"+
    "\0\u1e43\0\u1e80\0\u1ebd\0\u1efa\0\u1f37\0\u1f74\0\u1fb1\0\u1fee"+
    "\0\u202b\0\u01e8\0\u2068\0\u20a5\0\u20e2\0\u211f\0\u215c\0\u01e8"+
    "\0\267\0\u01e8\0\u2199\0\267\0\u21d6\0\u01e8\0\u2213\0\u2250"+
    "\0\267\0\u228d\0\u22ca\0\u2307\0\u2344\0\u2381\0\u23be\0\u23fb"+
    "\0\u2438\0\u2475\0\u24b2\0\u24ef\0\u252c\0\u2569\0\u25a6\0\u25e3"+
    "\0\267\0\u2620\0\u265d\0\u269a\0\u01e8\0\u26d7\0\u2714\0\u2751"+
    "\0\u278e\0\u27cb\0\u2808\0\267\0\u2845\0\u2882\0\u28bf\0\u28fc"+
    "\0\u2939\0\u2976\0\u29b3\0\u29f0\0\u2a2d\0\u2a6a\0\u2aa7\0\u2ae4"+
    "\0\267\0\u2b21\0\u2b5e\0\u2b9b\0\u2bd8\0\u01e8\0\267\0\u01e8"+
    "\0\u2c15\0\u2c52\0\u01e8\0\u2c8f\0\u2ccc\0\u2d09\0\267\0\u2d46"+
    "\0\u2d83\0\u01e8\0\u2dc0\0\u2dfd\0\u2e3a\0\u2e77\0\u2eb4\0\u2ef1"+
    "\0\267\0\u2f2e\0\u2f6b\0\u01e8\0\u2fa8\0\u2fe5\0\u01e8\0\u3022"+
    "\0\u305f\0\u309c\0\u30d9\0\u3116\0\u3153\0\u3190\0\u31cd\0\u01e8"+
    "\0\u01e8\0\u320a\0\u3247\0\u3284\0\u32c1\0\u32fe\0\u333b\0\267"+
    "\0\u3378\0\u01e8\0\u33b5\0\267\0\u01e8\0\267\0\u33f2\0\u342f"+
    "\0\267\0\u01e8\0\u01e8\0\267\0\u01e8\0\u346c\0\u34a9\0\267"+
    "\0\u34e6\0\267\0\u3523\0\u3560\0\u359d\0\u35da\0\u3617\0\u3654"+
    "\0\u3691\0\u01e8\0\u36ce\0\u370b\0\u3748\0\267\0\267\0\u3785"+
    "\0\u37c2\0\u37ff\0\267\0\u01e8\0\267\0\u01e8\0\267\0\u01e8"+
    "\0\u383c\0\267\0\u01e8\0\u01e8\0\267";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[325];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\4\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\11\1\14\1\15\1\16\1\17\1\11\1\20"+
    "\1\4\1\21\1\22\1\23\1\12\1\13\1\11\1\24"+
    "\1\25\1\17\1\26\1\27\1\30\1\31\1\32\1\11"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\26"+
    "\2\52\1\53\1\11\1\54\1\55\2\56\1\57\1\60"+
    "\1\61\1\11\1\24\15\62\1\63\12\62\1\64\3\63"+
    "\7\62\1\65\31\62\1\4\1\5\1\4\1\6\1\66"+
    "\3\4\1\67\3\4\1\16\1\70\7\4\1\67\1\4"+
    "\1\71\1\4\3\70\4\4\1\72\1\73\2\4\1\74"+
    "\13\4\2\75\2\4\2\76\2\4\1\77\1\100\1\101"+
    "\1\4\1\71\76\0\1\5\1\102\72\0\3\103\1\104"+
    "\71\103\1\0\1\11\2\0\1\11\1\105\1\11\1\106"+
    "\3\11\3\0\3\11\3\0\1\106\3\11\2\0\2\11"+
    "\2\0\3\11\16\0\5\11\1\0\10\11\1\0\1\11"+
    "\2\0\3\11\1\107\3\11\3\0\3\11\3\0\1\107"+
    "\3\11\2\0\2\11\2\0\3\11\16\0\5\11\1\0"+
    "\10\11\1\0\1\11\2\0\7\11\3\0\3\11\3\0"+
    "\4\11\2\0\2\11\2\0\3\11\16\0\5\11\1\0"+
    "\10\11\1\0\1\11\2\0\6\11\1\110\3\0\3\11"+
    "\3\0\4\11\2\0\2\11\2\0\3\11\16\0\5\11"+
    "\1\0\10\11\1\0\1\11\2\0\1\11\1\111\3\11"+
    "\1\112\1\11\3\0\3\11\3\0\2\11\1\112\1\11"+
    "\2\0\2\11\2\0\3\11\16\0\5\11\1\0\10\11"+
    "\1\0\1\11\2\0\7\11\3\0\3\11\3\0\4\11"+
    "\2\0\2\11\2\0\3\11\16\0\5\11\1\113\1\114"+
    "\7\11\5\0\1\115\30\0\1\116\25\0\2\117\7\0"+
    "\15\120\1\0\57\120\1\0\1\11\2\0\1\11\1\121"+
    "\5\11\3\0\3\11\3\0\4\11\2\0\2\11\2\0"+
    "\1\122\2\11\16\0\5\11\1\117\1\123\7\11\4\0"+
    "\1\124\6\0\1\125\3\0\1\125\1\0\1\126\1\127"+
    "\4\0\1\130\34\0\2\131\2\132\4\0\1\130\1\0"+
    "\1\133\22\0\4\133\31\0\1\133\5\0\1\133\6\0"+
    "\1\11\2\0\2\11\1\134\4\11\3\0\3\11\3\0"+
    "\4\11\2\0\2\11\2\0\1\11\1\135\1\11\16\0"+
    "\5\11\1\0\10\11\1\0\1\11\2\0\5\11\1\136"+
    "\1\11\3\0\3\11\3\0\2\11\1\136\1\11\2\0"+
    "\2\11\2\0\3\11\16\0\5\11\1\0\10\11\33\0"+
    "\1\137\42\0\1\11\2\0\5\11\1\140\1\11\3\0"+
    "\3\11\3\0\2\11\1\140\1\11\2\0\2\11\2\0"+
    "\1\11\1\141\1\11\16\0\5\11\1\0\10\11\1\0"+
    "\1\11\2\0\7\11\3\0\3\11\3\0\4\11\2\0"+
    "\2\11\2\0\3\11\16\0\5\11\1\142\1\143\7\11"+
    "\41\0\1\144\74\0\1\145\74\0\1\146\74\0\1\147"+
    "\100\0\1\150\30\0\1\11\2\0\6\11\1\151\3\0"+
    "\3\11\3\0\4\11\2\0\2\11\2\0\1\11\1\152"+
    "\1\11\16\0\5\11\1\0\10\11\1\0\1\11\2\0"+
    "\5\11\1\153\1\11\3\0\3\11\3\0\2\11\1\153"+
    "\1\11\2\0\2\11\2\0\3\11\16\0\5\11\1\154"+
    "\1\155\7\11\4\0\1\156\55\0\1\157\3\0\2\160"+
    "\6\0\1\11\2\0\1\161\6\11\3\0\3\11\3\0"+
    "\4\11\2\0\2\11\2\0\3\11\16\0\3\11\1\162"+
    "\1\11\1\0\1\11\2\163\5\11\1\0\1\11\2\0"+
    "\3\11\1\164\3\11\3\0\3\11\3\0\1\164\3\11"+
    "\2\0\2\11\2\0\3\11\16\0\5\11\1\0\10\11"+
    "\1\0\1\11\2\0\3\11\1\165\3\11\3\0\3\11"+
    "\3\0\1\165\3\11\2\0\2\11\2\0\3\11\16\0"+
    "\5\11\1\0\10\11\30\62\1\0\61\62\1\63\12\62"+
    "\1\0\3\63\41\62\5\0\1\166\100\0\1\167\14\0"+
    "\1\167\63\0\1\70\13\0\3\70\100\0\1\170\121\0"+
    "\2\142\21\0\1\171\24\0\1\172\123\0\2\160\14\0"+
    "\1\173\14\0\1\173\51\0\1\174\74\0\1\11\2\0"+
    "\2\11\1\175\4\11\3\0\3\11\3\0\4\11\2\0"+
    "\2\11\2\0\3\11\16\0\5\11\1\0\10\11\1\0"+
    "\1\11\2\0\7\11\3\0\3\11\3\0\4\11\2\0"+
    "\2\11\2\0\3\11\16\0\5\11\1\0\3\11\1\176"+
    "\4\11\1\0\1\11\2\0\1\177\6\11\3\0\3\11"+
    "\3\0\4\11\2\0\2\11\2\0\1\200\2\11\16\0"+
    "\4\11\1\201\1\0\10\11\1\0\1\11\2\0\3\11"+
    "\1\202\3\11\3\0\3\11\3\0\1\202\3\11\2\0"+
    "\2\11\2\0\3\11\16\0\5\11\1\0\10\11\1\0"+
    "\1\11\2\0\7\11\3\0\3\11\3\0\4\11\2\0"+
    "\2\11\2\0\1\11\1\203\1\11\16\0\5\11\1\0"+
    "\10\11\1\0\1\11\2\0\6\11\1\204\3\0\3\11"+
    "\3\0\4\11\2\0\2\11\2\0\3\11\16\0\5\11"+
    "\1\0\10\11\13\0\1\205\3\0\1\205\56\0\1\11"+
    "\2\0\7\11\1\205\2\0\1\11\1\206\1\11\3\0"+
    "\4\11\2\0\2\11\2\0\3\11\16\0\5\11\1\0"+
    "\10\11\60\0\2\207\77\0\2\210\72\0\1\211\25\0"+
    "\1\212\61\0\1\11\2\0\7\11\3\0\3\11\3\0"+
    "\4\11\2\0\2\11\2\0\3\11\16\0\1\11\2\213"+
    "\2\11\1\0\10\11\1\0\1\11\2\0\7\11\3\0"+
    "\3\11\3\0\4\11\2\0\2\11\2\0\3\11\16\0"+
    "\5\11\1\210\1\214\7\11\1\0\1\11\2\0\7\11"+
    "\3\0\3\11\3\0\4\11\2\0\2\11\2\0\3\11"+
    "\16\0\4\11\1\215\1\0\10\11\7\0\1\216\14\0"+
    "\1\216\106\0\1\217\36\0\15\126\1\0\57\126\22\127"+
    "\1\220\52\127\6\0\1\221\72\0\1\222\77\0\1\223"+
    "\14\0\1\223\51\0\1\224\22\0\4\224\31\0\1\224"+
    "\5\0\1\224\6\0\1\11\2\0\1\225\6\11\3\0"+
    "\3\11\3\0\4\11\2\0\2\11\2\0\3\11\16\0"+
    "\5\11\1\0\10\11\1\0\1\11\2\0\1\11\1\226"+
    "\5\11\3\0\3\11\3\0\4\11\2\0\2\11\2\0"+
    "\3\11\16\0\5\11\1\0\10\11\1\0\1\11\2\0"+
    "\1\11\1\227\5\11\3\0\3\11\3\0\4\11\2\0"+
    "\2\11\2\0\3\11\16\0\5\11\1\0\10\11\1\0"+
    "\1\11\2\0\7\11\3\0\3\11\3\0\4\11\2\0"+
    "\2\11\2\0\3\11\16\0\4\11\1\230\1\0\10\11"+
    "\1\0\1\11\2\0\7\11\3\0\3\11\3\0\4\11"+
    "\2\0\2\11\2\0\2\11\1\231\16\0\5\11\1\0"+
    "\10\11\66\0\2\232\6\0\1\11\2\0\7\11\3\0"+
    "\3\11\3\0\4\11\2\0\2\11\2\0\3\11\16\0"+
    "\5\11\1\0\1\11\2\233\5\11\1\0\1\11\2\0"+
    "\5\11\1\234\1\11\3\0\3\11\3\0\2\11\1\234"+
    "\1\11\2\0\2\11\2\0\3\11\16\0\5\11\1\0"+
    "\10\11\1\0\1\11\2\0\6\11\1\235\3\0\3\11"+
    "\3\0\4\11\2\0\2\11\2\0\3\11\16\0\3\11"+
    "\1\236\1\11\1\0\10\11\1\0\1\11\2\0\7\11"+
    "\3\0\3\11\3\0\4\11\2\0\2\11\2\0\3\11"+
    "\16\0\5\11\1\0\3\11\1\237\4\11\7\0\1\240"+
    "\14\0\1\240\36\0\1\241\12\0\1\11\2\0\3\11"+
    "\1\242\3\11\3\0\3\11\3\0\1\242\3\11\2\0"+
    "\2\11\2\0\3\11\16\0\4\11\1\243\1\0\10\11"+
    "\7\0\1\244\14\0\1\244\61\0\1\245\14\0\1\245"+
    "\7\0\1\246\37\0\1\11\2\0\3\11\1\247\3\11"+
    "\3\0\3\11\3\0\1\247\3\11\2\0\2\11\2\0"+
    "\3\11\16\0\5\11\1\0\10\11\1\0\1\11\2\0"+
    "\5\11\1\250\1\11\3\0\3\11\3\0\2\11\1\250"+
    "\1\11\2\0\2\11\2\0\1\251\2\11\16\0\5\11"+
    "\1\0\10\11\1\0\1\11\2\0\4\11\1\252\2\11"+
    "\3\0\3\11\3\0\1\11\1\252\2\11\2\0\2\11"+
    "\2\0\3\11\16\0\5\11\1\0\10\11\1\0\1\11"+
    "\2\0\7\11\3\0\3\11\3\0\4\11\2\0\2\11"+
    "\2\0\3\11\16\0\5\11\1\253\1\254\7\11\6\0"+
    "\1\255\100\0\1\256\67\0\1\257\100\0\1\260\14\0"+
    "\1\260\60\0\1\261\146\0\2\253\10\0\1\11\2\0"+
    "\3\11\1\262\3\11\3\0\3\11\3\0\1\262\3\11"+
    "\2\0\2\11\2\0\3\11\16\0\5\11\1\0\10\11"+
    "\1\0\1\11\2\0\1\263\6\11\3\0\3\11\3\0"+
    "\4\11\2\0\2\11\2\0\3\11\16\0\5\11\1\0"+
    "\10\11\1\0\1\11\2\0\2\11\1\264\4\11\3\0"+
    "\3\11\3\0\4\11\2\0\2\11\2\0\3\11\16\0"+
    "\5\11\1\0\10\11\1\0\1\11\2\0\3\11\1\265"+
    "\3\11\3\0\3\11\3\0\1\265\3\11\2\0\2\11"+
    "\2\0\3\11\16\0\5\11\1\0\10\11\1\0\1\11"+
    "\2\0\7\11\3\0\3\11\3\0\4\11\2\0\2\11"+
    "\2\0\3\11\16\0\5\11\1\0\1\11\2\266\5\11"+
    "\1\0\1\11\2\0\7\11\3\0\3\11\3\0\4\11"+
    "\2\0\2\11\2\0\3\11\16\0\3\11\1\267\1\11"+
    "\1\0\10\11\1\0\1\11\2\0\7\11\3\0\3\11"+
    "\3\0\4\11\2\0\2\11\2\0\3\11\16\0\3\11"+
    "\1\270\1\11\1\0\10\11\1\0\1\11\2\0\7\11"+
    "\1\255\2\0\1\11\1\175\1\11\3\0\4\11\2\0"+
    "\2\11\2\0\3\11\16\0\5\11\1\0\10\11\4\0"+
    "\1\271\71\0\1\11\2\0\1\272\6\11\3\0\3\11"+
    "\3\0\4\11\2\0\2\11\2\0\3\11\16\0\5\11"+
    "\1\0\10\11\63\0\1\273\50\0\1\274\36\0\1\11"+
    "\2\0\7\11\3\0\3\11\3\0\4\11\2\0\2\11"+
    "\2\0\3\11\16\0\4\11\1\275\1\0\10\11\1\0"+
    "\1\11\2\0\7\11\3\0\3\11\3\0\4\11\2\0"+
    "\2\11\2\0\1\11\1\276\1\11\16\0\5\11\1\0"+
    "\10\11\70\0\1\277\70\0\2\300\7\0\21\127\1\301"+
    "\1\220\52\127\4\0\1\302\77\0\1\303\14\0\1\303"+
    "\60\0\1\304\14\0\1\304\50\0\1\305\22\0\4\305"+
    "\31\0\1\305\5\0\1\305\6\0\1\11\2\0\1\306"+
    "\6\11\3\0\3\11\3\0\4\11\2\0\2\11\2\0"+
    "\3\11\16\0\5\11\1\0\10\11\1\0\1\11\2\0"+
    "\7\11\3\0\3\11\3\0\4\11\2\0\2\11\2\0"+
    "\3\11\16\0\5\11\1\0\1\11\2\307\5\11\1\0"+
    "\1\11\2\0\3\11\1\310\3\11\3\0\3\11\3\0"+
    "\1\310\3\11\2\0\2\11\2\0\3\11\16\0\5\11"+
    "\1\0\10\11\4\0\1\311\71\0\1\11\2\0\1\312"+
    "\6\11\3\0\3\11\3\0\4\11\2\0\2\11\2\0"+
    "\3\11\16\0\5\11\1\0\10\11\1\0\1\11\2\0"+
    "\7\11\1\313\2\0\1\11\1\314\1\11\3\0\4\11"+
    "\2\0\2\11\2\0\3\11\16\0\5\11\1\0\10\11"+
    "\1\0\1\11\2\0\7\11\3\0\3\11\3\0\4\11"+
    "\2\0\2\11\2\0\1\11\1\315\1\11\16\0\5\11"+
    "\1\0\10\11\1\0\1\11\2\0\7\11\3\0\3\11"+
    "\3\0\4\11\2\0\2\11\2\0\1\316\2\11\16\0"+
    "\5\11\1\0\10\11\63\0\1\317\12\0\1\11\2\0"+
    "\7\11\3\0\3\11\3\0\4\11\2\0\2\11\2\0"+
    "\3\11\16\0\4\11\1\320\1\0\10\11\62\0\1\321"+
    "\105\0\1\322\6\0\1\323\31\0\1\324\36\0\1\11"+
    "\2\0\7\11\3\0\3\11\3\0\4\11\2\0\2\11"+
    "\2\0\3\11\16\0\3\11\1\325\1\11\1\0\10\11"+
    "\1\0\1\11\2\0\7\11\3\0\3\11\3\0\4\11"+
    "\2\0\2\11\2\0\3\11\16\0\5\11\1\0\6\11"+
    "\1\326\1\11\1\0\1\11\2\0\1\11\1\327\5\11"+
    "\3\0\3\11\3\0\4\11\2\0\2\11\2\0\1\11"+
    "\1\330\1\11\16\0\5\11\1\0\10\11\1\0\1\11"+
    "\2\0\5\11\1\331\1\11\3\0\3\11\3\0\2\11"+
    "\1\331\1\11\2\0\2\11\2\0\3\11\16\0\5\11"+
    "\1\0\10\11\73\0\1\332\2\0\1\11\2\0\7\11"+
    "\3\0\3\11\3\0\4\11\2\0\2\11\2\0\3\11"+
    "\16\0\5\11\1\0\6\11\1\333\1\11\7\0\1\334"+
    "\14\0\1\334\63\0\1\255\3\0\1\255\143\0\2\335"+
    "\20\0\1\313\3\0\1\313\114\0\1\336\36\0\1\11"+
    "\2\0\4\11\1\337\2\11\3\0\3\11\3\0\1\11"+
    "\1\337\2\11\2\0\2\11\2\0\3\11\16\0\5\11"+
    "\1\0\10\11\1\0\1\11\2\0\1\11\1\340\5\11"+
    "\3\0\3\11\3\0\4\11\2\0\2\11\2\0\3\11"+
    "\16\0\5\11\1\0\10\11\1\0\1\11\2\0\1\341"+
    "\6\11\3\0\3\11\3\0\4\11\2\0\2\11\2\0"+
    "\3\11\16\0\5\11\1\0\10\11\1\0\1\11\2\0"+
    "\3\11\1\342\3\11\3\0\3\11\3\0\1\342\3\11"+
    "\2\0\2\11\2\0\3\11\16\0\5\11\1\0\10\11"+
    "\1\0\1\11\2\0\3\11\1\343\3\11\3\0\3\11"+
    "\3\0\1\343\3\11\2\0\2\11\2\0\3\11\16\0"+
    "\5\11\1\0\10\11\63\0\1\344\12\0\1\11\2\0"+
    "\7\11\3\0\3\11\3\0\4\11\2\0\2\11\2\0"+
    "\3\11\16\0\4\11\1\345\1\0\10\11\4\0\1\346"+
    "\153\0\1\347\15\0\1\350\152\0\1\351\23\0\1\352"+
    "\14\0\1\352\47\0\1\353\22\0\4\353\31\0\1\353"+
    "\5\0\1\353\6\0\1\11\2\0\7\11\3\0\3\11"+
    "\3\0\4\11\2\0\2\11\2\0\1\11\1\354\1\11"+
    "\16\0\5\11\1\0\10\11\1\0\1\11\2\0\3\11"+
    "\1\355\3\11\3\0\3\11\3\0\1\355\3\11\2\0"+
    "\2\11\2\0\3\11\16\0\5\11\1\0\10\11\1\0"+
    "\1\11\2\0\6\11\1\356\3\0\3\11\3\0\4\11"+
    "\2\0\2\11\2\0\3\11\16\0\5\11\1\0\10\11"+
    "\72\0\1\357\3\0\1\11\2\0\7\11\3\0\3\11"+
    "\3\0\4\11\2\0\2\11\2\0\3\11\16\0\5\11"+
    "\1\0\5\11\1\360\2\11\13\0\1\361\3\0\1\361"+
    "\56\0\1\11\2\0\7\11\1\361\2\0\1\11\1\362"+
    "\1\11\3\0\4\11\2\0\2\11\2\0\3\11\16\0"+
    "\5\11\1\0\10\11\1\0\1\11\2\0\1\11\1\363"+
    "\5\11\3\0\3\11\3\0\4\11\2\0\2\11\2\0"+
    "\3\11\16\0\5\11\1\0\10\11\1\0\1\11\2\0"+
    "\7\11\3\0\3\11\3\0\4\11\2\0\2\11\2\0"+
    "\1\11\1\364\1\11\16\0\5\11\1\0\10\11\4\0"+
    "\1\365\71\0\1\11\2\0\1\366\6\11\3\0\3\11"+
    "\3\0\4\11\2\0\2\11\2\0\3\11\16\0\5\11"+
    "\1\0\10\11\7\0\1\367\14\0\1\367\134\0\2\370"+
    "\14\0\1\371\70\0\1\11\2\0\3\11\1\372\3\11"+
    "\3\0\3\11\3\0\1\372\3\11\2\0\2\11\2\0"+
    "\3\11\16\0\5\11\1\0\10\11\1\0\1\11\2\0"+
    "\7\11\3\0\3\11\3\0\4\11\2\0\2\11\2\0"+
    "\3\11\16\0\5\11\1\370\1\373\7\11\1\0\1\11"+
    "\2\0\1\11\1\374\5\11\3\0\3\11\3\0\4\11"+
    "\2\0\2\11\2\0\3\11\16\0\5\11\1\0\10\11"+
    "\1\0\1\11\2\0\2\11\1\375\4\11\3\0\3\11"+
    "\3\0\4\11\2\0\2\11\2\0\3\11\16\0\5\11"+
    "\1\0\10\11\72\0\1\376\3\0\1\11\2\0\7\11"+
    "\3\0\3\11\3\0\4\11\2\0\2\11\2\0\3\11"+
    "\16\0\5\11\1\0\5\11\1\377\2\11\7\0\1\u0100"+
    "\14\0\1\u0100\55\0\1\u0101\70\0\1\11\2\0\7\11"+
    "\3\0\3\11\3\0\4\11\2\0\2\11\2\0\3\11"+
    "\16\0\5\11\1\u0102\1\u0103\7\11\1\0\1\11\2\0"+
    "\7\11\3\0\3\11\3\0\4\11\2\0\2\11\2\0"+
    "\3\11\16\0\4\11\1\u0104\1\0\10\11\1\0\1\11"+
    "\2\0\7\11\3\0\3\11\3\0\4\11\2\0\2\11"+
    "\2\0\3\11\16\0\5\11\1\u0105\1\u0106\7\11\1\0"+
    "\1\11\2\0\1\11\1\u0107\5\11\3\0\3\11\3\0"+
    "\4\11\2\0\2\11\2\0\3\11\16\0\5\11\1\0"+
    "\10\11\1\0\1\11\2\0\7\11\3\0\3\11\3\0"+
    "\4\11\2\0\2\11\2\0\3\11\16\0\4\11\1\u0108"+
    "\1\0\10\11\7\0\1\u0109\14\0\1\u0109\51\0\1\11"+
    "\2\0\3\11\1\u010a\3\11\3\0\3\11\3\0\1\u010a"+
    "\3\11\2\0\2\11\2\0\3\11\16\0\5\11\1\0"+
    "\10\11\10\0\1\u010b\14\0\1\u010b\132\0\1\u010c\50\0"+
    "\1\u010d\43\0\1\u010e\67\0\1\u010f\22\0\4\u010f\31\0"+
    "\1\u010f\5\0\1\u010f\6\0\1\11\2\0\7\11\3\0"+
    "\3\11\3\0\4\11\2\0\2\11\2\0\3\11\16\0"+
    "\4\11\1\u0110\1\0\10\11\1\0\1\11\2\0\1\11"+
    "\1\u0111\5\11\3\0\3\11\3\0\4\11\2\0\2\11"+
    "\2\0\3\11\16\0\5\11\1\0\10\11\63\0\1\u0112"+
    "\12\0\1\11\2\0\7\11\3\0\3\11\3\0\4\11"+
    "\2\0\2\11\2\0\3\11\16\0\4\11\1\u0113\1\0"+
    "\10\11\1\0\1\11\2\0\7\11\3\0\3\11\3\0"+
    "\4\11\2\0\2\11\2\0\3\11\16\0\4\11\1\u0114"+
    "\1\0\10\11\5\0\1\u0115\70\0\1\11\2\0\1\11"+
    "\1\u0116\5\11\3\0\3\11\3\0\4\11\2\0\2\11"+
    "\2\0\3\11\16\0\5\11\1\0\10\11\62\0\1\u0117"+
    "\16\0\1\u0118\71\0\1\11\2\0\7\11\3\0\3\11"+
    "\3\0\4\11\2\0\2\11\2\0\3\11\16\0\3\11"+
    "\1\u0119\1\11\1\0\10\11\1\0\1\11\2\0\1\u011a"+
    "\6\11\3\0\3\11\3\0\4\11\2\0\2\11\2\0"+
    "\3\11\16\0\5\11\1\0\10\11\1\0\1\11\2\0"+
    "\6\11\1\u011b\3\0\3\11\3\0\4\11\2\0\2\11"+
    "\2\0\3\11\16\0\5\11\1\0\10\11\4\0\1\u011c"+
    "\71\0\1\11\2\0\1\u011d\6\11\3\0\3\11\3\0"+
    "\4\11\2\0\2\11\2\0\3\11\16\0\5\11\1\0"+
    "\10\11\5\0\1\u011e\76\0\1\u011f\14\0\1\u011f\51\0"+
    "\1\11\2\0\3\11\1\u0120\3\11\3\0\3\11\3\0"+
    "\1\u0120\3\11\2\0\2\11\2\0\3\11\16\0\5\11"+
    "\1\0\10\11\5\0\1\u0121\70\0\1\11\2\0\1\11"+
    "\1\u0122\5\11\3\0\3\11\3\0\4\11\2\0\2\11"+
    "\2\0\3\11\16\0\5\11\1\0\10\11\1\0\1\11"+
    "\2\0\1\u0123\6\11\3\0\3\11\3\0\4\11\2\0"+
    "\2\11\2\0\3\11\16\0\5\11\1\0\10\11\5\0"+
    "\1\u0124\70\0\1\11\2\0\1\11\1\u0125\5\11\3\0"+
    "\3\11\3\0\4\11\2\0\2\11\2\0\3\11\16\0"+
    "\5\11\1\0\10\11\64\0\2\u0126\16\0\1\u0127\14\0"+
    "\1\u0127\133\0\1\u0128\23\0\1\u0129\63\0\1\u012a\22\0"+
    "\4\u012a\31\0\1\u012a\5\0\1\u012a\16\0\1\u012b\14\0"+
    "\1\u012b\47\0\1\11\2\0\5\11\1\u012c\1\11\3\0"+
    "\3\11\3\0\2\11\1\u012c\1\11\2\0\2\11\2\0"+
    "\3\11\16\0\5\11\1\0\10\11\1\0\1\11\2\0"+
    "\3\11\1\u012d\3\11\3\0\3\11\3\0\1\u012d\3\11"+
    "\2\0\2\11\2\0\3\11\16\0\5\11\1\0\10\11"+
    "\11\0\1\u012e\14\0\1\u012e\47\0\1\11\2\0\5\11"+
    "\1\u012f\1\11\3\0\3\11\3\0\2\11\1\u012f\1\11"+
    "\2\0\2\11\2\0\3\11\16\0\5\11\1\0\10\11"+
    "\64\0\2\u0130\10\0\1\11\2\0\7\11\3\0\3\11"+
    "\3\0\4\11\2\0\2\11\2\0\3\11\16\0\5\11"+
    "\1\u0130\1\u0131\7\11\1\0\1\11\2\0\1\u0132\6\11"+
    "\3\0\3\11\3\0\4\11\2\0\2\11\2\0\3\11"+
    "\16\0\5\11\1\0\10\11\12\0\1\u0133\63\0\1\11"+
    "\2\0\6\11\1\u0134\3\0\3\11\3\0\4\11\2\0"+
    "\2\11\2\0\3\11\16\0\5\11\1\0\10\11\7\0"+
    "\1\u0135\14\0\1\u0135\55\0\1\u0136\73\0\1\u0137\152\0"+
    "\1\u0138\13\0\1\11\2\0\7\11\3\0\3\11\3\0"+
    "\4\11\2\0\2\11\2\0\3\11\16\0\3\11\1\u0139"+
    "\1\11\1\0\10\11\1\0\1\11\2\0\7\11\3\0"+
    "\3\11\3\0\4\11\2\0\2\11\2\0\3\11\16\0"+
    "\4\11\1\u013a\1\0\10\11\13\0\1\u013b\3\0\1\u013b"+
    "\56\0\1\11\2\0\7\11\1\u013b\2\0\1\11\1\u013c"+
    "\1\11\3\0\4\11\2\0\2\11\2\0\3\11\16\0"+
    "\5\11\1\0\10\11\5\0\1\u013d\70\0\1\11\2\0"+
    "\1\11\1\u013e\5\11\3\0\3\11\3\0\4\11\2\0"+
    "\2\11\2\0\3\11\16\0\5\11\1\0\10\11\66\0"+
    "\2\u013f\6\0\1\11\2\0\7\11\3\0\3\11\3\0"+
    "\4\11\2\0\2\11\2\0\3\11\16\0\5\11\1\0"+
    "\1\11\2\u0140\5\11\12\0\1\u0141\71\0\1\u0142\14\0"+
    "\1\u0142\51\0\1\11\2\0\3\11\1\u0143\3\11\3\0"+
    "\3\11\3\0\1\u0143\3\11\2\0\2\11\2\0\3\11"+
    "\16\0\5\11\1\0\10\11\1\0\1\11\2\0\1\u0144"+
    "\6\11\3\0\3\11\3\0\4\11\2\0\2\11\2\0"+
    "\3\11\16\0\5\11\1\0\10\11\66\0\2\u0145\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14457];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\1\1\11\12\1\1\11\2\1\1\11\2\1"+
    "\1\11\2\1\2\11\7\1\11\11\12\1\1\11\6\1"+
    "\2\11\2\1\2\11\1\1\2\0\1\11\6\1\1\0"+
    "\1\1\2\0\1\1\1\0\3\1\2\0\1\1\5\0"+
    "\3\1\1\11\2\1\1\0\1\1\5\11\3\1\1\0"+
    "\1\1\2\0\1\11\5\1\6\0\11\1\1\0\1\1"+
    "\1\11\2\0\1\11\3\1\7\0\5\1\1\0\5\1"+
    "\1\0\1\11\2\1\3\0\4\1\1\0\1\1\5\0"+
    "\7\1\1\11\1\1\1\0\1\11\2\1\2\0\1\11"+
    "\4\0\3\1\1\0\1\1\1\0\3\1\1\0\1\1"+
    "\1\11\3\0\5\1\1\0\1\1\1\11\2\0\5\1"+
    "\1\0\2\1\2\0\1\11\2\0\3\1\1\11\1\1"+
    "\1\0\3\1\1\0\1\1\1\11\2\0\4\1\1\0"+
    "\1\1\1\0\1\11\1\0\2\1\1\0\3\1\1\0"+
    "\1\1\5\0\2\1\1\0\2\1\1\0\1\1\1\0"+
    "\1\11\3\1\1\11\1\1\1\11\1\0\1\1\1\11"+
    "\2\1\1\11\1\1\2\0\1\11\1\0\1\11\1\0"+
    "\2\1\1\0\1\1\1\0\2\1\1\0\1\1\1\0"+
    "\2\11\1\0\2\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\1\1\0\1\11\2\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[325];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //--------> Codigo de Usuario en sintaxis Java
    public Cola ErroresLexicos = new Cola();



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analisis_Lexico(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Simbolos.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /* Espacios en blanco se ignoran */
            } 
            // fall through
          case 78: break;
          case 2: 
            { System.out.println("Error Lexico Lexema: " + yytext() + " Fila: " + yyline + " Columna: " + yycolumn);
                                        Errores error = new Errores(yytext(),yyline,yycolumn
                                            ,"Error Lexico, No Especificado en el Lenguaje","Lexico");
                                        ErroresLexicos.insertar(error);
            } 
            // fall through
          case 79: break;
          case 3: 
            { return new Symbol(Simbolos.entero, yycolumn, yyline, yytext());
            } 
            // fall through
          case 80: break;
          case 4: 
            { return new Symbol(Simbolos.identificador, yycolumn, yyline, yytext());
            } 
            // fall through
          case 81: break;
          case 5: 
            { return new Symbol(Simbolos.division, yycolumn, yyline, yytext());
            } 
            // fall through
          case 82: break;
          case 6: 
            { return new Symbol(Simbolos.multiplicacion, yycolumn, yyline, yytext());
            } 
            // fall through
          case 83: break;
          case 7: 
            { return new Symbol(Simbolos.llaveA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 84: break;
          case 8: 
            { return new Symbol(Simbolos.resta, yycolumn, yyline, yytext());
            } 
            // fall through
          case 85: break;
          case 9: 
            { return new Symbol(Simbolos.suma, yycolumn, yyline, yytext());
            } 
            // fall through
          case 86: break;
          case 10: 
            { return new Symbol(Simbolos.igual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 87: break;
          case 11: 
            { return new Symbol(Simbolos.not, yycolumn, yyline, yytext());
            } 
            // fall through
          case 88: break;
          case 12: 
            { return new Symbol(Simbolos.menorQue, yycolumn, yyline, yytext());
            } 
            // fall through
          case 89: break;
          case 13: 
            { return new Symbol(Simbolos.mayorQue, yycolumn, yyline, yytext());
            } 
            // fall through
          case 90: break;
          case 14: 
            { return new Symbol(Simbolos.logicoXOR, yycolumn, yyline, yytext());
            } 
            // fall through
          case 91: break;
          case 15: 
            { return new Symbol(Simbolos.parentesisA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 92: break;
          case 16: 
            { return new Symbol(Simbolos.parentesisC, yycolumn, yyline, yytext());
            } 
            // fall through
          case 93: break;
          case 17: 
            { return new Symbol(Simbolos.llaveC, yycolumn, yyline, yytext());
            } 
            // fall through
          case 94: break;
          case 18: 
            { return new Symbol(Simbolos.corcheteA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 95: break;
          case 19: 
            { return new Symbol(Simbolos.corcheteC, yycolumn, yyline, yytext());
            } 
            // fall through
          case 96: break;
          case 20: 
            { return new Symbol(Simbolos.dosPuntos, yycolumn, yyline, yytext());
            } 
            // fall through
          case 97: break;
          case 21: 
            { return new Symbol(Simbolos.puntoComa, yycolumn, yyline, yytext());
            } 
            // fall through
          case 98: break;
          case 22: 
            { return new Symbol(Simbolos.coma, yycolumn, yyline, yytext());
            } 
            // fall through
          case 99: break;
          case 23: 
            { return new Symbol(Simbolos.posicionX, yycolumn, yyline, yytext());
            } 
            // fall through
          case 100: break;
          case 24: 
            { return new Symbol(Simbolos.posicionY, yycolumn, yyline, yytext());
            } 
            // fall through
          case 101: break;
          case 25: 
            { yybegin(YYINITIAL); return new Symbol(Simbolos.texto, yycolumn, yyline, yytext());
            } 
            // fall through
          case 102: break;
          case 26: 
            { yybegin(YYINITIAL); return new Symbol(Simbolos.llaveA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 103: break;
          case 27: 
            { yybegin(YYINITIAL); return new Symbol(Simbolos.menorQue, yycolumn, yyline, yytext());
            } 
            // fall through
          case 104: break;
          case 28: 
            { yybegin(TEXTO); return new Symbol(Simbolos.mayorQue, yycolumn, yyline, yytext());
            } 
            // fall through
          case 105: break;
          case 29: 
            { return new Symbol(Simbolos.cadena, yycolumn, yyline, yytext());
            } 
            // fall through
          case 106: break;
          case 30: 
            { return new Symbol(Simbolos.si, yycolumn, yyline, yytext());
            } 
            // fall through
          case 107: break;
          case 31: 
            { 
            } 
            // fall through
          case 108: break;
          case 32: 
            { return new Symbol(Simbolos.logicoOR, yycolumn, yyline, yytext());
            } 
            // fall through
          case 109: break;
          case 33: 
            { return new Symbol(Simbolos.igualigual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 110: break;
          case 34: 
            { return new Symbol(Simbolos.diferente, yycolumn, yyline, yytext());
            } 
            // fall through
          case 111: break;
          case 35: 
            { return new Symbol(Simbolos.menorIgual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 112: break;
          case 36: 
            { return new Symbol(Simbolos.mayorIgual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 113: break;
          case 37: 
            { return new Symbol(Simbolos.logicoAND, yycolumn, yyline, yytext());
            } 
            // fall through
          case 114: break;
          case 38: 
            { return new Symbol(Simbolos.id, yycolumn, yyline, yytext());
            } 
            // fall through
          case 115: break;
          case 39: 
            { return new Symbol(Simbolos.doble, yycolumn, yyline, yytext());
            } 
            // fall through
          case 116: break;
          case 40: 
            { return new Symbol(Simbolos.fuente, yycolumn, yyline, yytext());
            } 
            // fall through
          case 117: break;
          case 41: 
            { return new Symbol(Simbolos.caracter, yycolumn, yyline, yytext());
            } 
            // fall through
          case 118: break;
          case 42: 
            { return new Symbol(Simbolos.var, yycolumn, yyline, yytext());
            } 
            // fall through
          case 119: break;
          case 43: 
            { return new Symbol(Simbolos.potencia, yycolumn, yyline, yytext());
            } 
            // fall through
          case 120: break;
          case 44: 
            { return new Symbol(Simbolos.max, yycolumn, yyline, yytext());
            } 
            // fall through
          case 121: break;
          case 45: 
            { return new Symbol(Simbolos.min, yycolumn, yyline, yytext());
            } 
            // fall through
          case 122: break;
          case 46: 
            { return new Symbol(Simbolos.booleano, yycolumn, yyline, yytext());
            } 
            // fall through
          case 123: break;
          case 47: 
            { yybegin(ETIQUETA); return new Symbol(Simbolos.textt, yycolumn, yyline, yytext());
            } 
            // fall through
          case 124: break;
          case 48: 
            { return new Symbol(Simbolos.from, yycolumn, yyline, yytext());
            } 
            // fall through
          case 125: break;
          case 49: 
            { return new Symbol(Simbolos.list, yycolumn, yyline, yytext());
            } 
            // fall through
          case 126: break;
          case 50: 
            { return new Symbol(Simbolos.sino, yycolumn, yyline, yytext());
            } 
            // fall through
          case 127: break;
          case 51: 
            { yybegin(ETIQUETA); return new Symbol(Simbolos.item, yycolumn, yyline, yytext());
            } 
            // fall through
          case 128: break;
          case 52: 
            { return new Symbol(Simbolos.ftext, yycolumn, yyline, yytext());
            } 
            // fall through
          case 129: break;
          case 53: 
            { return new Symbol(Simbolos.fitem, yycolumn, yyline, yytext());
            } 
            // fall through
          case 130: break;
          case 54: 
            { return new Symbol(Simbolos.panel, yycolumn, yyline, yytext());
            } 
            // fall through
          case 131: break;
          case 55: 
            { return new Symbol(Simbolos.width, yycolumn, yyline, yytext());
            } 
            // fall through
          case 132: break;
          case 56: 
            { return new Symbol(Simbolos.color, yycolumn, yyline, yytext());
            } 
            // fall through
          case 133: break;
          case 57: 
            { return new Symbol(Simbolos.image, yycolumn, yyline, yytext());
            } 
            // fall through
          case 134: break;
          case 58: 
            { return new Symbol(Simbolos.retorno, yycolumn, yyline, yytext());
            } 
            // fall through
          case 135: break;
          case 59: 
            { return new Symbol(Simbolos.render, yycolumn, yyline, yytext());
            } 
            // fall through
          case 136: break;
          case 60: 
            { yybegin(ETIQUETA); return new Symbol(Simbolos.button, yycolumn, yyline, yytext());
            } 
            // fall through
          case 137: break;
          case 61: 
            { return new Symbol(Simbolos.border, yycolumn, yyline, yytext());
            } 
            // fall through
          case 138: break;
          case 62: 
            { return new Symbol(Simbolos.importar, yycolumn, yyline, yytext());
            } 
            // fall through
          case 139: break;
          case 63: 
            { return new Symbol(Simbolos.height, yycolumn, yyline, yytext());
            } 
            // fall through
          case 140: break;
          case 64: 
            { return new Symbol(Simbolos.repetir, yycolumn, yyline, yytext());
            } 
            // fall through
          case 141: break;
          case 65: 
            { return new Symbol(Simbolos.element, yycolumn, yyline, yytext());
            } 
            // fall through
          case 142: break;
          case 66: 
            { yybegin(ETIQUETA); return new Symbol(Simbolos.spinner, yycolumn, yyline, yytext());
            } 
            // fall through
          case 143: break;
          case 67: 
            { return new Symbol(Simbolos.fbutton, yycolumn, yyline, yytext());
            } 
            // fall through
          case 144: break;
          case 68: 
            { return new Symbol(Simbolos.hexadecimal, yycolumn, yyline, yytext());
            } 
            // fall through
          case 145: break;
          case 69: 
            { yybegin(ETIQUETA); return new Symbol(Simbolos.defecto, yycolumn, yyline, yytext());
            } 
            // fall through
          case 146: break;
          case 70: 
            { return new Symbol(Simbolos.fspinner, yycolumn, yyline, yytext());
            } 
            // fall through
          case 147: break;
          case 71: 
            { return new Symbol(Simbolos.fdefecto, yycolumn, yyline, yytext());
            } 
            // fall through
          case 148: break;
          case 72: 
            { return new Symbol(Simbolos.mientras, yycolumn, yyline, yytext());
            } 
            // fall through
          case 149: break;
          case 73: 
            { return new Symbol(Simbolos.imprimir, yycolumn, yyline, yytext());
            } 
            // fall through
          case 150: break;
          case 74: 
            { yybegin(ETIQUETA); return new Symbol(Simbolos.textField, yycolumn, yyline, yytext());
            } 
            // fall through
          case 151: break;
          case 75: 
            { return new Symbol(Simbolos.className, yycolumn, yyline, yytext());
            } 
            // fall through
          case 152: break;
          case 76: 
            { return new Symbol(Simbolos.component, yycolumn, yyline, yytext());
            } 
            // fall through
          case 153: break;
          case 77: 
            { return new Symbol(Simbolos.ftextField, yycolumn, yyline, yytext());
            } 
            // fall through
          case 154: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
